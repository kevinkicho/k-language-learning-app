"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_google-services_ts";
exports.ids = ["_rsc_lib_google-services_ts"];
exports.modules = {

/***/ "(rsc)/./lib/google-services.ts":
/*!********************************!*\
  !*** ./lib/google-services.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAudio: () => (/* binding */ generateAudio),\n/* harmony export */   googleServices: () => (/* binding */ googleServices)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_translate_build_src_v2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/translate/build/src/v2 */ \"(rsc)/./node_modules/@google-cloud/translate/build/src/v2/index.js\");\n/* harmony import */ var _google_cloud_text_to_speech__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/text-to-speech */ \"(rsc)/./node_modules/@google-cloud/text-to-speech/build/src/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n// Initialize Google Cloud clients\nconst translate = new _google_cloud_translate_build_src_v2__WEBPACK_IMPORTED_MODULE_0__.Translate({\n    keyFilename: path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'translate032625-47af80242d72.json')\n});\nconst textToSpeechClient = new _google_cloud_text_to_speech__WEBPACK_IMPORTED_MODULE_1__.TextToSpeechClient({\n    keyFilename: path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'translate032625-47af80242d72.json')\n});\n// Ensure audio directory exists\nconst AUDIO_DIR = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'public', 'audio');\nasync function ensureAudioDirectory() {\n    try {\n        await fs_promises__WEBPACK_IMPORTED_MODULE_3___default().access(AUDIO_DIR);\n    } catch  {\n        await fs_promises__WEBPACK_IMPORTED_MODULE_3___default().mkdir(AUDIO_DIR, {\n            recursive: true\n        });\n    }\n}\n// Standalone function for generating audio (returns Buffer)\nasync function generateAudio(text, language = 'es-ES') {\n    try {\n        const request = {\n            input: {\n                text\n            },\n            voice: {\n                languageCode: language,\n                name: language === 'es-ES' ? 'es-ES-Neural2-A' : 'en-US-Neural2-F',\n                ssmlGender: 'FEMALE'\n            },\n            audioConfig: {\n                audioEncoding: 'MP3',\n                speakingRate: 0.9,\n                pitch: 0\n            }\n        };\n        const [response] = await textToSpeechClient.synthesizeSpeech(request);\n        if (!response.audioContent) {\n            throw new Error('No audio content received');\n        }\n        return Buffer.from(response.audioContent);\n    } catch (error) {\n        console.error('Audio generation error:', error);\n        throw new Error('Audio generation failed');\n    }\n}\nconst googleServices = {\n    // Translate text to Spanish\n    async translateToSpanish (text) {\n        try {\n            const [translation] = await translate.translate(text, 'es');\n            return translation;\n        } catch (error) {\n            console.error('Translation error:', error);\n            throw new Error('Translation failed');\n        }\n    },\n    // Generate audio for text\n    async generateAudio (text, sentenceId) {\n        try {\n            await ensureAudioDirectory();\n            const request = {\n                input: {\n                    text\n                },\n                voice: {\n                    languageCode: 'es-ES',\n                    name: 'es-ES-Neural2-A',\n                    ssmlGender: 'FEMALE'\n                },\n                audioConfig: {\n                    audioEncoding: 'MP3',\n                    speakingRate: 0.8,\n                    pitch: 0\n                }\n            };\n            const [response] = await textToSpeechClient.synthesizeSpeech(request);\n            if (!response.audioContent) {\n                throw new Error('No audio content received');\n            }\n            const audioPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(AUDIO_DIR, `${sentenceId}.mp3`);\n            await fs_promises__WEBPACK_IMPORTED_MODULE_3___default().writeFile(audioPath, response.audioContent, 'binary');\n            return `/audio/${sentenceId}.mp3`;\n        } catch (error) {\n            console.error('Audio generation error:', error);\n            throw new Error('Audio generation failed');\n        }\n    },\n    // Process sentence: translate and generate audio\n    async processSentence (englishSentence, sentenceId) {\n        try {\n            // Translate the sentence\n            const translation = await this.translateToSpanish(englishSentence);\n            // Generate audio for the Spanish translation\n            const audioPath = await this.generateAudio(translation, sentenceId);\n            return {\n                translation,\n                audioPath\n            };\n        } catch (error) {\n            console.error('Sentence processing error:', error);\n            throw error;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-services.ts\n");

/***/ })

};
;
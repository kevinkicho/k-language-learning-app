/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-gax";
exports.ids = ["vendor-chunks/google-gax"];
exports.modules = {

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.js":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,r,F,a=o.Reader,i=o.Writer,p=o.util,l=o.roots.iam_protos||(o.roots.iam_protos={});function B(e,t,n){o.rpc.Service.call(this,e,t,n)}function s(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(this.permissions=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(this.permissions=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(this.bindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.members=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.bindingDeltas=[],this.auditConfigDeltas=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(this.pattern=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.uninterpretedOption=[],this[\".google.api.resourceDefinition\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],this[\".google.api.fieldBehavior\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Z(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function $(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ee(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return l.google=((F={}).iam=((n={}).v1=((t={}).IAMPolicy=(((B.prototype=Object.create(o.rpc.Service.prototype)).constructor=B).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(B.prototype.setIamPolicy=function e(t,n){return this.rpcCall(e,l.google.iam.v1.SetIamPolicyRequest,l.google.iam.v1.Policy,t,n)},\"name\",{value:\"SetIamPolicy\"}),Object.defineProperty(B.prototype.getIamPolicy=function e(t,n){return this.rpcCall(e,l.google.iam.v1.GetIamPolicyRequest,l.google.iam.v1.Policy,t,n)},\"name\",{value:\"GetIamPolicy\"}),Object.defineProperty(B.prototype.testIamPermissions=function e(t,n){return this.rpcCall(e,l.google.iam.v1.TestIamPermissionsRequest,l.google.iam.v1.TestIamPermissionsResponse,t,n)},\"name\",{value:\"TestIamPermissions\"}),B),t.SetIamPolicyRequest=(s.prototype.resource=\"\",s.prototype.policy=null,s.create=function(e){return new s(e)},s.encode=function(e,t){return t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.policy&&Object.hasOwnProperty.call(e,\"policy\")&&l.google.iam.v1.Policy.encode(e.policy,t.uint32(18).fork()).ldelim(),t},s.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},s.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.SetIamPolicyRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.policy=l.google.iam.v1.Policy.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},s.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},s.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.policy&&e.hasOwnProperty(\"policy\")){e=l.google.iam.v1.Policy.verify(e.policy);if(e)return\"policy.\"+e}return null},s.fromObject=function(e){if(e instanceof l.google.iam.v1.SetIamPolicyRequest)return e;var t=new l.google.iam.v1.SetIamPolicyRequest;if(null!=e.resource&&(t.resource=String(e.resource)),null!=e.policy){if(\"object\"!=typeof e.policy)throw TypeError(\".google.iam.v1.SetIamPolicyRequest.policy: object expected\");t.policy=l.google.iam.v1.Policy.fromObject(e.policy)}return t},s.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.resource=\"\",n.policy=null),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),null!=e.policy&&e.hasOwnProperty(\"policy\")&&(n.policy=l.google.iam.v1.Policy.toObject(e.policy,t)),n},s.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},s),t.GetIamPolicyRequest=(u.prototype.resource=\"\",u.prototype.options=null,u.create=function(e){return new u(e)},u.encode=function(e,t){return t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.iam.v1.GetPolicyOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},u.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},u.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.GetIamPolicyRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.options=l.google.iam.v1.GetPolicyOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},u.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},u.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.iam.v1.GetPolicyOptions.verify(e.options);if(e)return\"options.\"+e}return null},u.fromObject=function(e){if(e instanceof l.google.iam.v1.GetIamPolicyRequest)return e;var t=new l.google.iam.v1.GetIamPolicyRequest;if(null!=e.resource&&(t.resource=String(e.resource)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.iam.v1.GetIamPolicyRequest.options: object expected\");t.options=l.google.iam.v1.GetPolicyOptions.fromObject(e.options)}return t},u.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.resource=\"\",n.options=null),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.iam.v1.GetPolicyOptions.toObject(e.options,t)),n},u.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},u),t.TestIamPermissionsRequest=(c.prototype.resource=\"\",c.prototype.permissions=p.emptyArray,c.create=function(e){return new c(e)},c.encode=function(e,t){if(t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.permissions&&e.permissions.length)for(var n=0;n<e.permissions.length;++n)t.uint32(18).string(e.permissions[n]);return t},c.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},c.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.TestIamPermissionsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.permissions&&o.permissions.length||(o.permissions=[]),o.permissions.push(e.string());break;default:e.skipType(7&r)}}return o},c.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},c.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.permissions&&e.hasOwnProperty(\"permissions\")){if(!Array.isArray(e.permissions))return\"permissions: array expected\";for(var t=0;t<e.permissions.length;++t)if(!p.isString(e.permissions[t]))return\"permissions: string[] expected\"}return null},c.fromObject=function(e){if(e instanceof l.google.iam.v1.TestIamPermissionsRequest)return e;var t=new l.google.iam.v1.TestIamPermissionsRequest;if(null!=e.resource&&(t.resource=String(e.resource)),e.permissions){if(!Array.isArray(e.permissions))throw TypeError(\".google.iam.v1.TestIamPermissionsRequest.permissions: array expected\");t.permissions=[];for(var n=0;n<e.permissions.length;++n)t.permissions[n]=String(e.permissions[n])}return t},c.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.permissions=[]),t.defaults&&(n.resource=\"\"),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),e.permissions&&e.permissions.length){n.permissions=[];for(var o=0;o<e.permissions.length;++o)n.permissions[o]=e.permissions[o]}return n},c.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},c),t.TestIamPermissionsResponse=(G.prototype.permissions=p.emptyArray,G.create=function(e){return new G(e)},G.encode=function(e,t){if(t=t||i.create(),null!=e.permissions&&e.permissions.length)for(var n=0;n<e.permissions.length;++n)t.uint32(10).string(e.permissions[n]);return t},G.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},G.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.TestIamPermissionsResponse;e.pos<n;){var r=e.uint32();r>>>3==1?(o.permissions&&o.permissions.length||(o.permissions=[]),o.permissions.push(e.string())):e.skipType(7&r)}return o},G.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},G.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.permissions&&e.hasOwnProperty(\"permissions\")){if(!Array.isArray(e.permissions))return\"permissions: array expected\";for(var t=0;t<e.permissions.length;++t)if(!p.isString(e.permissions[t]))return\"permissions: string[] expected\"}return null},G.fromObject=function(e){if(e instanceof l.google.iam.v1.TestIamPermissionsResponse)return e;var t=new l.google.iam.v1.TestIamPermissionsResponse;if(e.permissions){if(!Array.isArray(e.permissions))throw TypeError(\".google.iam.v1.TestIamPermissionsResponse.permissions: array expected\");t.permissions=[];for(var n=0;n<e.permissions.length;++n)t.permissions[n]=String(e.permissions[n])}return t},G.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.permissions=[]),e.permissions&&e.permissions.length){n.permissions=[];for(var o=0;o<e.permissions.length;++o)n.permissions[o]=e.permissions[o]}return n},G.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},G),t.GetPolicyOptions=(U.prototype.requestedPolicyVersion=0,U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||i.create(),null!=e.requestedPolicyVersion&&Object.hasOwnProperty.call(e,\"requestedPolicyVersion\")&&t.uint32(8).int32(e.requestedPolicyVersion),t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.GetPolicyOptions;e.pos<n;){var r=e.uint32();r>>>3==1?o.requestedPolicyVersion=e.int32():e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},U.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.requestedPolicyVersion&&e.hasOwnProperty(\"requestedPolicyVersion\")&&!p.isInteger(e.requestedPolicyVersion)?\"requestedPolicyVersion: integer expected\":null},U.fromObject=function(e){var t;return e instanceof l.google.iam.v1.GetPolicyOptions?e:(t=new l.google.iam.v1.GetPolicyOptions,null!=e.requestedPolicyVersion&&(t.requestedPolicyVersion=0|e.requestedPolicyVersion),t)},U.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.requestedPolicyVersion=0),null!=e.requestedPolicyVersion&&e.hasOwnProperty(\"requestedPolicyVersion\")&&(n.requestedPolicyVersion=e.requestedPolicyVersion),n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),t.Policy=(d.prototype.version=0,d.prototype.bindings=p.emptyArray,d.prototype.etag=p.newBuffer([]),d.create=function(e){return new d(e)},d.encode=function(e,t){if(t=t||i.create(),null!=e.version&&Object.hasOwnProperty.call(e,\"version\")&&t.uint32(8).int32(e.version),null!=e.etag&&Object.hasOwnProperty.call(e,\"etag\")&&t.uint32(26).bytes(e.etag),null!=e.bindings&&e.bindings.length)for(var n=0;n<e.bindings.length;++n)l.google.iam.v1.Binding.encode(e.bindings[n],t.uint32(34).fork()).ldelim();return t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.Policy;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.version=e.int32();break;case 4:o.bindings&&o.bindings.length||(o.bindings=[]),o.bindings.push(l.google.iam.v1.Binding.decode(e,e.uint32()));break;case 3:o.etag=e.bytes();break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},d.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.version&&e.hasOwnProperty(\"version\")&&!p.isInteger(e.version))return\"version: integer expected\";if(null!=e.bindings&&e.hasOwnProperty(\"bindings\")){if(!Array.isArray(e.bindings))return\"bindings: array expected\";for(var t=0;t<e.bindings.length;++t){var n=l.google.iam.v1.Binding.verify(e.bindings[t]);if(n)return\"bindings.\"+n}}return null!=e.etag&&e.hasOwnProperty(\"etag\")&&!(e.etag&&\"number\"==typeof e.etag.length||p.isString(e.etag))?\"etag: buffer expected\":null},d.fromObject=function(e){if(e instanceof l.google.iam.v1.Policy)return e;var t=new l.google.iam.v1.Policy;if(null!=e.version&&(t.version=0|e.version),e.bindings){if(!Array.isArray(e.bindings))throw TypeError(\".google.iam.v1.Policy.bindings: array expected\");t.bindings=[];for(var n=0;n<e.bindings.length;++n){if(\"object\"!=typeof e.bindings[n])throw TypeError(\".google.iam.v1.Policy.bindings: object expected\");t.bindings[n]=l.google.iam.v1.Binding.fromObject(e.bindings[n])}}return null!=e.etag&&(\"string\"==typeof e.etag?p.base64.decode(e.etag,t.etag=p.newBuffer(p.base64.length(e.etag)),0):e.etag.length&&(t.etag=e.etag)),t},d.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.bindings=[]),t.defaults&&(n.version=0,t.bytes===String?n.etag=\"\":(n.etag=[],t.bytes!==Array&&(n.etag=p.newBuffer(n.etag)))),null!=e.version&&e.hasOwnProperty(\"version\")&&(n.version=e.version),null!=e.etag&&e.hasOwnProperty(\"etag\")&&(n.etag=t.bytes===String?p.base64.encode(e.etag,0,e.etag.length):t.bytes===Array?Array.prototype.slice.call(e.etag):e.etag),e.bindings&&e.bindings.length){n.bindings=[];for(var o=0;o<e.bindings.length;++o)n.bindings[o]=l.google.iam.v1.Binding.toObject(e.bindings[o],t)}return n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),t.Binding=(g.prototype.role=\"\",g.prototype.members=p.emptyArray,g.prototype.condition=null,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||i.create(),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(10).string(e.role),null!=e.members&&e.members.length)for(var n=0;n<e.members.length;++n)t.uint32(18).string(e.members[n]);return null!=e.condition&&Object.hasOwnProperty.call(e,\"condition\")&&l.google.type.Expr.encode(e.condition,t.uint32(26).fork()).ldelim(),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.Binding;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.role=e.string();break;case 2:o.members&&o.members.length||(o.members=[]),o.members.push(e.string());break;case 3:o.condition=l.google.type.Expr.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},g.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.role&&e.hasOwnProperty(\"role\")&&!p.isString(e.role))return\"role: string expected\";if(null!=e.members&&e.hasOwnProperty(\"members\")){if(!Array.isArray(e.members))return\"members: array expected\";for(var t=0;t<e.members.length;++t)if(!p.isString(e.members[t]))return\"members: string[] expected\"}if(null!=e.condition&&e.hasOwnProperty(\"condition\")){var n=l.google.type.Expr.verify(e.condition);if(n)return\"condition.\"+n}return null},g.fromObject=function(e){if(e instanceof l.google.iam.v1.Binding)return e;var t=new l.google.iam.v1.Binding;if(null!=e.role&&(t.role=String(e.role)),e.members){if(!Array.isArray(e.members))throw TypeError(\".google.iam.v1.Binding.members: array expected\");t.members=[];for(var n=0;n<e.members.length;++n)t.members[n]=String(e.members[n])}if(null!=e.condition){if(\"object\"!=typeof e.condition)throw TypeError(\".google.iam.v1.Binding.condition: object expected\");t.condition=l.google.type.Expr.fromObject(e.condition)}return t},g.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.members=[]),t.defaults&&(n.role=\"\",n.condition=null),null!=e.role&&e.hasOwnProperty(\"role\")&&(n.role=e.role),e.members&&e.members.length){n.members=[];for(var o=0;o<e.members.length;++o)n.members[o]=e.members[o]}return null!=e.condition&&e.hasOwnProperty(\"condition\")&&(n.condition=l.google.type.Expr.toObject(e.condition,t)),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),t.PolicyDelta=(M.prototype.bindingDeltas=p.emptyArray,M.prototype.auditConfigDeltas=p.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||i.create(),null!=e.bindingDeltas&&e.bindingDeltas.length)for(var n=0;n<e.bindingDeltas.length;++n)l.google.iam.v1.BindingDelta.encode(e.bindingDeltas[n],t.uint32(10).fork()).ldelim();if(null!=e.auditConfigDeltas&&e.auditConfigDeltas.length)for(n=0;n<e.auditConfigDeltas.length;++n)l.google.iam.v1.AuditConfigDelta.encode(e.auditConfigDeltas[n],t.uint32(18).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.PolicyDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.bindingDeltas&&o.bindingDeltas.length||(o.bindingDeltas=[]),o.bindingDeltas.push(l.google.iam.v1.BindingDelta.decode(e,e.uint32()));break;case 2:o.auditConfigDeltas&&o.auditConfigDeltas.length||(o.auditConfigDeltas=[]),o.auditConfigDeltas.push(l.google.iam.v1.AuditConfigDelta.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},M.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.bindingDeltas&&e.hasOwnProperty(\"bindingDeltas\")){if(!Array.isArray(e.bindingDeltas))return\"bindingDeltas: array expected\";for(var t=0;t<e.bindingDeltas.length;++t)if(n=l.google.iam.v1.BindingDelta.verify(e.bindingDeltas[t]))return\"bindingDeltas.\"+n}if(null!=e.auditConfigDeltas&&e.hasOwnProperty(\"auditConfigDeltas\")){if(!Array.isArray(e.auditConfigDeltas))return\"auditConfigDeltas: array expected\";for(var n,t=0;t<e.auditConfigDeltas.length;++t)if(n=l.google.iam.v1.AuditConfigDelta.verify(e.auditConfigDeltas[t]))return\"auditConfigDeltas.\"+n}return null},M.fromObject=function(e){if(e instanceof l.google.iam.v1.PolicyDelta)return e;var t=new l.google.iam.v1.PolicyDelta;if(e.bindingDeltas){if(!Array.isArray(e.bindingDeltas))throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: array expected\");t.bindingDeltas=[];for(var n=0;n<e.bindingDeltas.length;++n){if(\"object\"!=typeof e.bindingDeltas[n])throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: object expected\");t.bindingDeltas[n]=l.google.iam.v1.BindingDelta.fromObject(e.bindingDeltas[n])}}if(e.auditConfigDeltas){if(!Array.isArray(e.auditConfigDeltas))throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected\");t.auditConfigDeltas=[];for(n=0;n<e.auditConfigDeltas.length;++n){if(\"object\"!=typeof e.auditConfigDeltas[n])throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected\");t.auditConfigDeltas[n]=l.google.iam.v1.AuditConfigDelta.fromObject(e.auditConfigDeltas[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.bindingDeltas=[],n.auditConfigDeltas=[]),e.bindingDeltas&&e.bindingDeltas.length){n.bindingDeltas=[];for(var o=0;o<e.bindingDeltas.length;++o)n.bindingDeltas[o]=l.google.iam.v1.BindingDelta.toObject(e.bindingDeltas[o],t)}if(e.auditConfigDeltas&&e.auditConfigDeltas.length){n.auditConfigDeltas=[];for(o=0;o<e.auditConfigDeltas.length;++o)n.auditConfigDeltas[o]=l.google.iam.v1.AuditConfigDelta.toObject(e.auditConfigDeltas[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),t.BindingDelta=(f.prototype.action=0,f.prototype.role=\"\",f.prototype.member=\"\",f.prototype.condition=null,f.create=function(e){return new f(e)},f.encode=function(e,t){return t=t||i.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).int32(e.action),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(18).string(e.role),null!=e.member&&Object.hasOwnProperty.call(e,\"member\")&&t.uint32(26).string(e.member),null!=e.condition&&Object.hasOwnProperty.call(e,\"condition\")&&l.google.type.Expr.encode(e.condition,t.uint32(34).fork()).ldelim(),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.BindingDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.action=e.int32();break;case 2:o.role=e.string();break;case 3:o.member=e.string();break;case 4:o.condition=l.google.type.Expr.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.action&&e.hasOwnProperty(\"action\"))switch(e.action){default:return\"action: enum value expected\";case 0:case 1:case 2:}if(null!=e.role&&e.hasOwnProperty(\"role\")&&!p.isString(e.role))return\"role: string expected\";if(null!=e.member&&e.hasOwnProperty(\"member\")&&!p.isString(e.member))return\"member: string expected\";if(null!=e.condition&&e.hasOwnProperty(\"condition\")){e=l.google.type.Expr.verify(e.condition);if(e)return\"condition.\"+e}return null},f.fromObject=function(e){if(e instanceof l.google.iam.v1.BindingDelta)return e;var t=new l.google.iam.v1.BindingDelta;switch(e.action){case\"ACTION_UNSPECIFIED\":case 0:t.action=0;break;case\"ADD\":case 1:t.action=1;break;case\"REMOVE\":case 2:t.action=2}if(null!=e.role&&(t.role=String(e.role)),null!=e.member&&(t.member=String(e.member)),null!=e.condition){if(\"object\"!=typeof e.condition)throw TypeError(\".google.iam.v1.BindingDelta.condition: object expected\");t.condition=l.google.type.Expr.fromObject(e.condition)}return t},f.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.action=t.enums===String?\"ACTION_UNSPECIFIED\":0,n.role=\"\",n.member=\"\",n.condition=null),null!=e.action&&e.hasOwnProperty(\"action\")&&(n.action=t.enums===String?l.google.iam.v1.BindingDelta.Action[e.action]:e.action),null!=e.role&&e.hasOwnProperty(\"role\")&&(n.role=e.role),null!=e.member&&e.hasOwnProperty(\"member\")&&(n.member=e.member),null!=e.condition&&e.hasOwnProperty(\"condition\")&&(n.condition=l.google.type.Expr.toObject(e.condition,t)),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f.Action=(e={},(r=Object.create(e))[e[0]=\"ACTION_UNSPECIFIED\"]=0,r[e[1]=\"ADD\"]=1,r[e[2]=\"REMOVE\"]=2,r),f),t.AuditConfigDelta=(y.prototype.action=0,y.prototype.service=\"\",y.prototype.exemptedMember=\"\",y.prototype.logType=\"\",y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||i.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).int32(e.action),null!=e.service&&Object.hasOwnProperty.call(e,\"service\")&&t.uint32(18).string(e.service),null!=e.exemptedMember&&Object.hasOwnProperty.call(e,\"exemptedMember\")&&t.uint32(26).string(e.exemptedMember),null!=e.logType&&Object.hasOwnProperty.call(e,\"logType\")&&t.uint32(34).string(e.logType),t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.AuditConfigDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.action=e.int32();break;case 2:o.service=e.string();break;case 3:o.exemptedMember=e.string();break;case 4:o.logType=e.string();break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.action&&e.hasOwnProperty(\"action\"))switch(e.action){default:return\"action: enum value expected\";case 0:case 1:case 2:}return null!=e.service&&e.hasOwnProperty(\"service\")&&!p.isString(e.service)?\"service: string expected\":null!=e.exemptedMember&&e.hasOwnProperty(\"exemptedMember\")&&!p.isString(e.exemptedMember)?\"exemptedMember: string expected\":null!=e.logType&&e.hasOwnProperty(\"logType\")&&!p.isString(e.logType)?\"logType: string expected\":null},y.fromObject=function(e){if(e instanceof l.google.iam.v1.AuditConfigDelta)return e;var t=new l.google.iam.v1.AuditConfigDelta;switch(e.action){case\"ACTION_UNSPECIFIED\":case 0:t.action=0;break;case\"ADD\":case 1:t.action=1;break;case\"REMOVE\":case 2:t.action=2}return null!=e.service&&(t.service=String(e.service)),null!=e.exemptedMember&&(t.exemptedMember=String(e.exemptedMember)),null!=e.logType&&(t.logType=String(e.logType)),t},y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.action=t.enums===String?\"ACTION_UNSPECIFIED\":0,n.service=\"\",n.exemptedMember=\"\",n.logType=\"\"),null!=e.action&&e.hasOwnProperty(\"action\")&&(n.action=t.enums===String?l.google.iam.v1.AuditConfigDelta.Action[e.action]:e.action),null!=e.service&&e.hasOwnProperty(\"service\")&&(n.service=e.service),null!=e.exemptedMember&&e.hasOwnProperty(\"exemptedMember\")&&(n.exemptedMember=e.exemptedMember),null!=e.logType&&e.hasOwnProperty(\"logType\")&&(n.logType=e.logType),n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y.Action=(e={},(r=Object.create(e))[e[0]=\"ACTION_UNSPECIFIED\"]=0,r[e[1]=\"ADD\"]=1,r[e[2]=\"REMOVE\"]=2,r),y),t.logging=((e={}).AuditData=(L.prototype.policyDelta=null,L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||i.create(),null!=e.policyDelta&&Object.hasOwnProperty.call(e,\"policyDelta\")&&l.google.iam.v1.PolicyDelta.encode(e.policyDelta,t.uint32(18).fork()).ldelim(),t},L.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},L.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.logging.AuditData;e.pos<n;){var r=e.uint32();r>>>3==2?o.policyDelta=l.google.iam.v1.PolicyDelta.decode(e,e.uint32()):e.skipType(7&r)}return o},L.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},L.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.policyDelta&&e.hasOwnProperty(\"policyDelta\")){e=l.google.iam.v1.PolicyDelta.verify(e.policyDelta);if(e)return\"policyDelta.\"+e}return null},L.fromObject=function(e){if(e instanceof l.google.iam.v1.logging.AuditData)return e;var t=new l.google.iam.v1.logging.AuditData;if(null!=e.policyDelta){if(\"object\"!=typeof e.policyDelta)throw TypeError(\".google.iam.v1.logging.AuditData.policyDelta: object expected\");t.policyDelta=l.google.iam.v1.PolicyDelta.fromObject(e.policyDelta)}return t},L.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.policyDelta=null),null!=e.policyDelta&&e.hasOwnProperty(\"policyDelta\")&&(n.policyDelta=l.google.iam.v1.PolicyDelta.toObject(e.policyDelta,t)),n},L.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},L),e),t),n),F.api=((r={}).Http=(J.prototype.rules=p.emptyArray,J.prototype.fullyDecodeReservedExpansion=!1,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||i.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)l.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(l.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},J.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=l.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},J.fromObject=function(e){if(e instanceof l.google.api.Http)return e;var t=new l.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=l.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=l.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J),r.HttpRule=(h.prototype.selector=\"\",h.prototype.get=\"\",h.prototype.put=\"\",h.prototype.post=\"\",h.prototype.delete=\"\",h.prototype.patch=\"\",h.prototype.custom=null,h.prototype.body=\"\",h.prototype.responseBody=\"\",h.prototype.additionalBindings=p.emptyArray,Object.defineProperty(h.prototype,\"pattern\",{get:p.oneOfGetter(e=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:p.oneOfSetter(e)}),h.create=function(e){return new h(e)},h.encode=function(e,t){if(t=t||i.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&l.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)l.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=l.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(l.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!p.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!p.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=l.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!p.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!p.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=l.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},h.fromObject=function(e){if(e instanceof l.google.api.HttpRule)return e;var t=new l.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=l.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=l.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},h.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=l.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=l.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),r.CustomHttpPattern=(_.prototype.kind=\"\",_.prototype.path=\"\",_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||i.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},_.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},_.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!p.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!p.isString(e.path)?\"path: string expected\":null},_.fromObject=function(e){var t;return e instanceof l.google.api.CustomHttpPattern?e:(t=new l.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},_.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_),r.FieldBehavior=(e={},(t=Object.create(e))[e[0]=\"FIELD_BEHAVIOR_UNSPECIFIED\"]=0,t[e[1]=\"OPTIONAL\"]=1,t[e[2]=\"REQUIRED\"]=2,t[e[3]=\"OUTPUT_ONLY\"]=3,t[e[4]=\"INPUT_ONLY\"]=4,t[e[5]=\"IMMUTABLE\"]=5,t),r.ResourceDescriptor=(b.prototype.type=\"\",b.prototype.pattern=p.emptyArray,b.prototype.nameField=\"\",b.prototype.history=0,b.prototype.plural=\"\",b.prototype.singular=\"\",b.create=function(e){return new b(e)},b.encode=function(e,t){if(t=t||i.create(),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(10).string(e.type),null!=e.pattern&&e.pattern.length)for(var n=0;n<e.pattern.length;++n)t.uint32(18).string(e.pattern[n]);return null!=e.nameField&&Object.hasOwnProperty.call(e,\"nameField\")&&t.uint32(26).string(e.nameField),null!=e.history&&Object.hasOwnProperty.call(e,\"history\")&&t.uint32(32).int32(e.history),null!=e.plural&&Object.hasOwnProperty.call(e,\"plural\")&&t.uint32(42).string(e.plural),null!=e.singular&&Object.hasOwnProperty.call(e,\"singular\")&&t.uint32(50).string(e.singular),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.ResourceDescriptor;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type=e.string();break;case 2:o.pattern&&o.pattern.length||(o.pattern=[]),o.pattern.push(e.string());break;case 3:o.nameField=e.string();break;case 4:o.history=e.int32();break;case 5:o.plural=e.string();break;case 6:o.singular=e.string();break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},b.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.type&&e.hasOwnProperty(\"type\")&&!p.isString(e.type))return\"type: string expected\";if(null!=e.pattern&&e.hasOwnProperty(\"pattern\")){if(!Array.isArray(e.pattern))return\"pattern: array expected\";for(var t=0;t<e.pattern.length;++t)if(!p.isString(e.pattern[t]))return\"pattern: string[] expected\"}if(null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&!p.isString(e.nameField))return\"nameField: string expected\";if(null!=e.history&&e.hasOwnProperty(\"history\"))switch(e.history){default:return\"history: enum value expected\";case 0:case 1:case 2:}return null!=e.plural&&e.hasOwnProperty(\"plural\")&&!p.isString(e.plural)?\"plural: string expected\":null!=e.singular&&e.hasOwnProperty(\"singular\")&&!p.isString(e.singular)?\"singular: string expected\":null},b.fromObject=function(e){if(e instanceof l.google.api.ResourceDescriptor)return e;var t=new l.google.api.ResourceDescriptor;if(null!=e.type&&(t.type=String(e.type)),e.pattern){if(!Array.isArray(e.pattern))throw TypeError(\".google.api.ResourceDescriptor.pattern: array expected\");t.pattern=[];for(var n=0;n<e.pattern.length;++n)t.pattern[n]=String(e.pattern[n])}switch(null!=e.nameField&&(t.nameField=String(e.nameField)),e.history){case\"HISTORY_UNSPECIFIED\":case 0:t.history=0;break;case\"ORIGINALLY_SINGLE_PATTERN\":case 1:t.history=1;break;case\"FUTURE_MULTI_PATTERN\":case 2:t.history=2}return null!=e.plural&&(t.plural=String(e.plural)),null!=e.singular&&(t.singular=String(e.singular)),t},b.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.pattern=[]),t.defaults&&(n.type=\"\",n.nameField=\"\",n.history=t.enums===String?\"HISTORY_UNSPECIFIED\":0,n.plural=\"\",n.singular=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=e.type),e.pattern&&e.pattern.length){n.pattern=[];for(var o=0;o<e.pattern.length;++o)n.pattern[o]=e.pattern[o]}return null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&(n.nameField=e.nameField),null!=e.history&&e.hasOwnProperty(\"history\")&&(n.history=t.enums===String?l.google.api.ResourceDescriptor.History[e.history]:e.history),null!=e.plural&&e.hasOwnProperty(\"plural\")&&(n.plural=e.plural),null!=e.singular&&e.hasOwnProperty(\"singular\")&&(n.singular=e.singular),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b.History=(e={},(t=Object.create(e))[e[0]=\"HISTORY_UNSPECIFIED\"]=0,t[e[1]=\"ORIGINALLY_SINGLE_PATTERN\"]=1,t[e[2]=\"FUTURE_MULTI_PATTERN\"]=2,t),b),r.ResourceReference=(H.prototype.type=\"\",H.prototype.childType=\"\",H.create=function(e){return new H(e)},H.encode=function(e,t){return t=t||i.create(),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(10).string(e.type),null!=e.childType&&Object.hasOwnProperty.call(e,\"childType\")&&t.uint32(18).string(e.childType),t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.ResourceReference;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type=e.string();break;case 2:o.childType=e.string();break;default:e.skipType(7&r)}}return o},H.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},H.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type&&e.hasOwnProperty(\"type\")&&!p.isString(e.type)?\"type: string expected\":null!=e.childType&&e.hasOwnProperty(\"childType\")&&!p.isString(e.childType)?\"childType: string expected\":null},H.fromObject=function(e){var t;return e instanceof l.google.api.ResourceReference?e:(t=new l.google.api.ResourceReference,null!=e.type&&(t.type=String(e.type)),null!=e.childType&&(t.childType=String(e.childType)),t)},H.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type=\"\",n.childType=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=e.type),null!=e.childType&&e.hasOwnProperty(\"childType\")&&(n.childType=e.childType),n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),r),F.protobuf=((n={}).FileDescriptorSet=(q.prototype.file=p.emptyArray,q.create=function(e){return new q(e)},q.encode=function(e,t){if(t=t||i.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)l.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(l.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},q.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=l.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},q.fromObject=function(e){if(e instanceof l.google.protobuf.FileDescriptorSet)return e;var t=new l.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=l.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},q.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=l.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},q),n.FileDescriptorProto=(m.prototype.name=\"\",m.prototype.package=\"\",m.prototype.dependency=p.emptyArray,m.prototype.publicDependency=p.emptyArray,m.prototype.weakDependency=p.emptyArray,m.prototype.messageType=p.emptyArray,m.prototype.enumType=p.emptyArray,m.prototype.service=p.emptyArray,m.prototype.extension=p.emptyArray,m.prototype.options=null,m.prototype.sourceCodeInfo=null,m.prototype.syntax=\"\",m.create=function(e){return new m(e)},m.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)l.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)l.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&l.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(l.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(l.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=l.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},m.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!p.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!p.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!p.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!p.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=l.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=l.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=l.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!p.isString(e.syntax)?\"syntax: string expected\":null},m.fromObject=function(e){if(e instanceof l.google.protobuf.FileDescriptorProto)return e;var t=new l.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=l.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=l.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=l.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},m.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=l.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=l.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),n.DescriptorProto=(O.prototype.name=\"\",O.prototype.field=p.emptyArray,O.prototype.extension=p.emptyArray,O.prototype.nestedType=p.emptyArray,O.prototype.enumType=p.emptyArray,O.prototype.extensionRange=p.emptyArray,O.prototype.oneofDecl=p.emptyArray,O.prototype.options=null,O.prototype.reservedRange=p.emptyArray,O.prototype.reservedName=p.emptyArray,O.create=function(e){return new O(e)},O.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)l.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)l.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)l.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)l.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(l.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(l.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(l.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=l.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(l.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=l.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=l.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=l.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=l.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!p.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},O.fromObject=function(e){if(e instanceof l.google.protobuf.DescriptorProto)return e;var t=new l.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=l.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=l.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=l.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=l.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=l.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},O.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=l.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=l.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=l.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=l.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.ExtensionRange=(v.prototype.start=0,v.prototype.end=0,v.prototype.options=null,v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=l.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},v.fromObject=function(e){if(e instanceof l.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new l.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=l.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},v.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v),O.ReservedRange=(Y.prototype.start=0,Y.prototype.end=0,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},Y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},Y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Y.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},Y.fromObject=function(e){var t;return e instanceof l.google.protobuf.DescriptorProto.ReservedRange?e:(t=new l.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},Y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},Y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Y),O),n.ExtensionRangeOptions=(z.prototype.uninterpretedOption=p.emptyArray,z.create=function(e){return new z(e)},z.encode=function(e,t){if(t=t||i.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},z.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},z.fromObject=function(e){if(e instanceof l.google.protobuf.ExtensionRangeOptions)return e;var t=new l.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},z.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},z),n.FieldDescriptorProto=(P.prototype.name=\"\",P.prototype.number=0,P.prototype.label=1,P.prototype.type=1,P.prototype.typeName=\"\",P.prototype.extendee=\"\",P.prototype.defaultValue=\"\",P.prototype.oneofIndex=0,P.prototype.jsonName=\"\",P.prototype.options=null,P.prototype.proto3Optional=!1,P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=l.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},P.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!p.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!p.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!p.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!p.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!p.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!p.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=l.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},P.fromObject=function(e){if(e instanceof l.google.protobuf.FieldDescriptorProto)return e;var t=new l.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=l.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},P.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?l.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?l.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P.Type=(e={},(t=Object.create(e))[e[1]=\"TYPE_DOUBLE\"]=1,t[e[2]=\"TYPE_FLOAT\"]=2,t[e[3]=\"TYPE_INT64\"]=3,t[e[4]=\"TYPE_UINT64\"]=4,t[e[5]=\"TYPE_INT32\"]=5,t[e[6]=\"TYPE_FIXED64\"]=6,t[e[7]=\"TYPE_FIXED32\"]=7,t[e[8]=\"TYPE_BOOL\"]=8,t[e[9]=\"TYPE_STRING\"]=9,t[e[10]=\"TYPE_GROUP\"]=10,t[e[11]=\"TYPE_MESSAGE\"]=11,t[e[12]=\"TYPE_BYTES\"]=12,t[e[13]=\"TYPE_UINT32\"]=13,t[e[14]=\"TYPE_ENUM\"]=14,t[e[15]=\"TYPE_SFIXED32\"]=15,t[e[16]=\"TYPE_SFIXED64\"]=16,t[e[17]=\"TYPE_SINT32\"]=17,t[e[18]=\"TYPE_SINT64\"]=18,t),P.Label=(e={},(t=Object.create(e))[e[1]=\"LABEL_OPTIONAL\"]=1,t[e[2]=\"LABEL_REQUIRED\"]=2,t[e[3]=\"LABEL_REPEATED\"]=3,t),P),n.OneofDescriptorProto=(W.prototype.name=\"\",W.prototype.options=null,W.create=function(e){return new W(e)},W.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},W.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},W.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=l.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},W.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},W.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},W.fromObject=function(e){if(e instanceof l.google.protobuf.OneofDescriptorProto)return e;var t=new l.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=l.google.protobuf.OneofOptions.fromObject(e.options)}return t},W.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.OneofOptions.toObject(e.options,t)),n},W.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},W),n.EnumDescriptorProto=(w.prototype.name=\"\",w.prototype.value=p.emptyArray,w.prototype.options=null,w.prototype.reservedRange=p.emptyArray,w.prototype.reservedName=p.emptyArray,w.create=function(e){return new w(e)},w.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)l.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)l.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(l.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=l.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(l.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=l.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!p.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},w.fromObject=function(e){if(e instanceof l.google.protobuf.EnumDescriptorProto)return e;var t=new l.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=l.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=l.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},w.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=l.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w.EnumReservedRange=(X.prototype.start=0,X.prototype.end=0,X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},X.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},X.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},X.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},X.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},X.fromObject=function(e){var t;return e instanceof l.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new l.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},X.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},X.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},X),w),n.EnumValueDescriptorProto=(j.prototype.name=\"\",j.prototype.number=0,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=l.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!p.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},j.fromObject=function(e){if(e instanceof l.google.protobuf.EnumValueDescriptorProto)return e;var t=new l.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=l.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),n.ServiceDescriptorProto=(D.prototype.name=\"\",D.prototype.method=p.emptyArray,D.prototype.options=null,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)l.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(l.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=l.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=l.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},D.fromObject=function(e){if(e instanceof l.google.protobuf.ServiceDescriptorProto)return e;var t=new l.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=l.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=l.google.protobuf.ServiceOptions.fromObject(e.options)}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=l.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.ServiceOptions.toObject(e.options,t)),n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D),n.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=l.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!p.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!p.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=l.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof l.google.protobuf.MethodDescriptorProto)return e;var t=new l.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=l.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),n.FileOptions=(S.prototype.javaPackage=\"\",S.prototype.javaOuterClassname=\"\",S.prototype.javaMultipleFiles=!1,S.prototype.javaGenerateEqualsAndHash=!1,S.prototype.javaStringCheckUtf8=!1,S.prototype.optimizeFor=1,S.prototype.goPackage=\"\",S.prototype.ccGenericServices=!1,S.prototype.javaGenericServices=!1,S.prototype.pyGenericServices=!1,S.prototype.phpGenericServices=!1,S.prototype.deprecated=!1,S.prototype.ccEnableArenas=!0,S.prototype.objcClassPrefix=\"\",S.prototype.csharpNamespace=\"\",S.prototype.swiftPrefix=\"\",S.prototype.phpClassPrefix=\"\",S.prototype.phpNamespace=\"\",S.prototype.phpMetadataNamespace=\"\",S.prototype.rubyPackage=\"\",S.prototype.uninterpretedOption=p.emptyArray,S.prototype[\".google.api.resourceDefinition\"]=p.emptyArray,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||i.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length)for(n=0;n<e[\".google.api.resourceDefinition\"].length;++n)l.google.api.ResourceDescriptor.encode(e[\".google.api.resourceDefinition\"][n],t.uint32(8426).fork()).ldelim();return t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1053:o[\".google.api.resourceDefinition\"]&&o[\".google.api.resourceDefinition\"].length||(o[\".google.api.resourceDefinition\"]=[]),o[\".google.api.resourceDefinition\"].push(l.google.api.ResourceDescriptor.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!p.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!p.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!p.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!p.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!p.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!p.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!p.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!p.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!p.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!p.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}if(null!=e[\".google.api.resourceDefinition\"]&&e.hasOwnProperty(\".google.api.resourceDefinition\")){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))return\".google.api.resourceDefinition: array expected\";for(var n,t=0;t<e[\".google.api.resourceDefinition\"].length;++t)if(n=l.google.api.ResourceDescriptor.verify(e[\".google.api.resourceDefinition\"][t]))return\".google.api.resourceDefinition.\"+n}return null},S.fromObject=function(e){if(e instanceof l.google.protobuf.FileOptions)return e;var t=new l.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(e[\".google.api.resourceDefinition\"]){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: array expected\");t[\".google.api.resourceDefinition\"]=[];for(n=0;n<e[\".google.api.resourceDefinition\"].length;++n){if(\"object\"!=typeof e[\".google.api.resourceDefinition\"][n])throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: object expected\");t[\".google.api.resourceDefinition\"][n]=l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resourceDefinition\"][n])}}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.resourceDefinition\"]=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?l.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length){n[\".google.api.resourceDefinition\"]=[];for(o=0;o<e[\".google.api.resourceDefinition\"].length;++o)n[\".google.api.resourceDefinition\"][o]=l.google.api.ResourceDescriptor.toObject(e[\".google.api.resourceDefinition\"][o],t)}return n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S.OptimizeMode=(e={},(t=Object.create(e))[e[1]=\"SPEED\"]=1,t[e[2]=\"CODE_SIZE\"]=2,t[e[3]=\"LITE_RUNTIME\"]=3,t),S),n.MessageOptions=(k.prototype.messageSetWireFormat=!1,k.prototype.noStandardDescriptorAccessor=!1,k.prototype.deprecated=!1,k.prototype.mapEntry=!1,k.prototype.uninterpretedOption=p.emptyArray,k.prototype[\".google.api.resource\"]=null,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||i.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.resource\"]&&Object.hasOwnProperty.call(e,\".google.api.resource\")&&l.google.api.ResourceDescriptor.encode(e[\".google.api.resource\"],t.uint32(8426).fork()).ldelim(),t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1053:o[\".google.api.resource\"]=l.google.api.ResourceDescriptor.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(n=l.google.api.ResourceDescriptor.verify(e[\".google.api.resource\"])))return\".google.api.resource.\"+n;return null},k.fromObject=function(e){if(e instanceof l.google.protobuf.MessageOptions)return e;var t=new l.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.resource\"]){if(\"object\"!=typeof e[\".google.api.resource\"])throw TypeError(\".google.protobuf.MessageOptions..google.api.resource: object expected\");t[\".google.api.resource\"]=l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resource\"])}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1,n[\".google.api.resource\"]=null),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(n[\".google.api.resource\"]=l.google.api.ResourceDescriptor.toObject(e[\".google.api.resource\"],t)),n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k),n.FieldOptions=(T.prototype.ctype=0,T.prototype.packed=!1,T.prototype.jstype=0,T.prototype.lazy=!1,T.prototype.deprecated=!1,T.prototype.weak=!1,T.prototype.uninterpretedOption=p.emptyArray,T.prototype[\".google.api.fieldBehavior\"]=p.emptyArray,T.prototype[\".google.api.resourceReference\"]=null,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||i.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){t.uint32(8418).fork();for(n=0;n<e[\".google.api.fieldBehavior\"].length;++n)t.int32(e[\".google.api.fieldBehavior\"][n]);t.ldelim()}return null!=e[\".google.api.resourceReference\"]&&Object.hasOwnProperty.call(e,\".google.api.resourceReference\")&&l.google.api.ResourceReference.encode(e[\".google.api.resourceReference\"],t.uint32(8442).fork()).ldelim(),t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1052:if(o[\".google.api.fieldBehavior\"]&&o[\".google.api.fieldBehavior\"].length||(o[\".google.api.fieldBehavior\"]=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o[\".google.api.fieldBehavior\"].push(e.int32());else o[\".google.api.fieldBehavior\"].push(e.int32());break;case 1055:o[\".google.api.resourceReference\"]=l.google.api.ResourceReference.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}if(null!=e[\".google.api.fieldBehavior\"]&&e.hasOwnProperty(\".google.api.fieldBehavior\")){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))return\".google.api.fieldBehavior: array expected\";for(t=0;t<e[\".google.api.fieldBehavior\"].length;++t)switch(e[\".google.api.fieldBehavior\"][t]){default:return\".google.api.fieldBehavior: enum value[] expected\";case 0:case 1:case 2:case 3:case 4:case 5:}}var n;if(null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(n=l.google.api.ResourceReference.verify(e[\".google.api.resourceReference\"])))return\".google.api.resourceReference.\"+n;return null},T.fromObject=function(e){if(e instanceof l.google.protobuf.FieldOptions)return e;var t=new l.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(e[\".google.api.fieldBehavior\"]){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))throw TypeError(\".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected\");t[\".google.api.fieldBehavior\"]=[];for(n=0;n<e[\".google.api.fieldBehavior\"].length;++n)switch(e[\".google.api.fieldBehavior\"][n]){default:case\"FIELD_BEHAVIOR_UNSPECIFIED\":case 0:t[\".google.api.fieldBehavior\"][n]=0;break;case\"OPTIONAL\":case 1:t[\".google.api.fieldBehavior\"][n]=1;break;case\"REQUIRED\":case 2:t[\".google.api.fieldBehavior\"][n]=2;break;case\"OUTPUT_ONLY\":case 3:t[\".google.api.fieldBehavior\"][n]=3;break;case\"INPUT_ONLY\":case 4:t[\".google.api.fieldBehavior\"][n]=4;break;case\"IMMUTABLE\":case 5:t[\".google.api.fieldBehavior\"][n]=5}}if(null!=e[\".google.api.resourceReference\"]){if(\"object\"!=typeof e[\".google.api.resourceReference\"])throw TypeError(\".google.protobuf.FieldOptions..google.api.resourceReference: object expected\");t[\".google.api.resourceReference\"]=l.google.api.ResourceReference.fromObject(e[\".google.api.resourceReference\"])}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.fieldBehavior\"]=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1,n[\".google.api.resourceReference\"]=null),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?l.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?l.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){n[\".google.api.fieldBehavior\"]=[];for(o=0;o<e[\".google.api.fieldBehavior\"].length;++o)n[\".google.api.fieldBehavior\"][o]=t.enums===String?l.google.api.FieldBehavior[e[\".google.api.fieldBehavior\"][o]]:e[\".google.api.fieldBehavior\"][o]}return null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(n[\".google.api.resourceReference\"]=l.google.api.ResourceReference.toObject(e[\".google.api.resourceReference\"],t)),n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T.CType=(e={},(t=Object.create(e))[e[0]=\"STRING\"]=0,t[e[1]=\"CORD\"]=1,t[e[2]=\"STRING_PIECE\"]=2,t),T.JSType=(e={},(t=Object.create(e))[e[0]=\"JS_NORMAL\"]=0,t[e[1]=\"JS_STRING\"]=1,t[e[2]=\"JS_NUMBER\"]=2,t),T),n.OneofOptions=(Q.prototype.uninterpretedOption=p.emptyArray,Q.create=function(e){return new Q(e)},Q.encode=function(e,t){if(t=t||i.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},Q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},Q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Q.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},Q.fromObject=function(e){if(e instanceof l.google.protobuf.OneofOptions)return e;var t=new l.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},Q.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},Q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Q),n.EnumOptions=(E.prototype.allowAlias=!1,E.prototype.deprecated=!1,E.prototype.uninterpretedOption=p.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||i.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof l.google.protobuf.EnumOptions)return e;var t=new l.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),n.EnumValueOptions=(K.prototype.deprecated=!1,K.prototype.uninterpretedOption=p.emptyArray,K.create=function(e){return new K(e)},K.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},K.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},K.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},K.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},K.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},K.fromObject=function(e){if(e instanceof l.google.protobuf.EnumValueOptions)return e;var t=new l.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},K.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},K.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},K),n.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=p.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!p.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!p.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof l.google.protobuf.ServiceOptions)return e;var t=new l.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),n.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=p.emptyArray,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=p.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&l.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 72295728:o[\".google.api.http\"]=l.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=l.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!p.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof l.google.protobuf.MethodOptions)return e;var t=new l.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=l.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?l.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=l.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(e={},(t=Object.create(e))[e[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,t[e[1]=\"NO_SIDE_EFFECTS\"]=1,t[e[2]=\"IDEMPOTENT\"]=2,t),N),n.UninterpretedOption=(R.prototype.name=p.emptyArray,R.prototype.identifierValue=\"\",R.prototype.positiveIntValue=p.Long?p.Long.fromBits(0,0,!0):0,R.prototype.negativeIntValue=p.Long?p.Long.fromBits(0,0,!1):0,R.prototype.doubleValue=0,R.prototype.stringValue=p.newBuffer([]),R.prototype.aggregateValue=\"\",R.create=function(e){return new R(e)},R.encode=function(e,t){if(t=t||i.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)l.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(l.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},R.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},R.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=l.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!p.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(p.isInteger(e.positiveIntValue)||e.positiveIntValue&&p.isInteger(e.positiveIntValue.low)&&p.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(p.isInteger(e.negativeIntValue)||e.negativeIntValue&&p.isInteger(e.negativeIntValue.low)&&p.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||p.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!p.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},R.fromObject=function(e){if(e instanceof l.google.protobuf.UninterpretedOption)return e;var t=new l.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=l.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(p.Long?(t.positiveIntValue=p.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new p.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(p.Long?(t.negativeIntValue=p.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new p.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?p.base64.decode(e.stringValue,t.stringValue=p.newBuffer(p.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},R.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",p.Long?(n=new p.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,p.Long?(n=new p.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=p.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=l.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?p.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new p.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?p.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new p.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?p.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R.NamePart=(Z.prototype.namePart=\"\",Z.prototype.isExtension=!1,Z.create=function(e){return new Z(e)},Z.encode=function(e,t){return(t=t||i.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},Z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw p.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw p.ProtocolError(\"missing required 'isExtension'\",{instance:o})},Z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Z.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":p.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},Z.fromObject=function(e){var t;return e instanceof l.google.protobuf.UninterpretedOption.NamePart?e:(t=new l.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},Z.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},Z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Z),R),n.SourceCodeInfo=($.prototype.location=p.emptyArray,$.create=function(e){return new $(e)},$.encode=function(e,t){if(t=t||i.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)l.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},$.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},$.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(l.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},$.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},$.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=l.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},$.fromObject=function(e){if(e instanceof l.google.protobuf.SourceCodeInfo)return e;var t=new l.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=l.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},$.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=l.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},$.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},$.Location=(I.prototype.path=p.emptyArray,I.prototype.span=p.emptyArray,I.prototype.leadingComments=\"\",I.prototype.trailingComments=\"\",I.prototype.leadingDetachedComments=p.emptyArray,I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||i.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!p.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!p.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!p.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!p.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!p.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},I.fromObject=function(e){if(e instanceof l.google.protobuf.SourceCodeInfo.Location)return e;var t=new l.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},I.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I),$),n.GeneratedCodeInfo=(ee.prototype.annotation=p.emptyArray,ee.create=function(e){return new ee(e)},ee.encode=function(e,t){if(t=t||i.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)l.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},ee.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},ee.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(l.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},ee.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},ee.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=l.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},ee.fromObject=function(e){if(e instanceof l.google.protobuf.GeneratedCodeInfo)return e;var t=new l.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=l.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},ee.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=l.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},ee.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},ee.Annotation=(C.prototype.path=p.emptyArray,C.prototype.sourceFile=\"\",C.prototype.begin=0,C.prototype.end=0,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||i.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!p.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!p.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!p.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},C.fromObject=function(e){if(e instanceof l.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new l.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),ee),n),F.type=((r={}).Expr=(V.prototype.expression=\"\",V.prototype.title=\"\",V.prototype.description=\"\",V.prototype.location=\"\",V.create=function(e){return new V(e)},V.encode=function(e,t){return t=t||i.create(),null!=e.expression&&Object.hasOwnProperty.call(e,\"expression\")&&t.uint32(10).string(e.expression),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(18).string(e.title),null!=e.description&&Object.hasOwnProperty.call(e,\"description\")&&t.uint32(26).string(e.description),null!=e.location&&Object.hasOwnProperty.call(e,\"location\")&&t.uint32(34).string(e.location),t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.type.Expr;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.expression=e.string();break;case 2:o.title=e.string();break;case 3:o.description=e.string();break;case 4:o.location=e.string();break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},V.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.expression&&e.hasOwnProperty(\"expression\")&&!p.isString(e.expression)?\"expression: string expected\":null!=e.title&&e.hasOwnProperty(\"title\")&&!p.isString(e.title)?\"title: string expected\":null!=e.description&&e.hasOwnProperty(\"description\")&&!p.isString(e.description)?\"description: string expected\":null!=e.location&&e.hasOwnProperty(\"location\")&&!p.isString(e.location)?\"location: string expected\":null},V.fromObject=function(e){var t;return e instanceof l.google.type.Expr?e:(t=new l.google.type.Expr,null!=e.expression&&(t.expression=String(e.expression)),null!=e.title&&(t.title=String(e.title)),null!=e.description&&(t.description=String(e.description)),null!=e.location&&(t.location=String(e.location)),t)},V.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.expression=\"\",n.title=\"\",n.description=\"\",n.location=\"\"),null!=e.expression&&e.hasOwnProperty(\"expression\")&&(n.expression=e.expression),null!=e.title&&e.hasOwnProperty(\"title\")&&(n.title=e.title),null!=e.description&&e.hasOwnProperty(\"description\")&&(n.description=e.description),null!=e.location&&e.hasOwnProperty(\"location\")&&(n.location=e.location),n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),r),F),l});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/iam_service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,F,s=o.Reader,r=o.Writer,u=o.util,c=o.roots.locations_protos||(o.roots.locations_protos={});function L(e,t,n){o.rpc.Service.call(this,e,t,n)}function i(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function a(e){if(this.locations=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function p(e){if(this.labels={},e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function l(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return c.google=((F={}).cloud=((n={}).location=((e={}).Locations=(((L.prototype=Object.create(o.rpc.Service.prototype)).constructor=L).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(L.prototype.listLocations=function e(t,n){return this.rpcCall(e,c.google.cloud.location.ListLocationsRequest,c.google.cloud.location.ListLocationsResponse,t,n)},\"name\",{value:\"ListLocations\"}),Object.defineProperty(L.prototype.getLocation=function e(t,n){return this.rpcCall(e,c.google.cloud.location.GetLocationRequest,c.google.cloud.location.Location,t,n)},\"name\",{value:\"GetLocation\"}),L),e.ListLocationsRequest=(i.prototype.name=\"\",i.prototype.filter=\"\",i.prototype.pageSize=0,i.prototype.pageToken=\"\",i.create=function(e){return new i(e)},i.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.filter&&Object.hasOwnProperty.call(e,\"filter\")&&t.uint32(18).string(e.filter),null!=e.pageSize&&Object.hasOwnProperty.call(e,\"pageSize\")&&t.uint32(24).int32(e.pageSize),null!=e.pageToken&&Object.hasOwnProperty.call(e,\"pageToken\")&&t.uint32(34).string(e.pageToken),t},i.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},i.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.ListLocationsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.filter=e.string();break;case 3:o.pageSize=e.int32();break;case 4:o.pageToken=e.string();break;default:e.skipType(7&r)}}return o},i.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},i.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name)?\"name: string expected\":null!=e.filter&&e.hasOwnProperty(\"filter\")&&!u.isString(e.filter)?\"filter: string expected\":null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&!u.isInteger(e.pageSize)?\"pageSize: integer expected\":null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&!u.isString(e.pageToken)?\"pageToken: string expected\":null},i.fromObject=function(e){var t;return e instanceof c.google.cloud.location.ListLocationsRequest?e:(t=new c.google.cloud.location.ListLocationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},i.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.filter=\"\",n.pageSize=0,n.pageToken=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(n.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(n.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(n.pageToken=e.pageToken),n},i.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},i),e.ListLocationsResponse=(a.prototype.locations=u.emptyArray,a.prototype.nextPageToken=\"\",a.create=function(e){return new a(e)},a.encode=function(e,t){if(t=t||r.create(),null!=e.locations&&e.locations.length)for(var n=0;n<e.locations.length;++n)c.google.cloud.location.Location.encode(e.locations[n],t.uint32(10).fork()).ldelim();return null!=e.nextPageToken&&Object.hasOwnProperty.call(e,\"nextPageToken\")&&t.uint32(18).string(e.nextPageToken),t},a.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},a.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.ListLocationsResponse;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.locations&&o.locations.length||(o.locations=[]),o.locations.push(c.google.cloud.location.Location.decode(e,e.uint32()));break;case 2:o.nextPageToken=e.string();break;default:e.skipType(7&r)}}return o},a.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},a.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.locations&&e.hasOwnProperty(\"locations\")){if(!Array.isArray(e.locations))return\"locations: array expected\";for(var t=0;t<e.locations.length;++t){var n=c.google.cloud.location.Location.verify(e.locations[t]);if(n)return\"locations.\"+n}}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&!u.isString(e.nextPageToken)?\"nextPageToken: string expected\":null},a.fromObject=function(e){if(e instanceof c.google.cloud.location.ListLocationsResponse)return e;var t=new c.google.cloud.location.ListLocationsResponse;if(e.locations){if(!Array.isArray(e.locations))throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: array expected\");t.locations=[];for(var n=0;n<e.locations.length;++n){if(\"object\"!=typeof e.locations[n])throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: object expected\");t.locations[n]=c.google.cloud.location.Location.fromObject(e.locations[n])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},a.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.locations=[]),t.defaults&&(n.nextPageToken=\"\"),e.locations&&e.locations.length){n.locations=[];for(var o=0;o<e.locations.length;++o)n.locations[o]=c.google.cloud.location.Location.toObject(e.locations[o],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(n.nextPageToken=e.nextPageToken),n},a.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},a),e.GetLocationRequest=(G.prototype.name=\"\",G.create=function(e){return new G(e)},G.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},G.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},G.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.GetLocationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},G.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},G.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name)?\"name: string expected\":null},G.fromObject=function(e){var t;return e instanceof c.google.cloud.location.GetLocationRequest?e:(t=new c.google.cloud.location.GetLocationRequest,null!=e.name&&(t.name=String(e.name)),t)},G.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},G.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},G),e.Location=(p.prototype.name=\"\",p.prototype.locationId=\"\",p.prototype.displayName=\"\",p.prototype.labels=u.emptyObject,p.prototype.metadata=null,p.create=function(e){return new p(e)},p.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.labels&&Object.hasOwnProperty.call(e,\"labels\"))for(var n=Object.keys(e.labels),o=0;o<n.length;++o)t.uint32(18).fork().uint32(10).string(n[o]).uint32(18).string(e.labels[n[o]]).ldelim();return null!=e.metadata&&Object.hasOwnProperty.call(e,\"metadata\")&&c.google.protobuf.Any.encode(e.metadata,t.uint32(26).fork()).ldelim(),null!=e.locationId&&Object.hasOwnProperty.call(e,\"locationId\")&&t.uint32(34).string(e.locationId),null!=e.displayName&&Object.hasOwnProperty.call(e,\"displayName\")&&t.uint32(42).string(e.displayName),t},p.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},p.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 4:o.locationId=e.string();break;case 5:o.displayName=e.string();break;case 2:o.labels===u.emptyObject&&(o.labels={});for(var i=e.uint32()+e.pos,a=\"\",p=\"\";e.pos<i;){var l=e.uint32();switch(l>>>3){case 1:a=e.string();break;case 2:p=e.string();break;default:e.skipType(7&l)}}o.labels[a]=p;break;case 3:o.metadata=c.google.protobuf.Any.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},p.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},p.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.locationId&&e.hasOwnProperty(\"locationId\")&&!u.isString(e.locationId))return\"locationId: string expected\";if(null!=e.displayName&&e.hasOwnProperty(\"displayName\")&&!u.isString(e.displayName))return\"displayName: string expected\";if(null!=e.labels&&e.hasOwnProperty(\"labels\")){if(!u.isObject(e.labels))return\"labels: object expected\";for(var t=Object.keys(e.labels),n=0;n<t.length;++n)if(!u.isString(e.labels[t[n]]))return\"labels: string{k:string} expected\"}if(null!=e.metadata&&e.hasOwnProperty(\"metadata\")){var o=c.google.protobuf.Any.verify(e.metadata);if(o)return\"metadata.\"+o}return null},p.fromObject=function(e){if(e instanceof c.google.cloud.location.Location)return e;var t=new c.google.cloud.location.Location;if(null!=e.name&&(t.name=String(e.name)),null!=e.locationId&&(t.locationId=String(e.locationId)),null!=e.displayName&&(t.displayName=String(e.displayName)),e.labels){if(\"object\"!=typeof e.labels)throw TypeError(\".google.cloud.location.Location.labels: object expected\");t.labels={};for(var n=Object.keys(e.labels),o=0;o<n.length;++o)t.labels[n[o]]=String(e.labels[n[o]])}if(null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.cloud.location.Location.metadata: object expected\");t.metadata=c.google.protobuf.Any.fromObject(e.metadata)}return t},p.toObject=function(e,t){var n,o={};if(((t=t||{}).objects||t.defaults)&&(o.labels={}),t.defaults&&(o.name=\"\",o.metadata=null,o.locationId=\"\",o.displayName=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),e.labels&&(n=Object.keys(e.labels)).length){o.labels={};for(var r=0;r<n.length;++r)o.labels[n[r]]=e.labels[n[r]]}return null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(o.metadata=c.google.protobuf.Any.toObject(e.metadata,t)),null!=e.locationId&&e.hasOwnProperty(\"locationId\")&&(o.locationId=e.locationId),null!=e.displayName&&e.hasOwnProperty(\"displayName\")&&(o.displayName=e.displayName),o},p.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},p),e),n),F.api=((e={}).Http=(l.prototype.rules=u.emptyArray,l.prototype.fullyDecodeReservedExpansion=!1,l.create=function(e){return new l(e)},l.encode=function(e,t){if(t=t||r.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)c.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},l.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},l.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(c.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},l.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},l.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=c.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},l.fromObject=function(e){if(e instanceof c.google.api.Http)return e;var t=new c.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=c.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},l.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=c.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},l.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},l),e.HttpRule=(d.prototype.selector=\"\",d.prototype.get=null,d.prototype.put=null,d.prototype.post=null,d.prototype.delete=null,d.prototype.patch=null,d.prototype.custom=null,d.prototype.body=\"\",d.prototype.responseBody=\"\",d.prototype.additionalBindings=u.emptyArray,Object.defineProperty(d.prototype,\"pattern\",{get:u.oneOfGetter(n=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:u.oneOfSetter(n)}),d.create=function(e){return new d(e)},d.encode=function(e,t){if(t=t||r.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&c.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)c.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=c.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(c.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},d.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!u.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!u.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=c.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!u.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!u.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=c.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},d.fromObject=function(e){if(e instanceof c.google.api.HttpRule)return e;var t=new c.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=c.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=c.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},d.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=c.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=c.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),e.CustomHttpPattern=(g.prototype.kind=\"\",g.prototype.path=\"\",g.create=function(e){return new g(e)},g.encode=function(e,t){return t=t||r.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},g.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!u.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!u.isString(e.path)?\"path: string expected\":null},g.fromObject=function(e){var t;return e instanceof c.google.api.CustomHttpPattern?e:(t=new c.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},g.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),e),F.protobuf=((n={}).FileDescriptorSet=(B.prototype.file=u.emptyArray,B.create=function(e){return new B(e)},B.encode=function(e,t){if(t=t||r.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)c.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},B.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},B.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(c.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},B.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},B.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=c.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},B.fromObject=function(e){if(e instanceof c.google.protobuf.FileDescriptorSet)return e;var t=new c.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=c.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},B.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=c.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},B.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},B),n.FileDescriptorProto=(f.prototype.name=\"\",f.prototype.package=\"\",f.prototype.dependency=u.emptyArray,f.prototype.publicDependency=u.emptyArray,f.prototype.weakDependency=u.emptyArray,f.prototype.messageType=u.emptyArray,f.prototype.enumType=u.emptyArray,f.prototype.service=u.emptyArray,f.prototype.extension=u.emptyArray,f.prototype.options=null,f.prototype.sourceCodeInfo=null,f.prototype.syntax=\"\",f.create=function(e){return new f(e)},f.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)c.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)c.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&c.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(c.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(c.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=c.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!u.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!u.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!u.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!u.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=c.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=c.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=c.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!u.isString(e.syntax)?\"syntax: string expected\":null},f.fromObject=function(e){if(e instanceof c.google.protobuf.FileDescriptorProto)return e;var t=new c.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=c.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=c.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=c.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},f.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=c.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=c.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f),n.DescriptorProto=(y.prototype.name=\"\",y.prototype.field=u.emptyArray,y.prototype.extension=u.emptyArray,y.prototype.nestedType=u.emptyArray,y.prototype.enumType=u.emptyArray,y.prototype.extensionRange=u.emptyArray,y.prototype.oneofDecl=u.emptyArray,y.prototype.options=null,y.prototype.reservedRange=u.emptyArray,y.prototype.reservedName=u.emptyArray,y.create=function(e){return new y(e)},y.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)c.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)c.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)c.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)c.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(c.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(c.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(c.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=c.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(c.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=c.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=c.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=c.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=c.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!u.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},y.fromObject=function(e){if(e instanceof c.google.protobuf.DescriptorProto)return e;var t=new c.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=c.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=c.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=c.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=c.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=c.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},y.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=c.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=c.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=c.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=c.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y.ExtensionRange=(h.prototype.start=0,h.prototype.end=0,h.prototype.options=null,h.create=function(e){return new h(e)},h.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=c.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},h.fromObject=function(e){if(e instanceof c.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new c.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=c.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},h.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),y.ReservedRange=(b.prototype.start=0,b.prototype.end=0,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},b.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},b.fromObject=function(e){var t;return e instanceof c.google.protobuf.DescriptorProto.ReservedRange?e:(t=new c.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},b.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b),y),n.ExtensionRangeOptions=(U.prototype.uninterpretedOption=u.emptyArray,U.create=function(e){return new U(e)},U.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},U.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},U.fromObject=function(e){if(e instanceof c.google.protobuf.ExtensionRangeOptions)return e;var t=new c.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},U.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),n.FieldDescriptorProto=(O.prototype.name=\"\",O.prototype.number=0,O.prototype.label=1,O.prototype.type=1,O.prototype.typeName=\"\",O.prototype.extendee=\"\",O.prototype.defaultValue=\"\",O.prototype.oneofIndex=0,O.prototype.jsonName=\"\",O.prototype.options=null,O.prototype.proto3Optional=!1,O.create=function(e){return new O(e)},O.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=c.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!u.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!u.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!u.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!u.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!u.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!u.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=c.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},O.fromObject=function(e){if(e instanceof c.google.protobuf.FieldDescriptorProto)return e;var t=new c.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=c.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},O.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?c.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?c.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.Type=(e={},(t=Object.create(e))[e[1]=\"TYPE_DOUBLE\"]=1,t[e[2]=\"TYPE_FLOAT\"]=2,t[e[3]=\"TYPE_INT64\"]=3,t[e[4]=\"TYPE_UINT64\"]=4,t[e[5]=\"TYPE_INT32\"]=5,t[e[6]=\"TYPE_FIXED64\"]=6,t[e[7]=\"TYPE_FIXED32\"]=7,t[e[8]=\"TYPE_BOOL\"]=8,t[e[9]=\"TYPE_STRING\"]=9,t[e[10]=\"TYPE_GROUP\"]=10,t[e[11]=\"TYPE_MESSAGE\"]=11,t[e[12]=\"TYPE_BYTES\"]=12,t[e[13]=\"TYPE_UINT32\"]=13,t[e[14]=\"TYPE_ENUM\"]=14,t[e[15]=\"TYPE_SFIXED32\"]=15,t[e[16]=\"TYPE_SFIXED64\"]=16,t[e[17]=\"TYPE_SINT32\"]=17,t[e[18]=\"TYPE_SINT64\"]=18,t),O.Label=(e={},(t=Object.create(e))[e[1]=\"LABEL_OPTIONAL\"]=1,t[e[2]=\"LABEL_REQUIRED\"]=2,t[e[3]=\"LABEL_REPEATED\"]=3,t),O),n.OneofDescriptorProto=(m.prototype.name=\"\",m.prototype.options=null,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=c.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},m.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},m.fromObject=function(e){if(e instanceof c.google.protobuf.OneofDescriptorProto)return e;var t=new c.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=c.google.protobuf.OneofOptions.fromObject(e.options)}return t},m.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.OneofOptions.toObject(e.options,t)),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),n.EnumDescriptorProto=(v.prototype.name=\"\",v.prototype.value=u.emptyArray,v.prototype.options=null,v.prototype.reservedRange=u.emptyArray,v.prototype.reservedName=u.emptyArray,v.create=function(e){return new v(e)},v.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)c.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)c.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(c.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=c.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(c.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=c.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!u.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},v.fromObject=function(e){if(e instanceof c.google.protobuf.EnumDescriptorProto)return e;var t=new c.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=c.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=c.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},v.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=c.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v.EnumReservedRange=(P.prototype.start=0,P.prototype.end=0,P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},P.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},P.fromObject=function(e){var t;return e instanceof c.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new c.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},P.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P),v),n.EnumValueDescriptorProto=(w.prototype.name=\"\",w.prototype.number=0,w.prototype.options=null,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=c.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!u.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},w.fromObject=function(e){if(e instanceof c.google.protobuf.EnumValueDescriptorProto)return e;var t=new c.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=c.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},w.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w),n.ServiceDescriptorProto=(j.prototype.name=\"\",j.prototype.method=u.emptyArray,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)c.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(c.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=c.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=c.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},j.fromObject=function(e){if(e instanceof c.google.protobuf.ServiceDescriptorProto)return e;var t=new c.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=c.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=c.google.protobuf.ServiceOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=c.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.ServiceOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),n.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=c.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!u.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!u.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=c.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof c.google.protobuf.MethodDescriptorProto)return e;var t=new c.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=c.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),n.FileOptions=(S.prototype.javaPackage=\"\",S.prototype.javaOuterClassname=\"\",S.prototype.javaMultipleFiles=!1,S.prototype.javaGenerateEqualsAndHash=!1,S.prototype.javaStringCheckUtf8=!1,S.prototype.optimizeFor=1,S.prototype.goPackage=\"\",S.prototype.ccGenericServices=!1,S.prototype.javaGenericServices=!1,S.prototype.pyGenericServices=!1,S.prototype.phpGenericServices=!1,S.prototype.deprecated=!1,S.prototype.ccEnableArenas=!0,S.prototype.objcClassPrefix=\"\",S.prototype.csharpNamespace=\"\",S.prototype.swiftPrefix=\"\",S.prototype.phpClassPrefix=\"\",S.prototype.phpNamespace=\"\",S.prototype.phpMetadataNamespace=\"\",S.prototype.rubyPackage=\"\",S.prototype.uninterpretedOption=u.emptyArray,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||r.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!u.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!u.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!u.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!u.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!u.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!u.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!u.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!u.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!u.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!u.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},S.fromObject=function(e){if(e instanceof c.google.protobuf.FileOptions)return e;var t=new c.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?c.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S.OptimizeMode=(e={},(t=Object.create(e))[e[1]=\"SPEED\"]=1,t[e[2]=\"CODE_SIZE\"]=2,t[e[3]=\"LITE_RUNTIME\"]=3,t),S),n.MessageOptions=(k.prototype.messageSetWireFormat=!1,k.prototype.noStandardDescriptorAccessor=!1,k.prototype.deprecated=!1,k.prototype.mapEntry=!1,k.prototype.uninterpretedOption=u.emptyArray,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||r.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},k.fromObject=function(e){if(e instanceof c.google.protobuf.MessageOptions)return e;var t=new c.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k),n.FieldOptions=(D.prototype.ctype=0,D.prototype.packed=!1,D.prototype.jstype=0,D.prototype.lazy=!1,D.prototype.deprecated=!1,D.prototype.weak=!1,D.prototype.uninterpretedOption=u.emptyArray,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||r.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},D.fromObject=function(e){if(e instanceof c.google.protobuf.FieldOptions)return e;var t=new c.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?c.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?c.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D.CType=(e={},(t=Object.create(e))[e[0]=\"STRING\"]=0,t[e[1]=\"CORD\"]=1,t[e[2]=\"STRING_PIECE\"]=2,t),D.JSType=(e={},(t=Object.create(e))[e[0]=\"JS_NORMAL\"]=0,t[e[1]=\"JS_STRING\"]=1,t[e[2]=\"JS_NUMBER\"]=2,t),D),n.OneofOptions=(M.prototype.uninterpretedOption=u.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},M.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},M.fromObject=function(e){if(e instanceof c.google.protobuf.OneofOptions)return e;var t=new c.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),n.EnumOptions=(T.prototype.allowAlias=!1,T.prototype.deprecated=!1,T.prototype.uninterpretedOption=u.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||r.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},T.fromObject=function(e){if(e instanceof c.google.protobuf.EnumOptions)return e;var t=new c.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T),n.EnumValueOptions=(E.prototype.deprecated=!1,E.prototype.uninterpretedOption=u.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof c.google.protobuf.EnumValueOptions)return e;var t=new c.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),n.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=u.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!u.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!u.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof c.google.protobuf.ServiceOptions)return e;var t=new c.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),n.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=u.emptyArray,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=u.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&c.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 72295728:o[\".google.api.http\"]=c.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=c.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!u.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof c.google.protobuf.MethodOptions)return e;var t=new c.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=c.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?c.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=c.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(e={},(t=Object.create(e))[e[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,t[e[1]=\"NO_SIDE_EFFECTS\"]=1,t[e[2]=\"IDEMPOTENT\"]=2,t),N),n.UninterpretedOption=(I.prototype.name=u.emptyArray,I.prototype.identifierValue=\"\",I.prototype.positiveIntValue=u.Long?u.Long.fromBits(0,0,!0):0,I.prototype.negativeIntValue=u.Long?u.Long.fromBits(0,0,!1):0,I.prototype.doubleValue=0,I.prototype.stringValue=u.newBuffer([]),I.prototype.aggregateValue=\"\",I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||r.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)c.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(c.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=c.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!u.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(u.isInteger(e.positiveIntValue)||e.positiveIntValue&&u.isInteger(e.positiveIntValue.low)&&u.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(u.isInteger(e.negativeIntValue)||e.negativeIntValue&&u.isInteger(e.negativeIntValue.low)&&u.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||u.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!u.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},I.fromObject=function(e){if(e instanceof c.google.protobuf.UninterpretedOption)return e;var t=new c.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=c.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(u.Long?(t.positiveIntValue=u.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new u.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(u.Long?(t.negativeIntValue=u.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new u.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?u.base64.decode(e.stringValue,t.stringValue=u.newBuffer(u.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},I.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",u.Long?(n=new u.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,u.Long?(n=new u.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=u.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=c.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?u.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new u.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?u.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new u.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?u.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I.NamePart=(R.prototype.namePart=\"\",R.prototype.isExtension=!1,R.create=function(e){return new R(e)},R.encode=function(e,t){return(t=t||r.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw u.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw u.ProtocolError(\"missing required 'isExtension'\",{instance:o})},R.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},R.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":u.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},R.fromObject=function(e){var t;return e instanceof c.google.protobuf.UninterpretedOption.NamePart?e:(t=new c.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},R.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R),I),n.SourceCodeInfo=(_.prototype.location=u.emptyArray,_.create=function(e){return new _(e)},_.encode=function(e,t){if(t=t||r.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)c.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(c.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},_.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},_.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=c.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},_.fromObject=function(e){if(e instanceof c.google.protobuf.SourceCodeInfo)return e;var t=new c.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=c.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},_.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=c.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_.Location=(C.prototype.path=u.emptyArray,C.prototype.span=u.emptyArray,C.prototype.leadingComments=\"\",C.prototype.trailingComments=\"\",C.prototype.leadingDetachedComments=u.emptyArray,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!u.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!u.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!u.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!u.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!u.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},C.fromObject=function(e){if(e instanceof c.google.protobuf.SourceCodeInfo.Location)return e;var t=new c.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),_),n.GeneratedCodeInfo=(J.prototype.annotation=u.emptyArray,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||r.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)c.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(c.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},J.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=c.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},J.fromObject=function(e){if(e instanceof c.google.protobuf.GeneratedCodeInfo)return e;var t=new c.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=c.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=c.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J.Annotation=(V.prototype.path=u.emptyArray,V.prototype.sourceFile=\"\",V.prototype.begin=0,V.prototype.end=0,V.create=function(e){return new V(e)},V.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},V.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!u.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!u.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!u.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},V.fromObject=function(e){if(e instanceof c.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new c.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},V.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),J),n.Any=(H.prototype.type_url=\"\",H.prototype.value=u.newBuffer([]),H.create=function(e){return new H(e)},H.encode=function(e,t){return t=t||r.create(),null!=e.type_url&&Object.hasOwnProperty.call(e,\"type_url\")&&t.uint32(10).string(e.type_url),null!=e.value&&Object.hasOwnProperty.call(e,\"value\")&&t.uint32(18).bytes(e.value),t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.Any;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type_url=e.string();break;case 2:o.value=e.bytes();break;default:e.skipType(7&r)}}return o},H.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},H.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&!u.isString(e.type_url)?\"type_url: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!(e.value&&\"number\"==typeof e.value.length||u.isString(e.value))?\"value: buffer expected\":null},H.fromObject=function(e){var t;return e instanceof c.google.protobuf.Any?e:(t=new c.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?u.base64.decode(e.value,t.value=u.newBuffer(u.base64.length(e.value)),0):e.value.length&&(t.value=e.value)),t)},H.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type_url=\"\",t.bytes===String?n.value=\"\":(n.value=[],t.bytes!==Array&&(n.value=u.newBuffer(n.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(n.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=t.bytes===String?u.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),n),F),c});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/locations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,F,a=o.Reader,r=o.Writer,i=o.util,p=o.roots.operations_protos||(o.roots.operations_protos={});function G(e,t,n){o.rpc.Service.call(this,e,t,n)}function l(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function s(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(this.operations=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(this.details=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return p.google=((F={}).longrunning=((t={}).Operations=(((G.prototype=Object.create(o.rpc.Service.prototype)).constructor=G).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(G.prototype.listOperations=function e(t,n){return this.rpcCall(e,p.google.longrunning.ListOperationsRequest,p.google.longrunning.ListOperationsResponse,t,n)},\"name\",{value:\"ListOperations\"}),Object.defineProperty(G.prototype.getOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.GetOperationRequest,p.google.longrunning.Operation,t,n)},\"name\",{value:\"GetOperation\"}),Object.defineProperty(G.prototype.deleteOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.DeleteOperationRequest,p.google.protobuf.Empty,t,n)},\"name\",{value:\"DeleteOperation\"}),Object.defineProperty(G.prototype.cancelOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.CancelOperationRequest,p.google.protobuf.Empty,t,n)},\"name\",{value:\"CancelOperation\"}),Object.defineProperty(G.prototype.waitOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.WaitOperationRequest,p.google.longrunning.Operation,t,n)},\"name\",{value:\"WaitOperation\"}),G),t.Operation=(l.prototype.name=\"\",l.prototype.metadata=null,l.prototype.done=!1,l.prototype.error=null,l.prototype.response=null,Object.defineProperty(l.prototype,\"result\",{get:i.oneOfGetter(n=[\"error\",\"response\"]),set:i.oneOfSetter(n)}),l.create=function(e){return new l(e)},l.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.metadata&&Object.hasOwnProperty.call(e,\"metadata\")&&p.google.protobuf.Any.encode(e.metadata,t.uint32(18).fork()).ldelim(),null!=e.done&&Object.hasOwnProperty.call(e,\"done\")&&t.uint32(24).bool(e.done),null!=e.error&&Object.hasOwnProperty.call(e,\"error\")&&p.google.rpc.Status.encode(e.error,t.uint32(34).fork()).ldelim(),null!=e.response&&Object.hasOwnProperty.call(e,\"response\")&&p.google.protobuf.Any.encode(e.response,t.uint32(42).fork()).ldelim(),t},l.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},l.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.Operation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.metadata=p.google.protobuf.Any.decode(e,e.uint32());break;case 3:o.done=e.bool();break;case 4:o.error=p.google.rpc.Status.decode(e,e.uint32());break;case 5:o.response=p.google.protobuf.Any.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},l.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},l.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t,n={};if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(t=p.google.protobuf.Any.verify(e.metadata)))return\"metadata.\"+t;if(null!=e.done&&e.hasOwnProperty(\"done\")&&\"boolean\"!=typeof e.done)return\"done: boolean expected\";if(null!=e.error&&e.hasOwnProperty(\"error\")&&(n.result=1,t=p.google.rpc.Status.verify(e.error)))return\"error.\"+t;if(null!=e.response&&e.hasOwnProperty(\"response\")){if(1===n.result)return\"result: multiple values\";if(n.result=1,t=p.google.protobuf.Any.verify(e.response))return\"response.\"+t}return null},l.fromObject=function(e){if(e instanceof p.google.longrunning.Operation)return e;var t=new p.google.longrunning.Operation;if(null!=e.name&&(t.name=String(e.name)),null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.longrunning.Operation.metadata: object expected\");t.metadata=p.google.protobuf.Any.fromObject(e.metadata)}if(null!=e.done&&(t.done=Boolean(e.done)),null!=e.error){if(\"object\"!=typeof e.error)throw TypeError(\".google.longrunning.Operation.error: object expected\");t.error=p.google.rpc.Status.fromObject(e.error)}if(null!=e.response){if(\"object\"!=typeof e.response)throw TypeError(\".google.longrunning.Operation.response: object expected\");t.response=p.google.protobuf.Any.fromObject(e.response)}return t},l.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.metadata=null,n.done=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(n.metadata=p.google.protobuf.Any.toObject(e.metadata,t)),null!=e.done&&e.hasOwnProperty(\"done\")&&(n.done=e.done),null!=e.error&&e.hasOwnProperty(\"error\")&&(n.error=p.google.rpc.Status.toObject(e.error,t),t.oneofs)&&(n.result=\"error\"),null!=e.response&&e.hasOwnProperty(\"response\")&&(n.response=p.google.protobuf.Any.toObject(e.response,t),t.oneofs)&&(n.result=\"response\"),n},l.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},l),t.GetOperationRequest=(B.prototype.name=\"\",B.create=function(e){return new B(e)},B.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},B.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},B.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.GetOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},B.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},B.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},B.fromObject=function(e){var t;return e instanceof p.google.longrunning.GetOperationRequest?e:(t=new p.google.longrunning.GetOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},B.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},B.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},B),t.ListOperationsRequest=(s.prototype.name=\"\",s.prototype.filter=\"\",s.prototype.pageSize=0,s.prototype.pageToken=\"\",s.create=function(e){return new s(e)},s.encode=function(e,t){return t=t||r.create(),null!=e.filter&&Object.hasOwnProperty.call(e,\"filter\")&&t.uint32(10).string(e.filter),null!=e.pageSize&&Object.hasOwnProperty.call(e,\"pageSize\")&&t.uint32(16).int32(e.pageSize),null!=e.pageToken&&Object.hasOwnProperty.call(e,\"pageToken\")&&t.uint32(26).string(e.pageToken),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(34).string(e.name),t},s.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},s.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.ListOperationsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 4:o.name=e.string();break;case 1:o.filter=e.string();break;case 2:o.pageSize=e.int32();break;case 3:o.pageToken=e.string();break;default:e.skipType(7&r)}}return o},s.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},s.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null!=e.filter&&e.hasOwnProperty(\"filter\")&&!i.isString(e.filter)?\"filter: string expected\":null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&!i.isInteger(e.pageSize)?\"pageSize: integer expected\":null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&!i.isString(e.pageToken)?\"pageToken: string expected\":null},s.fromObject=function(e){var t;return e instanceof p.google.longrunning.ListOperationsRequest?e:(t=new p.google.longrunning.ListOperationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},s.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.filter=\"\",n.pageSize=0,n.pageToken=\"\",n.name=\"\"),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(n.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(n.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(n.pageToken=e.pageToken),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},s.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},s),t.ListOperationsResponse=(u.prototype.operations=i.emptyArray,u.prototype.nextPageToken=\"\",u.create=function(e){return new u(e)},u.encode=function(e,t){if(t=t||r.create(),null!=e.operations&&e.operations.length)for(var n=0;n<e.operations.length;++n)p.google.longrunning.Operation.encode(e.operations[n],t.uint32(10).fork()).ldelim();return null!=e.nextPageToken&&Object.hasOwnProperty.call(e,\"nextPageToken\")&&t.uint32(18).string(e.nextPageToken),t},u.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},u.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.ListOperationsResponse;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.operations&&o.operations.length||(o.operations=[]),o.operations.push(p.google.longrunning.Operation.decode(e,e.uint32()));break;case 2:o.nextPageToken=e.string();break;default:e.skipType(7&r)}}return o},u.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},u.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.operations&&e.hasOwnProperty(\"operations\")){if(!Array.isArray(e.operations))return\"operations: array expected\";for(var t=0;t<e.operations.length;++t){var n=p.google.longrunning.Operation.verify(e.operations[t]);if(n)return\"operations.\"+n}}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&!i.isString(e.nextPageToken)?\"nextPageToken: string expected\":null},u.fromObject=function(e){if(e instanceof p.google.longrunning.ListOperationsResponse)return e;var t=new p.google.longrunning.ListOperationsResponse;if(e.operations){if(!Array.isArray(e.operations))throw TypeError(\".google.longrunning.ListOperationsResponse.operations: array expected\");t.operations=[];for(var n=0;n<e.operations.length;++n){if(\"object\"!=typeof e.operations[n])throw TypeError(\".google.longrunning.ListOperationsResponse.operations: object expected\");t.operations[n]=p.google.longrunning.Operation.fromObject(e.operations[n])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},u.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.operations=[]),t.defaults&&(n.nextPageToken=\"\"),e.operations&&e.operations.length){n.operations=[];for(var o=0;o<e.operations.length;++o)n.operations[o]=p.google.longrunning.Operation.toObject(e.operations[o],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(n.nextPageToken=e.nextPageToken),n},u.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},u),t.CancelOperationRequest=(L.prototype.name=\"\",L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},L.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},L.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.CancelOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},L.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},L.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},L.fromObject=function(e){var t;return e instanceof p.google.longrunning.CancelOperationRequest?e:(t=new p.google.longrunning.CancelOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},L.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},L.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},L),t.DeleteOperationRequest=(U.prototype.name=\"\",U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.DeleteOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},U.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},U.fromObject=function(e){var t;return e instanceof p.google.longrunning.DeleteOperationRequest?e:(t=new p.google.longrunning.DeleteOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},U.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),t.WaitOperationRequest=(c.prototype.name=\"\",c.prototype.timeout=null,c.create=function(e){return new c(e)},c.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.timeout&&Object.hasOwnProperty.call(e,\"timeout\")&&p.google.protobuf.Duration.encode(e.timeout,t.uint32(18).fork()).ldelim(),t},c.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},c.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.WaitOperationRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.timeout=p.google.protobuf.Duration.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},c.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},c.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.timeout&&e.hasOwnProperty(\"timeout\")){e=p.google.protobuf.Duration.verify(e.timeout);if(e)return\"timeout.\"+e}return null},c.fromObject=function(e){if(e instanceof p.google.longrunning.WaitOperationRequest)return e;var t=new p.google.longrunning.WaitOperationRequest;if(null!=e.name&&(t.name=String(e.name)),null!=e.timeout){if(\"object\"!=typeof e.timeout)throw TypeError(\".google.longrunning.WaitOperationRequest.timeout: object expected\");t.timeout=p.google.protobuf.Duration.fromObject(e.timeout)}return t},c.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.timeout=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.timeout&&e.hasOwnProperty(\"timeout\")&&(n.timeout=p.google.protobuf.Duration.toObject(e.timeout,t)),n},c.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},c),t.OperationInfo=(d.prototype.responseType=\"\",d.prototype.metadataType=\"\",d.create=function(e){return new d(e)},d.encode=function(e,t){return t=t||r.create(),null!=e.responseType&&Object.hasOwnProperty.call(e,\"responseType\")&&t.uint32(10).string(e.responseType),null!=e.metadataType&&Object.hasOwnProperty.call(e,\"metadataType\")&&t.uint32(18).string(e.metadataType),t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.OperationInfo;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.responseType=e.string();break;case 2:o.metadataType=e.string();break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},d.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&!i.isString(e.responseType)?\"responseType: string expected\":null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&!i.isString(e.metadataType)?\"metadataType: string expected\":null},d.fromObject=function(e){var t;return e instanceof p.google.longrunning.OperationInfo?e:(t=new p.google.longrunning.OperationInfo,null!=e.responseType&&(t.responseType=String(e.responseType)),null!=e.metadataType&&(t.metadataType=String(e.metadataType)),t)},d.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.responseType=\"\",n.metadataType=\"\"),null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&(n.responseType=e.responseType),null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&(n.metadataType=e.metadataType),n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),t),F.api=((n={}).Http=(g.prototype.rules=i.emptyArray,g.prototype.fullyDecodeReservedExpansion=!1,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||r.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)p.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(p.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},g.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=p.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},g.fromObject=function(e){if(e instanceof p.google.api.Http)return e;var t=new p.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=p.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},g.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=p.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),n.HttpRule=(f.prototype.selector=\"\",f.prototype.get=\"\",f.prototype.put=\"\",f.prototype.post=\"\",f.prototype.delete=\"\",f.prototype.patch=\"\",f.prototype.custom=null,f.prototype.body=\"\",f.prototype.responseBody=\"\",f.prototype.additionalBindings=i.emptyArray,Object.defineProperty(f.prototype,\"pattern\",{get:i.oneOfGetter(t=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:i.oneOfSetter(t)}),f.create=function(e){return new f(e)},f.encode=function(e,t){if(t=t||r.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&p.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)p.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=p.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(p.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!i.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!i.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=p.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!i.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!i.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=p.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},f.fromObject=function(e){if(e instanceof p.google.api.HttpRule)return e;var t=new p.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=p.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=p.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},f.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=p.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=p.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f),n.CustomHttpPattern=(y.prototype.kind=\"\",y.prototype.path=\"\",y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||r.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},y.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!i.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!i.isString(e.path)?\"path: string expected\":null},y.fromObject=function(e){var t;return e instanceof p.google.api.CustomHttpPattern?e:(t=new p.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y),n),F.protobuf=((t={}).FileDescriptorSet=(J.prototype.file=i.emptyArray,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||r.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)p.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(p.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},J.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=p.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},J.fromObject=function(e){if(e instanceof p.google.protobuf.FileDescriptorSet)return e;var t=new p.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=p.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=p.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J),t.FileDescriptorProto=(h.prototype.name=\"\",h.prototype.package=\"\",h.prototype.dependency=i.emptyArray,h.prototype.publicDependency=i.emptyArray,h.prototype.weakDependency=i.emptyArray,h.prototype.messageType=i.emptyArray,h.prototype.enumType=i.emptyArray,h.prototype.service=i.emptyArray,h.prototype.extension=i.emptyArray,h.prototype.options=null,h.prototype.sourceCodeInfo=null,h.prototype.syntax=\"\",h.create=function(e){return new h(e)},h.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)p.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)p.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&p.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(p.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(p.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=p.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!i.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!i.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!i.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!i.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=p.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=p.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=p.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!i.isString(e.syntax)?\"syntax: string expected\":null},h.fromObject=function(e){if(e instanceof p.google.protobuf.FileDescriptorProto)return e;var t=new p.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=p.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=p.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=p.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},h.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=p.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=p.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),t.DescriptorProto=(O.prototype.name=\"\",O.prototype.field=i.emptyArray,O.prototype.extension=i.emptyArray,O.prototype.nestedType=i.emptyArray,O.prototype.enumType=i.emptyArray,O.prototype.extensionRange=i.emptyArray,O.prototype.oneofDecl=i.emptyArray,O.prototype.options=null,O.prototype.reservedRange=i.emptyArray,O.prototype.reservedName=i.emptyArray,O.create=function(e){return new O(e)},O.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)p.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)p.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)p.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)p.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(p.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(p.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(p.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=p.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(p.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=p.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=p.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=p.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=p.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!i.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},O.fromObject=function(e){if(e instanceof p.google.protobuf.DescriptorProto)return e;var t=new p.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=p.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=p.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=p.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=p.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=p.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},O.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=p.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=p.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=p.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=p.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.ExtensionRange=(b.prototype.start=0,b.prototype.end=0,b.prototype.options=null,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=p.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},b.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},b.fromObject=function(e){if(e instanceof p.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new p.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=p.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},b.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b),O.ReservedRange=(m.prototype.start=0,m.prototype.end=0,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},m.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},m.fromObject=function(e){var t;return e instanceof p.google.protobuf.DescriptorProto.ReservedRange?e:(t=new p.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},m.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),O),t.ExtensionRangeOptions=(M.prototype.uninterpretedOption=i.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},M.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},M.fromObject=function(e){if(e instanceof p.google.protobuf.ExtensionRangeOptions)return e;var t=new p.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),t.FieldDescriptorProto=(v.prototype.name=\"\",v.prototype.number=0,v.prototype.label=1,v.prototype.type=1,v.prototype.typeName=\"\",v.prototype.extendee=\"\",v.prototype.defaultValue=\"\",v.prototype.oneofIndex=0,v.prototype.jsonName=\"\",v.prototype.options=null,v.prototype.proto3Optional=!1,v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=p.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!i.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!i.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!i.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!i.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!i.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!i.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=p.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},v.fromObject=function(e){if(e instanceof p.google.protobuf.FieldDescriptorProto)return e;var t=new p.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=p.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},v.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?p.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?p.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v.Type=(n={},(e=Object.create(n))[n[1]=\"TYPE_DOUBLE\"]=1,e[n[2]=\"TYPE_FLOAT\"]=2,e[n[3]=\"TYPE_INT64\"]=3,e[n[4]=\"TYPE_UINT64\"]=4,e[n[5]=\"TYPE_INT32\"]=5,e[n[6]=\"TYPE_FIXED64\"]=6,e[n[7]=\"TYPE_FIXED32\"]=7,e[n[8]=\"TYPE_BOOL\"]=8,e[n[9]=\"TYPE_STRING\"]=9,e[n[10]=\"TYPE_GROUP\"]=10,e[n[11]=\"TYPE_MESSAGE\"]=11,e[n[12]=\"TYPE_BYTES\"]=12,e[n[13]=\"TYPE_UINT32\"]=13,e[n[14]=\"TYPE_ENUM\"]=14,e[n[15]=\"TYPE_SFIXED32\"]=15,e[n[16]=\"TYPE_SFIXED64\"]=16,e[n[17]=\"TYPE_SINT32\"]=17,e[n[18]=\"TYPE_SINT64\"]=18,e),v.Label=(n={},(e=Object.create(n))[n[1]=\"LABEL_OPTIONAL\"]=1,e[n[2]=\"LABEL_REQUIRED\"]=2,e[n[3]=\"LABEL_REPEATED\"]=3,e),v),t.OneofDescriptorProto=(w.prototype.name=\"\",w.prototype.options=null,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=p.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},w.fromObject=function(e){if(e instanceof p.google.protobuf.OneofDescriptorProto)return e;var t=new p.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=p.google.protobuf.OneofOptions.fromObject(e.options)}return t},w.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.OneofOptions.toObject(e.options,t)),n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w),t.EnumDescriptorProto=(P.prototype.name=\"\",P.prototype.value=i.emptyArray,P.prototype.options=null,P.prototype.reservedRange=i.emptyArray,P.prototype.reservedName=i.emptyArray,P.create=function(e){return new P(e)},P.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)p.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)p.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(p.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=p.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(p.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},P.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=p.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!i.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},P.fromObject=function(e){if(e instanceof p.google.protobuf.EnumDescriptorProto)return e;var t=new p.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=p.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=p.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},P.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=p.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P.EnumReservedRange=(_.prototype.start=0,_.prototype.end=0,_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},_.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},_.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},_.fromObject=function(e){var t;return e instanceof p.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new p.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},_.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_),P),t.EnumValueDescriptorProto=(j.prototype.name=\"\",j.prototype.number=0,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=p.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!i.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},j.fromObject=function(e){if(e instanceof p.google.protobuf.EnumValueDescriptorProto)return e;var t=new p.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=p.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),t.ServiceDescriptorProto=(S.prototype.name=\"\",S.prototype.method=i.emptyArray,S.prototype.options=null,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)p.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(p.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=p.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=p.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},S.fromObject=function(e){if(e instanceof p.google.protobuf.ServiceDescriptorProto)return e;var t=new p.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=p.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=p.google.protobuf.ServiceOptions.fromObject(e.options)}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=p.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.ServiceOptions.toObject(e.options,t)),n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S),t.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=p.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!i.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!i.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=p.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof p.google.protobuf.MethodDescriptorProto)return e;var t=new p.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=p.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),t.FileOptions=(k.prototype.javaPackage=\"\",k.prototype.javaOuterClassname=\"\",k.prototype.javaMultipleFiles=!1,k.prototype.javaGenerateEqualsAndHash=!1,k.prototype.javaStringCheckUtf8=!1,k.prototype.optimizeFor=1,k.prototype.goPackage=\"\",k.prototype.ccGenericServices=!1,k.prototype.javaGenericServices=!1,k.prototype.pyGenericServices=!1,k.prototype.phpGenericServices=!1,k.prototype.deprecated=!1,k.prototype.ccEnableArenas=!0,k.prototype.objcClassPrefix=\"\",k.prototype.csharpNamespace=\"\",k.prototype.swiftPrefix=\"\",k.prototype.phpClassPrefix=\"\",k.prototype.phpNamespace=\"\",k.prototype.phpMetadataNamespace=\"\",k.prototype.rubyPackage=\"\",k.prototype.uninterpretedOption=i.emptyArray,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||r.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!i.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!i.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!i.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!i.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!i.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!i.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!i.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!i.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!i.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!i.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},k.fromObject=function(e){if(e instanceof p.google.protobuf.FileOptions)return e;var t=new p.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?p.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k.OptimizeMode=(n={},(e=Object.create(n))[n[1]=\"SPEED\"]=1,e[n[2]=\"CODE_SIZE\"]=2,e[n[3]=\"LITE_RUNTIME\"]=3,e),k),t.MessageOptions=(D.prototype.messageSetWireFormat=!1,D.prototype.noStandardDescriptorAccessor=!1,D.prototype.deprecated=!1,D.prototype.mapEntry=!1,D.prototype.uninterpretedOption=i.emptyArray,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||r.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},D.fromObject=function(e){if(e instanceof p.google.protobuf.MessageOptions)return e;var t=new p.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D),t.FieldOptions=(T.prototype.ctype=0,T.prototype.packed=!1,T.prototype.jstype=0,T.prototype.lazy=!1,T.prototype.deprecated=!1,T.prototype.weak=!1,T.prototype.uninterpretedOption=i.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||r.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},T.fromObject=function(e){if(e instanceof p.google.protobuf.FieldOptions)return e;var t=new p.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?p.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?p.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T.CType=(n={},(e=Object.create(n))[n[0]=\"STRING\"]=0,e[n[1]=\"CORD\"]=1,e[n[2]=\"STRING_PIECE\"]=2,e),T.JSType=(n={},(e=Object.create(n))[n[0]=\"JS_NORMAL\"]=0,e[n[1]=\"JS_STRING\"]=1,e[n[2]=\"JS_NUMBER\"]=2,e),T),t.OneofOptions=(H.prototype.uninterpretedOption=i.emptyArray,H.create=function(e){return new H(e)},H.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},H.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},H.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},H.fromObject=function(e){if(e instanceof p.google.protobuf.OneofOptions)return e;var t=new p.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},H.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),t.EnumOptions=(E.prototype.allowAlias=!1,E.prototype.deprecated=!1,E.prototype.uninterpretedOption=i.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||r.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof p.google.protobuf.EnumOptions)return e;var t=new p.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),t.EnumValueOptions=(z.prototype.deprecated=!1,z.prototype.uninterpretedOption=i.emptyArray,z.create=function(e){return new z(e)},z.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},z.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},z.fromObject=function(e){if(e instanceof p.google.protobuf.EnumValueOptions)return e;var t=new p.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},z.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},z),t.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=i.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!i.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!i.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof p.google.protobuf.ServiceOptions)return e;var t=new p.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),t.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=i.emptyArray,N.prototype[\".google.longrunning.operationInfo\"]=null,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=i.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.longrunning.operationInfo\"]&&Object.hasOwnProperty.call(e,\".google.longrunning.operationInfo\")&&p.google.longrunning.OperationInfo.encode(e[\".google.longrunning.operationInfo\"],t.uint32(8394).fork()).ldelim(),null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&p.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.decode(e,e.uint32());break;case 72295728:o[\".google.api.http\"]=p.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(n=p.google.longrunning.OperationInfo.verify(e[\".google.longrunning.operationInfo\"])))return\".google.longrunning.operationInfo.\"+n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=p.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!i.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof p.google.protobuf.MethodOptions)return e;var t=new p.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.longrunning.operationInfo\"]){if(\"object\"!=typeof e[\".google.longrunning.operationInfo\"])throw TypeError(\".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected\");t[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.fromObject(e[\".google.longrunning.operationInfo\"])}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=p.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.longrunning.operationInfo\"]=null,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?p.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(n[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.toObject(e[\".google.longrunning.operationInfo\"],t)),e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=p.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(n={},(e=Object.create(n))[n[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,e[n[1]=\"NO_SIDE_EFFECTS\"]=1,e[n[2]=\"IDEMPOTENT\"]=2,e),N),t.UninterpretedOption=(I.prototype.name=i.emptyArray,I.prototype.identifierValue=\"\",I.prototype.positiveIntValue=i.Long?i.Long.fromBits(0,0,!0):0,I.prototype.negativeIntValue=i.Long?i.Long.fromBits(0,0,!1):0,I.prototype.doubleValue=0,I.prototype.stringValue=i.newBuffer([]),I.prototype.aggregateValue=\"\",I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||r.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)p.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(p.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=p.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!i.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(i.isInteger(e.positiveIntValue)||e.positiveIntValue&&i.isInteger(e.positiveIntValue.low)&&i.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(i.isInteger(e.negativeIntValue)||e.negativeIntValue&&i.isInteger(e.negativeIntValue.low)&&i.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||i.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!i.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},I.fromObject=function(e){if(e instanceof p.google.protobuf.UninterpretedOption)return e;var t=new p.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=p.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(i.Long?(t.positiveIntValue=i.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(i.Long?(t.negativeIntValue=i.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?i.base64.decode(e.stringValue,t.stringValue=i.newBuffer(i.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},I.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",i.Long?(n=new i.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,i.Long?(n=new i.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=i.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=p.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?i.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?i.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?i.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I.NamePart=(q.prototype.namePart=\"\",q.prototype.isExtension=!1,q.create=function(e){return new q(e)},q.encode=function(e,t){return(t=t||r.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw i.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw i.ProtocolError(\"missing required 'isExtension'\",{instance:o})},q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},q.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":i.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},q.fromObject=function(e){var t;return e instanceof p.google.protobuf.UninterpretedOption.NamePart?e:(t=new p.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},q.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},q),I),t.SourceCodeInfo=(Y.prototype.location=i.emptyArray,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){if(t=t||r.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)p.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},Y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(p.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},Y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=p.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},Y.fromObject=function(e){if(e instanceof p.google.protobuf.SourceCodeInfo)return e;var t=new p.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=p.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},Y.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=p.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},Y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Y.Location=(R.prototype.path=i.emptyArray,R.prototype.span=i.emptyArray,R.prototype.leadingComments=\"\",R.prototype.trailingComments=\"\",R.prototype.leadingDetachedComments=i.emptyArray,R.create=function(e){return new R(e)},R.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},R.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},R.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!i.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!i.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!i.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!i.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!i.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},R.fromObject=function(e){if(e instanceof p.google.protobuf.SourceCodeInfo.Location)return e;var t=new p.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},R.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R),Y),t.GeneratedCodeInfo=(W.prototype.annotation=i.emptyArray,W.create=function(e){return new W(e)},W.encode=function(e,t){if(t=t||r.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)p.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},W.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},W.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(p.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},W.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},W.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=p.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},W.fromObject=function(e){if(e instanceof p.google.protobuf.GeneratedCodeInfo)return e;var t=new p.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=p.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},W.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=p.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},W.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},W.Annotation=(C.prototype.path=i.emptyArray,C.prototype.sourceFile=\"\",C.prototype.begin=0,C.prototype.end=0,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!i.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!i.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!i.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},C.fromObject=function(e){if(e instanceof p.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new p.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),W),t.Any=(X.prototype.type_url=\"\",X.prototype.value=i.newBuffer([]),X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||r.create(),null!=e.type_url&&Object.hasOwnProperty.call(e,\"type_url\")&&t.uint32(10).string(e.type_url),null!=e.value&&Object.hasOwnProperty.call(e,\"value\")&&t.uint32(18).bytes(e.value),t},X.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},X.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.Any;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type_url=e.string();break;case 2:o.value=e.bytes();break;default:e.skipType(7&r)}}return o},X.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},X.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&!i.isString(e.type_url)?\"type_url: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!(e.value&&\"number\"==typeof e.value.length||i.isString(e.value))?\"value: buffer expected\":null},X.fromObject=function(e){var t;return e instanceof p.google.protobuf.Any?e:(t=new p.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?i.base64.decode(e.value,t.value=i.newBuffer(i.base64.length(e.value)),0):e.value.length&&(t.value=e.value)),t)},X.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type_url=\"\",t.bytes===String?n.value=\"\":(n.value=[],t.bytes!==Array&&(n.value=i.newBuffer(n.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(n.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=t.bytes===String?i.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),n},X.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},X),t.Duration=(K.prototype.seconds=i.Long?i.Long.fromBits(0,0,!1):0,K.prototype.nanos=0,K.create=function(e){return new K(e)},K.encode=function(e,t){return t=t||r.create(),null!=e.seconds&&Object.hasOwnProperty.call(e,\"seconds\")&&t.uint32(8).int64(e.seconds),null!=e.nanos&&Object.hasOwnProperty.call(e,\"nanos\")&&t.uint32(16).int32(e.nanos),t},K.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},K.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.Duration;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.seconds=e.int64();break;case 2:o.nanos=e.int32();break;default:e.skipType(7&r)}}return o},K.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},K.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&!(i.isInteger(e.seconds)||e.seconds&&i.isInteger(e.seconds.low)&&i.isInteger(e.seconds.high))?\"seconds: integer|Long expected\":null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&!i.isInteger(e.nanos)?\"nanos: integer expected\":null},K.fromObject=function(e){var t;return e instanceof p.google.protobuf.Duration?e:(t=new p.google.protobuf.Duration,null!=e.seconds&&(i.Long?(t.seconds=i.Long.fromValue(e.seconds)).unsigned=!1:\"string\"==typeof e.seconds?t.seconds=parseInt(e.seconds,10):\"number\"==typeof e.seconds?t.seconds=e.seconds:\"object\"==typeof e.seconds&&(t.seconds=new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber())),null!=e.nanos&&(t.nanos=0|e.nanos),t)},K.toObject=function(e,t){var n,o={};return(t=t||{}).defaults&&(i.Long?(n=new i.Long(0,0,!1),o.seconds=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.seconds=t.longs===String?\"0\":0,o.nanos=0),null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&(\"number\"==typeof e.seconds?o.seconds=t.longs===String?String(e.seconds):e.seconds:o.seconds=t.longs===String?i.Long.prototype.toString.call(e.seconds):t.longs===Number?new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber():e.seconds),null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&(o.nanos=e.nanos),o},K.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},K),t.Empty=(Q.create=function(e){return new Q(e)},Q.encode=function(e,t){return t=t||r.create()},Q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,t=new p.google.protobuf.Empty;e.pos<n;){var o=e.uint32();e.skipType(7&o)}return t},Q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Q.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null},Q.fromObject=function(e){return e instanceof p.google.protobuf.Empty?e:new p.google.protobuf.Empty},Q.toObject=function(){return{}},Q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Q),t),F.rpc=((n={}).Status=(V.prototype.code=0,V.prototype.message=\"\",V.prototype.details=i.emptyArray,V.create=function(e){return new V(e)},V.encode=function(e,t){if(t=t||r.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.details&&e.details.length)for(var n=0;n<e.details.length;++n)p.google.protobuf.Any.encode(e.details[n],t.uint32(26).fork()).ldelim();return t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.rpc.Status;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.code=e.int32();break;case 2:o.message=e.string();break;case 3:o.details&&o.details.length||(o.details=[]),o.details.push(p.google.protobuf.Any.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},V.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.code&&e.hasOwnProperty(\"code\")&&!i.isInteger(e.code))return\"code: integer expected\";if(null!=e.message&&e.hasOwnProperty(\"message\")&&!i.isString(e.message))return\"message: string expected\";if(null!=e.details&&e.hasOwnProperty(\"details\")){if(!Array.isArray(e.details))return\"details: array expected\";for(var t=0;t<e.details.length;++t){var n=p.google.protobuf.Any.verify(e.details[t]);if(n)return\"details.\"+n}}return null},V.fromObject=function(e){if(e instanceof p.google.rpc.Status)return e;var t=new p.google.rpc.Status;if(null!=e.code&&(t.code=0|e.code),null!=e.message&&(t.message=String(e.message)),e.details){if(!Array.isArray(e.details))throw TypeError(\".google.rpc.Status.details: array expected\");t.details=[];for(var n=0;n<e.details.length;++n){if(\"object\"!=typeof e.details[n])throw TypeError(\".google.rpc.Status.details: object expected\");t.details[n]=p.google.protobuf.Any.fromObject(e.details[n])}}return t},V.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.details=[]),t.defaults&&(n.code=0,n.message=\"\"),null!=e.code&&e.hasOwnProperty(\"code\")&&(n.code=e.code),null!=e.message&&e.hasOwnProperty(\"message\")&&(n.message=e.message),e.details&&e.details.length){n.details=[];for(var o=0;o<e.details.length;++o)n.details[o]=p.google.protobuf.Any.toObject(e.details[o],t)}return n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),n),F),p});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9wcm90b3Mvb3BlcmF0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxR0FBSyxLQUFxQyxDQUFDLGlDQUFPLENBQUMsMkZBQW9CLENBQUMsb0NBQUMsQ0FBQztBQUFBO0FBQUE7QUFBQSxrR0FBQyxDQUFDLENBQThILENBQUMsY0FBYyxxR0FBcUcsRUFBRSxrQkFBa0IsK0JBQStCLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMscURBQXFELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsZ0RBQWdELFdBQVcsd0NBQXdDLGNBQWMsNkRBQTZELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsK0NBQStDLFdBQVcsd0NBQXdDLGNBQWMsNEtBQTRLLFdBQVcsd0NBQXdDLGNBQWMsMExBQTBMLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsMkZBQTJGLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsaURBQWlELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMscUdBQXFHLFdBQVcsd0NBQXdDLGNBQWMsK0NBQStDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsbURBQW1ELFdBQVcsd0NBQXdDLGNBQWMsNEZBQTRGLFdBQVcsd0NBQXdDLGNBQWMscURBQXFELFdBQVcsd0NBQXdDLGNBQWMsK0NBQStDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0RBQWtELFdBQVcsd0NBQXdDLHNCQUFzQixvQkFBb0IsMEdBQTBHLHVCQUF1QixrRUFBa0Usa0hBQWtILFNBQVMsdUJBQXVCLGlFQUFpRSxtR0FBbUcsU0FBUyxxQkFBcUIsb0VBQW9FLCtGQUErRixTQUFTLHdCQUF3QixvRUFBb0UsK0ZBQStGLFNBQVMsd0JBQXdCLGtFQUFrRSxvR0FBb0csU0FBUyxzQkFBc0IsaUxBQWlMLCtEQUErRCx1QkFBdUIsZ0JBQWdCLHdCQUF3QixrakJBQWtqQixpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0Msd0VBQXdFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSw2REFBNkQsTUFBTSx1QkFBdUIsTUFBTSx3REFBd0QsTUFBTSw2REFBNkQsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsV0FBVyw2RkFBNkYsb0hBQW9ILG1HQUFtRyxpSEFBaUgsbURBQW1ELGdEQUFnRCw2RUFBNkUsWUFBWSwwQkFBMEIsd0RBQXdELHlDQUF5QywyREFBMkQsMEdBQTBHLHdEQUF3RCx5REFBeUQsb0dBQW9HLGdEQUFnRCxxQkFBcUIsMEdBQTBHLHdEQUF3RCxTQUFTLDBCQUEwQixTQUFTLGNBQWMsaWhCQUFpaEIsK0JBQStCLDREQUE0RCxvRUFBb0UsZ0JBQWdCLHdCQUF3Qix5R0FBeUcsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLGtGQUFrRixRQUFRLEVBQUUsaUJBQWlCLDJDQUEyQyxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLDhJQUE4SSwwQkFBMEIsTUFBTSx3SkFBd0osMEJBQTBCLFNBQVMsY0FBYyxrRkFBa0YsK0JBQStCLDREQUE0RCw0SUFBNEksZ0JBQWdCLHdCQUF3Qix5WEFBeVgsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLG9GQUFvRixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sMkJBQTJCLE1BQU0sNEJBQTRCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd2JBQXdiLDBCQUEwQixNQUFNLHlTQUF5UywwQkFBMEIsU0FBUyxjQUFjLDhVQUE4VSwrQkFBK0IsNERBQTRELG9IQUFvSCxnQkFBZ0Isd0JBQXdCLHVFQUF1RSxzQkFBc0Isd0ZBQXdGLG9IQUFvSCxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MscUZBQXFGLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxtSUFBbUksTUFBTSxrQ0FBa0MsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsdURBQXVELG1FQUFtRSxZQUFZLHNCQUFzQixLQUFLLDZEQUE2RCw0QkFBNEIsb0lBQW9JLDBCQUEwQixxRUFBcUUsc0RBQXNELGlCQUFpQix5SEFBeUgsZ0JBQWdCLFlBQVksc0JBQXNCLEtBQUssOEhBQThILDRFQUE0RSwwRUFBMEUsMEJBQTBCLFNBQVMsWUFBWSw2R0FBNkcsZ0JBQWdCLFlBQVksc0JBQXNCLCtFQUErRSxxR0FBcUcsK0JBQStCLDREQUE0RCx1RUFBdUUsZ0JBQWdCLHdCQUF3Qix5R0FBeUcsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHFGQUFxRixRQUFRLEVBQUUsaUJBQWlCLDJDQUEyQyxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLDhJQUE4SSwwQkFBMEIsTUFBTSw4SkFBOEosMEJBQTBCLFNBQVMsY0FBYyxrRkFBa0YsK0JBQStCLDREQUE0RCx1RUFBdUUsZ0JBQWdCLHdCQUF3Qix5R0FBeUcsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHFGQUFxRixRQUFRLEVBQUUsaUJBQWlCLDJDQUEyQyxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLDhJQUE4SSwwQkFBMEIsTUFBTSw4SkFBOEosMEJBQTBCLFNBQVMsY0FBYyxrRkFBa0YsK0JBQStCLDREQUE0RCw4RkFBOEYsZ0JBQWdCLHdCQUF3Qiw2T0FBNk8saUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLG1GQUFtRixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0saUVBQWlFLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDZGQUE2RixpREFBaUQsK0NBQStDLHdCQUF3QixZQUFZLDBCQUEwQixtRUFBbUUsb0RBQW9ELDBEQUEwRCxtSEFBbUgsMkRBQTJELFNBQVMsMEJBQTBCLFNBQVMsY0FBYyw0TUFBNE0sK0JBQStCLDREQUE0RCxrR0FBa0csZ0JBQWdCLHdCQUF3Qix5T0FBeU8saUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDRFQUE0RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsaUNBQWlDLE1BQU0saUNBQWlDLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isa1NBQWtTLDBCQUEwQixNQUFNLGtPQUFrTywwQkFBMEIsU0FBUyxjQUFjLG9PQUFvTywrQkFBK0IsNERBQTRELG1CQUFtQix3R0FBd0csZ0JBQWdCLHdCQUF3Qiw2REFBNkQsaUJBQWlCLDBFQUEwRSwrSkFBK0osaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDJEQUEyRCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsc0dBQXNHLE1BQU0sK0NBQStDLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDZDQUE2Qyx5REFBeUQsWUFBWSxpQkFBaUIsS0FBSywrQ0FBK0MsdUJBQXVCLHNNQUFzTSwwQkFBMEIsMkNBQTJDLDRCQUE0QixZQUFZLHFGQUFxRixXQUFXLFlBQVksaUJBQWlCLEtBQUssMEZBQTBGLHlEQUF5RCx3SEFBd0gsMEJBQTBCLFNBQVMsWUFBWSw2R0FBNkcsV0FBVyxZQUFZLGlCQUFpQiw0REFBNEQsaUtBQWlLLCtCQUErQiw0REFBNEQsOFNBQThTLHlGQUF5Rix1QkFBdUIsZ0JBQWdCLHdCQUF3QiwyeEJBQTJ4Qiw4QkFBOEIsdUZBQXVGLGlIQUFpSCxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsK0RBQStELFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2QkFBNkIsTUFBTSx3QkFBd0IsTUFBTSx3QkFBd0IsTUFBTSx5QkFBeUIsTUFBTSwyQkFBMkIsTUFBTSwwQkFBMEIsTUFBTSxvRUFBb0UsTUFBTSx5QkFBeUIsTUFBTSxrQ0FBa0MsTUFBTSwySkFBMkosTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsU0FBUyw2R0FBNkcsdUdBQXVHLHlDQUF5QyxrREFBa0QsK0RBQStELDJDQUEyQyxrREFBa0QsaUVBQWlFLCtDQUErQyxrREFBa0QscUVBQXFFLDZDQUE2QyxrREFBa0QsbUVBQW1FLCtDQUErQyxrREFBa0QsbUZBQW1GLDZGQUE2Riw2SEFBNkgsdUVBQXVFLG1GQUFtRixjQUFjLDhCQUE4Qiw2RkFBNkYsWUFBWSwwQkFBMEIsK0NBQStDLGdDQUFnQyxzUUFBc1EsNkZBQTZGLDZEQUE2RCw2SEFBNkgsbUhBQW1ILHdCQUF3QixZQUFZLDhCQUE4QixLQUFLLHdIQUF3SCxtRkFBbUYsU0FBUywwQkFBMEIsU0FBUyxZQUFZLG8xQkFBbzFCLHdCQUF3QixZQUFZLDhCQUE4QixzRkFBc0YsaUdBQWlHLCtCQUErQiw0REFBNEQsc0ZBQXNGLGdCQUFnQix3QkFBd0IseUxBQXlMLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx3RUFBd0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHlCQUF5QixNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLGtPQUFrTywwQkFBMEIsTUFBTSwwS0FBMEssMEJBQTBCLFNBQVMsY0FBYyxvSkFBb0osK0JBQStCLDREQUE0RCx3QkFBd0Isd0VBQXdFLGdCQUFnQix3QkFBd0IsMkRBQTJELGdCQUFnQix5RkFBeUYsU0FBUyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsNkVBQTZFLFFBQVEsRUFBRSxpQkFBaUIsc0lBQXNJLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJDQUEyQyx1REFBdUQsWUFBWSxnQkFBZ0IsS0FBSyw4REFBOEQsc0JBQXNCLFlBQVksMEJBQTBCLDZEQUE2RCw4Q0FBOEMsV0FBVyxxR0FBcUcsVUFBVSxZQUFZLGdCQUFnQixLQUFLLDBHQUEwRyx1RUFBdUUsU0FBUywwQkFBMEIsU0FBUyxZQUFZLDBEQUEwRCxVQUFVLFlBQVksZ0JBQWdCLDBFQUEwRSxTQUFTLCtCQUErQiw0REFBNEQsMmFBQTJhLGdCQUFnQix3QkFBd0IsZ1BBQWdQLHNCQUFzQix5Q0FBeUMscURBQXFELHVCQUF1Qiw0RkFBNEYsK0NBQStDLG9CQUFvQiw2RkFBNkYsNkNBQTZDLG1CQUFtQiwrRkFBK0YsaURBQWlELHFCQUFxQiwrRkFBK0YscVdBQXFXLDRCQUE0Qiw4Q0FBOEMsMkRBQTJELDBCQUEwQiw0Q0FBNEMsK0ZBQStGLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQywrRUFBK0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDRCQUE0QixNQUFNLDBGQUEwRixNQUFNLHNIQUFzSCxRQUFRLG9DQUFvQyx3Q0FBd0MsTUFBTSw0R0FBNEcsUUFBUSxrQ0FBa0Msc0NBQXNDLE1BQU0sMElBQTBJLE1BQU0sa0lBQWtJLE1BQU0saUlBQWlJLE1BQU0sdUlBQXVJLE1BQU0sb0VBQW9FLE1BQU0sOEVBQThFLE1BQU0sNEJBQTRCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDZGQUE2Rix5R0FBeUcsdURBQXVELG1FQUFtRSxZQUFZLHNCQUFzQiwwRUFBMEUsbUVBQW1FLCtFQUErRSxRQUFRLDRCQUE0Qix3RkFBd0YsK0RBQStELDJFQUEyRSxRQUFRLDBCQUEwQixvRkFBb0YseURBQXlELHFFQUFxRSxRQUFRLHVCQUF1QiwyRkFBMkYsbURBQW1ELCtEQUErRCxRQUFRLG9CQUFvQix5RkFBeUYsaURBQWlELDZEQUE2RCxRQUFRLG1CQUFtQiwwRkFBMEYscURBQXFELGlFQUFpRSxRQUFRLHFCQUFxQiw0RkFBNEYsTUFBTSx3SEFBd0gsdUpBQXVKLHdHQUF3RywwQkFBMEIsK0RBQStELGdEQUFnRCxzR0FBc0csbUhBQW1ILGdCQUFnQixZQUFZLHNCQUFzQiw0Q0FBNEMsdUJBQXVCLCtIQUErSCxzQkFBc0IsUUFBUSw0QkFBNEIsa0RBQWtELHFCQUFxQiwySEFBMkgsb0JBQW9CLFFBQVEsMEJBQTBCLDhDQUE4QyxrQkFBa0IscUhBQXFILGlCQUFpQixRQUFRLHVCQUF1QixLQUFLLDBIQUEwSCxpRkFBaUYsZUFBZSwrR0FBK0csY0FBYyxRQUFRLG9CQUFvQixLQUFLLG9IQUFvSCwrRUFBK0UsY0FBYyw2R0FBNkcsYUFBYSxRQUFRLG1CQUFtQixLQUFLLGtIQUFrSCxnRkFBZ0YsZ0JBQWdCLGlIQUFpSCxlQUFlLFFBQVEscUJBQXFCLEtBQUssc0hBQXNILGtGQUFrRixvQkFBb0IsK0dBQStHLDhEQUE4RCwyQkFBMkIsNkhBQTZILCtFQUErRSxxREFBcUQsMEJBQTBCLFNBQVMsWUFBWSxtWUFBbVksZ0JBQWdCLFlBQVksc0JBQXNCLG9DQUFvQyx3Q0FBd0MsaUJBQWlCLFFBQVEsdUJBQXVCLG9GQUFvRixrQ0FBa0MsY0FBYyxRQUFRLG9CQUFvQixrRkFBa0YsZ0NBQWdDLGFBQWEsUUFBUSxtQkFBbUIsbUZBQW1GLG9DQUFvQyxlQUFlLFFBQVEscUJBQXFCLHFGQUFxRiw2U0FBNlMsc0JBQXNCLFFBQVEsNEJBQTRCLGdEQUFnRCw4Q0FBOEMsb0JBQW9CLFFBQVEsMEJBQTBCLDRDQUE0Qyx5RUFBeUUsK0JBQStCLDREQUE0RCx5WEFBeVgsZ0JBQWdCLHdCQUF3Qiw2SUFBNkksaUJBQWlCLDJGQUEyRixtREFBbUQsc0JBQXNCLDJGQUEyRiwrQ0FBK0Msb0JBQW9CLDZGQUE2RiwyREFBMkQsMEJBQTBCLDhHQUE4RyxpREFBaUQscUJBQXFCLCtGQUErRiwyTEFBMkwscUJBQXFCLCtGQUErRix5REFBeUQseUJBQXlCLDRHQUE0Ryx1REFBdUQsd0JBQXdCLDJDQUEyQyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQywyRUFBMkUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHVIQUF1SCxNQUFNLHVJQUF1SSxNQUFNLHNJQUFzSSxNQUFNLGtJQUFrSSxNQUFNLHFLQUFxSyxNQUFNLHVJQUF1SSxNQUFNLHVFQUF1RSxNQUFNLGdLQUFnSyxNQUFNLG1HQUFtRyxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYsNkNBQTZDLHlEQUF5RCxZQUFZLGlCQUFpQixvRkFBb0YscURBQXFELGlFQUFpRSxRQUFRLHFCQUFxQiw0RkFBNEYsdURBQXVELG1FQUFtRSxRQUFRLHNCQUFzQix5RkFBeUYsbURBQW1ELCtEQUErRCxRQUFRLG9CQUFvQix5RkFBeUYsK0RBQStELDJFQUEyRSxRQUFRLDBCQUEwQixnSEFBZ0gscURBQXFELGlFQUFpRSxRQUFRLHFCQUFxQiw0RkFBNEYsMkhBQTJILDZEQUE2RCx5RUFBeUUsY0FBYyx5QkFBeUIsNkdBQTZHLDJEQUEyRCx1RUFBdUUsUUFBUSx3QkFBd0IsOEVBQThFLFlBQVksMEJBQTBCLDJEQUEyRCw0Q0FBNEMsa0RBQWtELHFHQUFxRyxXQUFXLFlBQVksaUJBQWlCLEtBQUssMEdBQTBHLDBFQUEwRSxnQkFBZ0IsNkdBQTZHLGVBQWUsUUFBUSxxQkFBcUIsS0FBSyxrSEFBa0gsa0ZBQWtGLGlCQUFpQiwrR0FBK0csZ0JBQWdCLFFBQVEsc0JBQXNCLEtBQUssb0hBQW9ILCtFQUErRSxlQUFlLDJHQUEyRyxjQUFjLFFBQVEsb0JBQW9CLEtBQUssZ0hBQWdILCtFQUErRSxxQkFBcUIsdUhBQXVILG9CQUFvQixRQUFRLDBCQUEwQixLQUFLLDRIQUE0SCxzR0FBc0csZ0JBQWdCLDZHQUE2RyxlQUFlLFFBQVEscUJBQXFCLEtBQUssa0hBQWtILGtGQUFrRixvQkFBb0IsMkdBQTJHLGlFQUFpRSxvQkFBb0IscUhBQXFILG1CQUFtQixRQUFRLHlCQUF5QixLQUFLLDBIQUEwSCxtR0FBbUcsbUJBQW1CLG1IQUFtSCxrQkFBa0IsUUFBUSx3QkFBd0IsZ0RBQWdELFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxpUkFBaVIsV0FBVyxZQUFZLGlCQUFpQiw2RUFBNkUsc0NBQXNDLGdCQUFnQixRQUFRLHNCQUFzQixrRkFBa0Ysa0NBQWtDLGNBQWMsUUFBUSxvQkFBb0Isa0ZBQWtGLDhDQUE4QyxvQkFBb0IsUUFBUSwwQkFBMEIseUdBQXlHLG9DQUFvQyxlQUFlLFFBQVEscUJBQXFCLHFGQUFxRixxSkFBcUosZUFBZSxRQUFRLHFCQUFxQixxRkFBcUYsNENBQTRDLG1CQUFtQixRQUFRLHlCQUF5QixzR0FBc0csMENBQTBDLGtCQUFrQixRQUFRLHdCQUF3Qix3Q0FBd0MsU0FBUywrQkFBK0IsNERBQTRELHVHQUF1RyxnQkFBZ0Isd0JBQXdCLHVVQUF1VSxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsMEZBQTBGLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSx1QkFBdUIsTUFBTSw4RUFBOEUsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsbUdBQW1HLDJGQUEyRixpREFBaUQsNERBQTRELHdCQUF3QixZQUFZLDBCQUEwQiwwRUFBMEUsMkRBQTJELG9GQUFvRiwwSEFBMEgsd0VBQXdFLFNBQVMsMEJBQTBCLFNBQVMsY0FBYyx5UkFBeVIsK0JBQStCLDREQUE0RCxnRkFBZ0YsZ0JBQWdCLHdCQUF3QixzTEFBc0wsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHlGQUF5RixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sdUJBQXVCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isc09BQXNPLDBCQUEwQixNQUFNLGdNQUFnTSwwQkFBMEIsU0FBUyxjQUFjLGtKQUFrSiwrQkFBK0IsNERBQTRELGtHQUFrRyxnQkFBZ0Isd0JBQXdCLHlGQUF5RiwrQkFBK0IsMEdBQTBHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLGlGQUFpRixRQUFRLEVBQUUsaUJBQWlCLG9NQUFvTSxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCx5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLEtBQUssNkVBQTZFLHFDQUFxQyxZQUFZLDBCQUEwQixpRUFBaUUsa0RBQWtELDBCQUEwQix1SUFBdUkseUJBQXlCLFlBQVksK0JBQStCLEtBQUssNElBQTRJLHFHQUFxRyxTQUFTLDBCQUEwQixTQUFTLFlBQVksdUdBQXVHLHlCQUF5QixZQUFZLCtCQUErQix3R0FBd0csU0FBUywrQkFBK0IsNERBQTRELHFUQUFxVCxnQkFBZ0Isd0JBQXdCLGlqQ0FBaWpDLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxnRkFBZ0YsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDBCQUEwQixNQUFNLHlCQUF5QixNQUFNLHdCQUF3QixNQUFNLDZCQUE2QixNQUFNLDZCQUE2QixNQUFNLGlDQUFpQyxNQUFNLDhCQUE4QixNQUFNLDhCQUE4QixNQUFNLHFFQUFxRSxNQUFNLGtDQUFrQyxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYsdUdBQXVHLDREQUE0RCwyQ0FBMkMsc0JBQXNCLHlEQUF5RCwwQ0FBMEMsd0lBQXdJLDZHQUE2Ryw2R0FBNkcsNkhBQTZILHVIQUF1SCw2R0FBNkcsaURBQWlELHVEQUF1RCx3QkFBd0IsOElBQThJLDBCQUEwQixnRUFBZ0UsaURBQWlELDRGQUE0RixzQ0FBc0MsTUFBTSxzQ0FBc0MsTUFBTSxzQ0FBc0MsZUFBZSxrQ0FBa0MsTUFBTSxpQ0FBaUMsTUFBTSxpQ0FBaUMsTUFBTSxrQ0FBa0MsTUFBTSxpQ0FBaUMsTUFBTSxtQ0FBbUMsTUFBTSxtQ0FBbUMsTUFBTSxnQ0FBZ0MsTUFBTSxrQ0FBa0MsTUFBTSxtQ0FBbUMsTUFBTSxxQ0FBcUMsTUFBTSxtQ0FBbUMsTUFBTSxvQ0FBb0MsTUFBTSxrQ0FBa0MsTUFBTSxzQ0FBc0MsTUFBTSxzQ0FBc0MsTUFBTSxvQ0FBb0MsTUFBTSxvQ0FBb0MsMFJBQTBSLGdIQUFnSCwrREFBK0QsOEVBQThFLDBCQUEwQixTQUFTLGNBQWMsOHFDQUE4cUMsK0JBQStCLDREQUE0RCxhQUFhLG9lQUFvZSxxTUFBcU0sZ0JBQWdCLHdCQUF3QixpUEFBaVAsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLGdGQUFnRixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0scUVBQXFFLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDZGQUE2RixpREFBaUQsbURBQW1ELHdCQUF3QixZQUFZLDBCQUEwQixnRUFBZ0UsaURBQWlELDBEQUEwRCxnSEFBZ0gsK0RBQStELFNBQVMsMEJBQTBCLFNBQVMsY0FBYyxnTkFBZ04sK0JBQStCLDREQUE0RCx5TUFBeU0sZ0JBQWdCLHdCQUF3Qiw2SUFBNkksaUJBQWlCLCtGQUErRixnTUFBZ00seUJBQXlCLG9IQUFvSCx1REFBdUQsd0JBQXdCLDJDQUEyQyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQywrRUFBK0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDJIQUEySCxNQUFNLG9FQUFvRSxNQUFNLHdLQUF3SyxNQUFNLGtHQUFrRyxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYsNkNBQTZDLHlEQUF5RCxZQUFZLGlCQUFpQix3RkFBd0Ysd0hBQXdILDZEQUE2RCx5RUFBeUUsY0FBYyx5QkFBeUIscUhBQXFILDJEQUEyRCx1RUFBdUUsUUFBUSx3QkFBd0IsOEVBQThFLFlBQVksMEJBQTBCLCtEQUErRCxnREFBZ0Qsa0RBQWtELHlHQUF5RyxXQUFXLFlBQVksaUJBQWlCLEtBQUssOEdBQThHLDhFQUE4RSxvQkFBb0IsK0dBQStHLDhEQUE4RCxvQkFBb0IseUhBQXlILG1CQUFtQixRQUFRLHlCQUF5QixLQUFLLDhIQUE4SCwyR0FBMkcsbUJBQW1CLHVIQUF1SCxrQkFBa0IsUUFBUSx3QkFBd0IsZ0RBQWdELFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxpTUFBaU0sV0FBVyxZQUFZLGlCQUFpQixpRkFBaUYsMEpBQTBKLG1CQUFtQixRQUFRLHlCQUF5Qiw4R0FBOEcsMENBQTBDLGtCQUFrQixRQUFRLHdCQUF3Qix3Q0FBd0MsU0FBUywrQkFBK0IsNERBQTRELGlGQUFpRixnQkFBZ0Isd0JBQXdCLHNMQUFzTCxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsaUdBQWlHLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSx1QkFBdUIsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQixzT0FBc08sMEJBQTBCLE1BQU0sZ05BQWdOLDBCQUEwQixTQUFTLGNBQWMsa0pBQWtKLCtCQUErQiw0REFBNEQsMEhBQTBILGdCQUFnQix3QkFBd0IsMFVBQTBVLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxvRkFBb0YsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDBCQUEwQixNQUFNLHlFQUF5RSxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYsdUdBQXVHLGlEQUFpRCx1REFBdUQsd0JBQXdCLFlBQVksMEJBQTBCLG9FQUFvRSxxREFBcUQsZ0dBQWdHLG9IQUFvSCxtRUFBbUUsU0FBUywwQkFBMEIsU0FBUyxjQUFjLCtSQUErUiwrQkFBK0IsNERBQTRELGdJQUFnSSxnQkFBZ0Isd0JBQXdCLCtJQUErSSxrQkFBa0IsNkZBQTZGLG1KQUFtSixpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0Msa0ZBQWtGLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSw0SEFBNEgsTUFBTSx1RUFBdUUsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsNkZBQTZGLCtDQUErQywyREFBMkQsWUFBWSxrQkFBa0IsdUZBQXVGLE1BQU0sMkhBQTJILFlBQVksMEJBQTBCLGtFQUFrRSxtREFBbUQsbURBQW1ELDhHQUE4RyxZQUFZLFlBQVksa0JBQWtCLEtBQUssbUhBQW1ILDZFQUE2RSxvQkFBb0Isa0hBQWtILGlFQUFpRSxTQUFTLDBCQUEwQixTQUFTLFlBQVksK0pBQStKLFlBQVksWUFBWSxrQkFBa0IsZ0ZBQWdGLDBIQUEwSCwrQkFBK0IsNERBQTRELGdOQUFnTixnQkFBZ0Isd0JBQXdCLGlwQkFBaXBCLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxpRkFBaUYsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLDhCQUE4QixNQUFNLCtCQUErQixNQUFNLHNFQUFzRSxNQUFNLGtDQUFrQyxNQUFNLGtDQUFrQyxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYsaUhBQWlILHFIQUFxSCxpREFBaUQsd0RBQXdELHdCQUF3Qix3UkFBd1IsMEJBQTBCLGlFQUFpRSxrREFBa0QsdUtBQXVLLGlIQUFpSCxnRUFBZ0UseUpBQXlKLDBCQUEwQixTQUFTLGNBQWMsOG5CQUE4bkIsK0JBQStCLDREQUE0RCxtc0JBQW1zQixnQkFBZ0Isd0JBQXdCLGt6RUFBa3pFLCtCQUErQiwwR0FBMEcsU0FBUyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsdUVBQXVFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxnQ0FBZ0MsTUFBTSx1Q0FBdUMsTUFBTSxxQ0FBcUMsTUFBTSw2Q0FBNkMsTUFBTSx1Q0FBdUMsTUFBTSwrQkFBK0IsTUFBTSwrQkFBK0IsTUFBTSxxQ0FBcUMsTUFBTSx1Q0FBdUMsTUFBTSxxQ0FBcUMsTUFBTSxzQ0FBc0MsTUFBTSw4QkFBOEIsTUFBTSxrQ0FBa0MsTUFBTSxxQ0FBcUMsTUFBTSxxQ0FBcUMsTUFBTSxpQ0FBaUMsTUFBTSxvQ0FBb0MsTUFBTSxrQ0FBa0MsTUFBTSwwQ0FBMEMsTUFBTSxpQ0FBaUMsTUFBTSxnTEFBZ0wsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QseUhBQXlILHFKQUFxSix1SkFBdUosdUxBQXVMLCtKQUErSiw4RUFBOEUsaURBQWlELHNCQUFzQixpSEFBaUgsdUpBQXVKLCtKQUErSix1SkFBdUosMkpBQTJKLDJIQUEySCwySUFBMkkseUlBQXlJLHlJQUF5SSx5SEFBeUgscUlBQXFJLDZIQUE2SCw2SkFBNkoseUhBQXlILHlFQUF5RSxxRkFBcUYsWUFBWSwrQkFBK0IsS0FBSyw2RUFBNkUscUNBQXFDLFlBQVksMEJBQTBCLHVEQUF1RCx3Q0FBd0MseWFBQXlhLG1DQUFtQyxNQUFNLHVDQUF1QyxNQUFNLDBDQUEwQywwK0JBQTArQiw2SEFBNkgseUJBQXlCLFlBQVksK0JBQStCLEtBQUssa0lBQWtJLHFHQUFxRyxTQUFTLDBCQUEwQixTQUFTLFlBQVksMmxGQUEybEYseUJBQXlCLFlBQVksK0JBQStCLHdHQUF3RyxTQUFTLCtCQUErQiw0REFBNEQscUJBQXFCLGlUQUFpVCxnQkFBZ0Isd0JBQXdCLHNpQkFBc2lCLCtCQUErQiwwR0FBMEcsU0FBUyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsMEVBQTBFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx1Q0FBdUMsTUFBTSwrQ0FBK0MsTUFBTSw2QkFBNkIsTUFBTSwyQkFBMkIsTUFBTSxnTEFBZ0wsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsbUtBQW1LLG1NQUFtTSwySEFBMkgsbUhBQW1ILHlFQUF5RSxxRkFBcUYsWUFBWSwrQkFBK0IsS0FBSyw2RUFBNkUscUNBQXFDLFlBQVksMEJBQTBCLDBEQUEwRCwyQ0FBMkMsNFVBQTRVLGdJQUFnSSx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyxxSUFBcUkscUdBQXFHLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSx1bkJBQXVuQix5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLFNBQVMsK0JBQStCLDREQUE0RCx1TkFBdU4sZ0JBQWdCLHdCQUF3Qiwra0JBQStrQiwrQkFBK0IsMEdBQTBHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHdFQUF3RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0seUJBQXlCLE1BQU0sMEJBQTBCLE1BQU0sdUJBQXVCLE1BQU0sNkJBQTZCLE1BQU0sd0JBQXdCLE1BQU0sZ0xBQWdMLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDREQUE0RCwyQ0FBMkMsc0JBQXNCLDJHQUEyRywrREFBK0QsNENBQTRDLHNCQUFzQixtR0FBbUcsMkhBQTJILG1HQUFtRyx5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLEtBQUssNkVBQTZFLHFDQUFxQyxZQUFZLDBCQUEwQix3REFBd0QseUNBQXlDLGdCQUFnQiw4QkFBOEIsTUFBTSw0QkFBNEIsTUFBTSxvQ0FBb0MsOERBQThELGtDQUFrQyxNQUFNLGtDQUFrQyxNQUFNLGtDQUFrQyxpS0FBaUssOEhBQThILHlCQUF5QixZQUFZLCtCQUErQixLQUFLLG1JQUFtSSxxR0FBcUcsU0FBUywwQkFBMEIsU0FBUyxZQUFZLDZ1QkFBNnVCLHlCQUF5QixZQUFZLCtCQUErQix3R0FBd0csU0FBUywrQkFBK0IsNERBQTRELGNBQWMsa0dBQWtHLDhLQUE4SyxnQkFBZ0Isd0JBQXdCLHlGQUF5RiwrQkFBK0IsMEdBQTBHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHdFQUF3RSxRQUFRLEVBQUUsaUJBQWlCLG9NQUFvTSxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCx5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLEtBQUssNkVBQTZFLHFDQUFxQyxZQUFZLDBCQUEwQix3REFBd0QseUNBQXlDLDBCQUEwQiw4SEFBOEgseUJBQXlCLFlBQVksK0JBQStCLEtBQUssbUlBQW1JLHFHQUFxRyxTQUFTLDBCQUEwQixTQUFTLFlBQVksdUdBQXVHLHlCQUF5QixZQUFZLCtCQUErQix3R0FBd0csU0FBUywrQkFBK0IsNERBQTRELHlJQUF5SSxnQkFBZ0Isd0JBQXdCLHlSQUF5UiwrQkFBK0IsMEdBQTBHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHVFQUF1RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0sNkJBQTZCLE1BQU0sZ0xBQWdMLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJIQUEySCwySEFBMkgseUVBQXlFLHFGQUFxRixZQUFZLCtCQUErQixLQUFLLDZFQUE2RSxxQ0FBcUMsWUFBWSwwQkFBMEIsdURBQXVELHdDQUF3Qyw0SUFBNEksNkhBQTZILHlCQUF5QixZQUFZLCtCQUErQixLQUFLLGtJQUFrSSxxR0FBcUcsU0FBUywwQkFBMEIsU0FBUyxZQUFZLHFUQUFxVCx5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLFNBQVMsK0JBQStCLDREQUE0RCxvSEFBb0gsZ0JBQWdCLHdCQUF3Qix3TEFBd0wsK0JBQStCLDBHQUEwRyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyw0RUFBNEUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZCQUE2QixNQUFNLGdMQUFnTCxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCwySEFBMkgseUVBQXlFLHFGQUFxRixZQUFZLCtCQUErQixLQUFLLDZFQUE2RSxxQ0FBcUMsWUFBWSwwQkFBMEIsNERBQTRELDZDQUE2QyxtRkFBbUYsa0lBQWtJLHlCQUF5QixZQUFZLCtCQUErQixLQUFLLHVJQUF1SSxxR0FBcUcsU0FBUywwQkFBMEIsU0FBUyxZQUFZLHFOQUFxTix5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLFNBQVMsK0JBQStCLDREQUE0RCxzTUFBc00sZ0JBQWdCLHdCQUF3QiwwTEFBMEwsK0JBQStCLDBHQUEwRywyU0FBMlMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDBFQUEwRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0sZ0xBQWdMLE1BQU0sa0RBQWtELE1BQU0sa0RBQWtELE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJIQUEySCx5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLEtBQUssNkVBQTZFLHFDQUFxQyx3VkFBd1YsMEJBQTBCLDBEQUEwRCwyQ0FBMkMsbUZBQW1GLGdJQUFnSSx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyxxSUFBcUkscUdBQXFHLHlOQUF5TiwwQkFBMEIsU0FBUyxZQUFZLHFSQUFxUix5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLG1TQUFtUywrQkFBK0IsNERBQTRELG1TQUFtUyxnQkFBZ0Isd0JBQXdCLDhTQUE4UywrQkFBK0IsMEdBQTBHLDZUQUE2VCwwQ0FBMEMsK0RBQStELGdMQUFnTCxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MseUVBQXlFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw4QkFBOEIsTUFBTSxxQ0FBcUMsTUFBTSxnTEFBZ0wsTUFBTSx5R0FBeUcsTUFBTSwrRUFBK0UsTUFBTSw2S0FBNkssTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsMkhBQTJILDZGQUE2RixzREFBc0Qsc0JBQXNCLHlFQUF5RSxxRkFBcUYsWUFBWSwrQkFBK0IsK0dBQStHLE1BQU0sMk9BQTJPLDBKQUEwSiw0RkFBNEYsd0dBQXdHLFFBQVEsMENBQTBDLCtHQUErRyxZQUFZLDBCQUEwQix5REFBeUQsMENBQTBDLG9GQUFvRixzREFBc0QsTUFBTSxrREFBa0QsTUFBTSw2Q0FBNkMsMEJBQTBCLCtIQUErSCx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyxvSUFBb0kscUdBQXFHLGlEQUFpRCxnS0FBZ0ssNkhBQTZILGdDQUFnQyw4SEFBOEgsOEVBQThFLHFDQUFxQyxrSkFBa0osb0NBQW9DLFFBQVEsMENBQTBDLG9GQUFvRixTQUFTLDBCQUEwQixTQUFTLFlBQVksMGpCQUEwakIseUJBQXlCLFlBQVksK0JBQStCLHdHQUF3RyxrVEFBa1Qsb0NBQW9DLFFBQVEsMENBQTBDLDRFQUE0RSw0SkFBNEosK0JBQStCLDREQUE0RCx5QkFBeUIsa2JBQWtiLGdCQUFnQix3QkFBd0IsMkRBQTJELGdCQUFnQixrR0FBa0csd3BCQUF3cEIsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLCtFQUErRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkhBQTJILE1BQU0sb0NBQW9DLE1BQU0scUNBQXFDLE1BQU0sb0NBQW9DLE1BQU0sZ0NBQWdDLE1BQU0sK0JBQStCLE1BQU0sbUNBQW1DLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJDQUEyQyx1REFBdUQsWUFBWSxnQkFBZ0IsS0FBSyx1RUFBdUUsc0JBQXNCLDQvQkFBNC9CLDBCQUEwQiwrREFBK0QsZ0RBQWdELFdBQVcsdUdBQXVHLFVBQVUsWUFBWSxnQkFBZ0IsS0FBSyw0R0FBNEcsZ0ZBQWdGLGtzQ0FBa3NDLDBCQUEwQixXQUFXLFlBQVksb2lCQUFvaUIsVUFBVSxZQUFZLGdCQUFnQixtRkFBbUYseXpDQUF5ekMsK0JBQStCLDREQUE0RCxxRkFBcUYsZ0JBQWdCLHdCQUF3Qix5RkFBeUYsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHdGQUF3RixRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLHNGQUFzRixXQUFXLEVBQUUsNENBQTRDLHdEQUF3RCxXQUFXLEVBQUUsK0JBQStCLDhEQUE4RCxzQkFBc0IsNktBQTZLLDBCQUEwQixNQUFNLDRPQUE0TywwQkFBMEIsU0FBUyxjQUFjLDJNQUEyTSwrQkFBK0IsNERBQTRELGdGQUFnRixnQkFBZ0Isd0JBQXdCLG1FQUFtRSxvQkFBb0IsaUdBQWlHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDBFQUEwRSxRQUFRLEVBQUUsaUJBQWlCLDBKQUEwSixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCxtREFBbUQsK0RBQStELFlBQVksb0JBQW9CLEtBQUssc0VBQXNFLDBCQUEwQixZQUFZLDBCQUEwQiwwREFBMEQsMkNBQTJDLGVBQWUsMEdBQTBHLGNBQWMsWUFBWSxvQkFBb0IsS0FBSywrR0FBK0csbUZBQW1GLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxzRUFBc0UsY0FBYyxZQUFZLG9CQUFvQixzRkFBc0YsU0FBUywrQkFBK0IsNERBQTRELDhNQUE4TSxnQkFBZ0Isd0JBQXdCLGdEQUFnRCxvQkFBb0IsWUFBWSxnQkFBZ0IsdUJBQXVCLFdBQVcsZ0NBQWdDLG9CQUFvQixRQUFRLGdCQUFnQix1QkFBdUIsV0FBVyxrVEFBa1QsbUNBQW1DLHNEQUFzRCxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxtRkFBbUYsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGlGQUFpRixRQUFRLHdCQUF3Qiw0QkFBNEIsTUFBTSw2RUFBNkUsUUFBUSx3QkFBd0IsNEJBQTRCLE1BQU0sb0NBQW9DLE1BQU0scUNBQXFDLE1BQU0sOElBQThJLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJDQUEyQyx1REFBdUQsWUFBWSxnQkFBZ0IsZ0VBQWdFLDJDQUEyQyx1REFBdUQsUUFBUSxnQkFBZ0IsZ0VBQWdFLHlJQUF5SSw2SUFBNkksaUZBQWlGLDZGQUE2RixRQUFRLG1DQUFtQyxvR0FBb0csWUFBWSwwQkFBMEIsbUVBQW1FLG9EQUFvRCxXQUFXLDJHQUEyRyxVQUFVLFlBQVksZ0JBQWdCLDBCQUEwQixXQUFXLDJHQUEyRyxVQUFVLFFBQVEsZ0JBQWdCLDBCQUEwQiwrS0FBK0ssaUpBQWlKLDZCQUE2QixRQUFRLG1DQUFtQyxzRUFBc0UsU0FBUywwQkFBMEIsU0FBUyxZQUFZLDBKQUEwSixVQUFVLFlBQVksZ0JBQWdCLHdCQUF3QiwwQkFBMEIsVUFBVSxRQUFRLGdCQUFnQix3QkFBd0IsNFFBQTRRLDZCQUE2QixRQUFRLG1DQUFtQyw4REFBOEQsU0FBUywrQkFBK0IsNERBQTRELHFGQUFxRixnQkFBZ0Isd0JBQXdCLHVFQUF1RSxzQkFBc0Isd0dBQXdHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDZFQUE2RSxRQUFRLEVBQUUsaUJBQWlCLHVLQUF1SyxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCx1REFBdUQsbUVBQW1FLFlBQVksc0JBQXNCLEtBQUssNkVBQTZFLDRCQUE0QixZQUFZLDBCQUEwQiw2REFBNkQsOENBQThDLGlCQUFpQixpSEFBaUgsZ0JBQWdCLFlBQVksc0JBQXNCLEtBQUssc0hBQXNILDRGQUE0RixTQUFTLDBCQUEwQixTQUFTLFlBQVksNEVBQTRFLGdCQUFnQixZQUFZLHNCQUFzQiwrRkFBK0YsU0FBUywrQkFBK0IsNERBQTRELGtJQUFrSSxnQkFBZ0Isd0JBQXdCLGdEQUFnRCxvQkFBb0IsWUFBWSxnQkFBZ0IsdUJBQXVCLFdBQVcseVFBQXlRLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx3RkFBd0YsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGlGQUFpRixRQUFRLHdCQUF3Qiw0QkFBNEIsTUFBTSwrQkFBK0IsTUFBTSx5QkFBeUIsTUFBTSx1QkFBdUIsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsMkNBQTJDLHVEQUF1RCxZQUFZLGdCQUFnQixnRUFBZ0Usb1NBQW9TLDBCQUEwQix3RUFBd0UseURBQXlELFdBQVcsZ0hBQWdILFVBQVUsWUFBWSxnQkFBZ0IsMEJBQTBCLGlJQUFpSSwwQkFBMEIsU0FBUyxZQUFZLDBHQUEwRyxVQUFVLFlBQVksZ0JBQWdCLHdCQUF3Qix5TUFBeU0sK0JBQStCLDREQUE0RCw2RkFBNkYsZ0JBQWdCLHdCQUF3Qix1TUFBdU0saUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLCtEQUErRCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isa1NBQWtTLDBCQUEwQixNQUFNLG1SQUFtUiwwQkFBMEIsU0FBUyxjQUFjLDBXQUEwVywrQkFBK0IsNERBQTRELDhHQUE4RyxnQkFBZ0Isd0JBQXdCLGtNQUFrTSxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0Msb0VBQW9FLFFBQVEsRUFBRSxpQkFBaUIsY0FBYywyQkFBMkIsTUFBTSx5QkFBeUIsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQixpVUFBaVUsMEJBQTBCLE1BQU0sMFpBQTBaLDBCQUEwQixXQUFXLGNBQWMsK2ZBQStmLCtCQUErQiw0REFBNEQsa0NBQWtDLGdCQUFnQix3QkFBd0IsdUJBQXVCLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxpRUFBaUUsUUFBUSxFQUFFLGlCQUFpQixnQkFBZ0IsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQiwwREFBMEQsMEJBQTBCLDBFQUEwRSx1QkFBdUIsU0FBUywrQkFBK0IsNERBQTRELG1CQUFtQiwwR0FBMEcsZ0JBQWdCLHdCQUF3Qix3T0FBd08sbUJBQW1CLDRFQUE0RSxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyw2REFBNkQsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHdCQUF3QixNQUFNLDRCQUE0QixNQUFNLDhHQUE4RyxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCwrRkFBK0YseUdBQXlHLGlEQUFpRCw2REFBNkQsWUFBWSxtQkFBbUIsS0FBSyxpREFBaUQseUJBQXlCLFlBQVksMEJBQTBCLDZDQUE2Qyw4QkFBOEIsNkZBQTZGLDJGQUEyRixhQUFhLFlBQVksbUJBQW1CLEtBQUssZ0dBQWdHLDZEQUE2RCxTQUFTLDBCQUEwQixTQUFTLFlBQVksbU9BQW1PLGFBQWEsWUFBWSxtQkFBbUIsZ0VBQWdFLFNBQVMsK0JBQStCLDREQUE0RCxZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhbmlzaC1sYW5ndWFnZS1sZWFybmluZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9wcm90b3Mvb3BlcmF0aW9ucy5qcz9iOGU1Il0sInNvdXJjZXNDb250ZW50IjpbIihlPT57XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJwcm90b2J1ZmpzL21pbmltYWxcIl0sZSk6XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmKG1vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcInByb3RvYnVmanMvbWluaW1hbFwiKSkpfSkoZnVuY3Rpb24obyl7dmFyIGUsdCxuLEYsYT1vLlJlYWRlcixyPW8uV3JpdGVyLGk9by51dGlsLHA9by5yb290cy5vcGVyYXRpb25zX3Byb3Rvc3x8KG8ucm9vdHMub3BlcmF0aW9uc19wcm90b3M9e30pO2Z1bmN0aW9uIEcoZSx0LG4pe28ucnBjLlNlcnZpY2UuY2FsbCh0aGlzLGUsdCxuKX1mdW5jdGlvbiBsKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBCKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBzKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB1KGUpe2lmKHRoaXMub3BlcmF0aW9ucz1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gTChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gVShlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gYyhlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gZyhlKXtpZih0aGlzLnJ1bGVzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBmKGUpe2lmKHRoaXMuYWRkaXRpb25hbEJpbmRpbmdzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB5KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBKKGUpe2lmKHRoaXMuZmlsZT1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gaChlKXtpZih0aGlzLmRlcGVuZGVuY3k9W10sdGhpcy5wdWJsaWNEZXBlbmRlbmN5PVtdLHRoaXMud2Vha0RlcGVuZGVuY3k9W10sdGhpcy5tZXNzYWdlVHlwZT1bXSx0aGlzLmVudW1UeXBlPVtdLHRoaXMuc2VydmljZT1bXSx0aGlzLmV4dGVuc2lvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gTyhlKXtpZih0aGlzLmZpZWxkPVtdLHRoaXMuZXh0ZW5zaW9uPVtdLHRoaXMubmVzdGVkVHlwZT1bXSx0aGlzLmVudW1UeXBlPVtdLHRoaXMuZXh0ZW5zaW9uUmFuZ2U9W10sdGhpcy5vbmVvZkRlY2w9W10sdGhpcy5yZXNlcnZlZFJhbmdlPVtdLHRoaXMucmVzZXJ2ZWROYW1lPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBiKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBtKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBNKGUpe2lmKHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gdihlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gdyhlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gUChlKXtpZih0aGlzLnZhbHVlPVtdLHRoaXMucmVzZXJ2ZWRSYW5nZT1bXSx0aGlzLnJlc2VydmVkTmFtZT1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gXyhlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gaihlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gUyhlKXtpZih0aGlzLm1ldGhvZD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24geChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gayhlKXtpZih0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEQoZSl7aWYodGhpcy51bmludGVycHJldGVkT3B0aW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBUKGUpe2lmKHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gSChlKXtpZih0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEUoZSl7aWYodGhpcy51bmludGVycHJldGVkT3B0aW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB6KGUpe2lmKHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gQShlKXtpZih0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIE4oZSl7aWYodGhpcy51bmludGVycHJldGVkT3B0aW9uPVtdLHRoaXNbXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl09W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEkoZSl7aWYodGhpcy5uYW1lPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBxKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBZKGUpe2lmKHRoaXMubG9jYXRpb249W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFIoZSl7aWYodGhpcy5wYXRoPVtdLHRoaXMuc3Bhbj1bXSx0aGlzLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBXKGUpe2lmKHRoaXMuYW5ub3RhdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gQyhlKXtpZih0aGlzLnBhdGg9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFgoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEsoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFEoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFYoZSl7aWYodGhpcy5kZXRhaWxzPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1yZXR1cm4gcC5nb29nbGU9KChGPXt9KS5sb25ncnVubmluZz0oKHQ9e30pLk9wZXJhdGlvbnM9KCgoRy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShvLnJwYy5TZXJ2aWNlLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPUcpLmNyZWF0ZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG5ldyB0aGlzKGUsdCxuKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEcucHJvdG90eXBlLmxpc3RPcGVyYXRpb25zPWZ1bmN0aW9uIGUodCxuKXtyZXR1cm4gdGhpcy5ycGNDYWxsKGUscC5nb29nbGUubG9uZ3J1bm5pbmcuTGlzdE9wZXJhdGlvbnNSZXF1ZXN0LHAuZ29vZ2xlLmxvbmdydW5uaW5nLkxpc3RPcGVyYXRpb25zUmVzcG9uc2UsdCxuKX0sXCJuYW1lXCIse3ZhbHVlOlwiTGlzdE9wZXJhdGlvbnNcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShHLnByb3RvdHlwZS5nZXRPcGVyYXRpb249ZnVuY3Rpb24gZSh0LG4pe3JldHVybiB0aGlzLnJwY0NhbGwoZSxwLmdvb2dsZS5sb25ncnVubmluZy5HZXRPcGVyYXRpb25SZXF1ZXN0LHAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbix0LG4pfSxcIm5hbWVcIix7dmFsdWU6XCJHZXRPcGVyYXRpb25cIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShHLnByb3RvdHlwZS5kZWxldGVPcGVyYXRpb249ZnVuY3Rpb24gZSh0LG4pe3JldHVybiB0aGlzLnJwY0NhbGwoZSxwLmdvb2dsZS5sb25ncnVubmluZy5EZWxldGVPcGVyYXRpb25SZXF1ZXN0LHAuZ29vZ2xlLnByb3RvYnVmLkVtcHR5LHQsbil9LFwibmFtZVwiLHt2YWx1ZTpcIkRlbGV0ZU9wZXJhdGlvblwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEcucHJvdG90eXBlLmNhbmNlbE9wZXJhdGlvbj1mdW5jdGlvbiBlKHQsbil7cmV0dXJuIHRoaXMucnBjQ2FsbChlLHAuZ29vZ2xlLmxvbmdydW5uaW5nLkNhbmNlbE9wZXJhdGlvblJlcXVlc3QscC5nb29nbGUucHJvdG9idWYuRW1wdHksdCxuKX0sXCJuYW1lXCIse3ZhbHVlOlwiQ2FuY2VsT3BlcmF0aW9uXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoRy5wcm90b3R5cGUud2FpdE9wZXJhdGlvbj1mdW5jdGlvbiBlKHQsbil7cmV0dXJuIHRoaXMucnBjQ2FsbChlLHAuZ29vZ2xlLmxvbmdydW5uaW5nLldhaXRPcGVyYXRpb25SZXF1ZXN0LHAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbix0LG4pfSxcIm5hbWVcIix7dmFsdWU6XCJXYWl0T3BlcmF0aW9uXCJ9KSxHKSx0Lk9wZXJhdGlvbj0obC5wcm90b3R5cGUubmFtZT1cIlwiLGwucHJvdG90eXBlLm1ldGFkYXRhPW51bGwsbC5wcm90b3R5cGUuZG9uZT0hMSxsLnByb3RvdHlwZS5lcnJvcj1udWxsLGwucHJvdG90eXBlLnJlc3BvbnNlPW51bGwsT2JqZWN0LmRlZmluZVByb3BlcnR5KGwucHJvdG90eXBlLFwicmVzdWx0XCIse2dldDppLm9uZU9mR2V0dGVyKG49W1wiZXJyb3JcIixcInJlc3BvbnNlXCJdKSxzZXQ6aS5vbmVPZlNldHRlcihuKX0pLGwuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbChlKX0sbC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbWVcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5uYW1lKSxudWxsIT1lLm1ldGFkYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibWV0YWRhdGFcIikmJnAuZ29vZ2xlLnByb3RvYnVmLkFueS5lbmNvZGUoZS5tZXRhZGF0YSx0LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmRvbmUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkb25lXCIpJiZ0LnVpbnQzMigyNCkuYm9vbChlLmRvbmUpLG51bGwhPWUuZXJyb3ImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJlcnJvclwiKSYmcC5nb29nbGUucnBjLlN0YXR1cy5lbmNvZGUoZS5lcnJvcix0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnJlc3BvbnNlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicmVzcG9uc2VcIikmJnAuZ29vZ2xlLnByb3RvYnVmLkFueS5lbmNvZGUoZS5yZXNwb25zZSx0LnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKSx0fSxsLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxsLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb247ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5uYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8ubWV0YWRhdGE9cC5nb29nbGUucHJvdG9idWYuQW55LmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMzpvLmRvbmU9ZS5ib29sKCk7YnJlYWs7Y2FzZSA0Om8uZXJyb3I9cC5nb29nbGUucnBjLlN0YXR1cy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDU6by5yZXNwb25zZT1wLmdvb2dsZS5wcm90b2J1Zi5BbnkuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxsLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxsLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjt2YXIgdCxuPXt9O2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm1ldGFkYXRhJiZlLmhhc093blByb3BlcnR5KFwibWV0YWRhdGFcIikmJih0PXAuZ29vZ2xlLnByb3RvYnVmLkFueS52ZXJpZnkoZS5tZXRhZGF0YSkpKXJldHVyblwibWV0YWRhdGEuXCIrdDtpZihudWxsIT1lLmRvbmUmJmUuaGFzT3duUHJvcGVydHkoXCJkb25lXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUuZG9uZSlyZXR1cm5cImRvbmU6IGJvb2xlYW4gZXhwZWN0ZWRcIjtpZihudWxsIT1lLmVycm9yJiZlLmhhc093blByb3BlcnR5KFwiZXJyb3JcIikmJihuLnJlc3VsdD0xLHQ9cC5nb29nbGUucnBjLlN0YXR1cy52ZXJpZnkoZS5lcnJvcikpKXJldHVyblwiZXJyb3IuXCIrdDtpZihudWxsIT1lLnJlc3BvbnNlJiZlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VcIikpe2lmKDE9PT1uLnJlc3VsdClyZXR1cm5cInJlc3VsdDogbXVsdGlwbGUgdmFsdWVzXCI7aWYobi5yZXN1bHQ9MSx0PXAuZ29vZ2xlLnByb3RvYnVmLkFueS52ZXJpZnkoZS5yZXNwb25zZSkpcmV0dXJuXCJyZXNwb25zZS5cIit0fXJldHVybiBudWxsfSxsLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbilyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uO2lmKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksbnVsbCE9ZS5tZXRhZGF0YSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUubWV0YWRhdGEpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24ubWV0YWRhdGE6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm1ldGFkYXRhPXAuZ29vZ2xlLnByb3RvYnVmLkFueS5mcm9tT2JqZWN0KGUubWV0YWRhdGEpfWlmKG51bGwhPWUuZG9uZSYmKHQuZG9uZT1Cb29sZWFuKGUuZG9uZSkpLG51bGwhPWUuZXJyb3Ipe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLmVycm9yKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uLmVycm9yOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5lcnJvcj1wLmdvb2dsZS5ycGMuU3RhdHVzLmZyb21PYmplY3QoZS5lcnJvcil9aWYobnVsbCE9ZS5yZXNwb25zZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUucmVzcG9uc2UpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24ucmVzcG9uc2U6IG9iamVjdCBleHBlY3RlZFwiKTt0LnJlc3BvbnNlPXAuZ29vZ2xlLnByb3RvYnVmLkFueS5mcm9tT2JqZWN0KGUucmVzcG9uc2UpfXJldHVybiB0fSxsLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuKHQ9dHx8e30pLmRlZmF1bHRzJiYobi5uYW1lPVwiXCIsbi5tZXRhZGF0YT1udWxsLG4uZG9uZT0hMSksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUubWV0YWRhdGEmJmUuaGFzT3duUHJvcGVydHkoXCJtZXRhZGF0YVwiKSYmKG4ubWV0YWRhdGE9cC5nb29nbGUucHJvdG9idWYuQW55LnRvT2JqZWN0KGUubWV0YWRhdGEsdCkpLG51bGwhPWUuZG9uZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRvbmVcIikmJihuLmRvbmU9ZS5kb25lKSxudWxsIT1lLmVycm9yJiZlLmhhc093blByb3BlcnR5KFwiZXJyb3JcIikmJihuLmVycm9yPXAuZ29vZ2xlLnJwYy5TdGF0dXMudG9PYmplY3QoZS5lcnJvcix0KSx0Lm9uZW9mcykmJihuLnJlc3VsdD1cImVycm9yXCIpLG51bGwhPWUucmVzcG9uc2UmJmUuaGFzT3duUHJvcGVydHkoXCJyZXNwb25zZVwiKSYmKG4ucmVzcG9uc2U9cC5nb29nbGUucHJvdG9idWYuQW55LnRvT2JqZWN0KGUucmVzcG9uc2UsdCksdC5vbmVvZnMpJiYobi5yZXN1bHQ9XCJyZXNwb25zZVwiKSxufSxsLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sbCksdC5HZXRPcGVyYXRpb25SZXF1ZXN0PShCLnByb3RvdHlwZS5uYW1lPVwiXCIsQi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBCKGUpfSxCLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLHR9LEIuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLkdldE9wZXJhdGlvblJlcXVlc3Q7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7cj4+PjM9PTE/by5uYW1lPWUuc3RyaW5nKCk6ZS5za2lwVHlwZSg3JnIpfXJldHVybiBvfSxCLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxCLnZlcmlmeT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWU/XCJvYmplY3QgZXhwZWN0ZWRcIjpudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhaS5pc1N0cmluZyhlLm5hbWUpP1wibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0sQi5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUubG9uZ3J1bm5pbmcuR2V0T3BlcmF0aW9uUmVxdWVzdD9lOih0PW5ldyBwLmdvb2dsZS5sb25ncnVubmluZy5HZXRPcGVyYXRpb25SZXF1ZXN0LG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksdCl9LEIudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLm5hbWU9XCJcIiksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG59LEIucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxCKSx0Lkxpc3RPcGVyYXRpb25zUmVxdWVzdD0ocy5wcm90b3R5cGUubmFtZT1cIlwiLHMucHJvdG90eXBlLmZpbHRlcj1cIlwiLHMucHJvdG90eXBlLnBhZ2VTaXplPTAscy5wcm90b3R5cGUucGFnZVRva2VuPVwiXCIscy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBzKGUpfSxzLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5maWx0ZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJmaWx0ZXJcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5maWx0ZXIpLG51bGwhPWUucGFnZVNpemUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwYWdlU2l6ZVwiKSYmdC51aW50MzIoMTYpLmludDMyKGUucGFnZVNpemUpLG51bGwhPWUucGFnZVRva2VuJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGFnZVRva2VuXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUucGFnZVRva2VuKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigzNCkuc3RyaW5nKGUubmFtZSksdH0scy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0scy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUubG9uZ3J1bm5pbmcuTGlzdE9wZXJhdGlvbnNSZXF1ZXN0O2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSA0Om8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMTpvLmZpbHRlcj1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnBhZ2VTaXplPWUuaW50MzIoKTticmVhaztjYXNlIDM6by5wYWdlVG9rZW49ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LHMuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LHMudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOm51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSk/XCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLmZpbHRlciYmZS5oYXNPd25Qcm9wZXJ0eShcImZpbHRlclwiKSYmIWkuaXNTdHJpbmcoZS5maWx0ZXIpP1wiZmlsdGVyOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLnBhZ2VTaXplJiZlLmhhc093blByb3BlcnR5KFwicGFnZVNpemVcIikmJiFpLmlzSW50ZWdlcihlLnBhZ2VTaXplKT9cInBhZ2VTaXplOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbCE9ZS5wYWdlVG9rZW4mJmUuaGFzT3duUHJvcGVydHkoXCJwYWdlVG9rZW5cIikmJiFpLmlzU3RyaW5nKGUucGFnZVRva2VuKT9cInBhZ2VUb2tlbjogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0scy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUubG9uZ3J1bm5pbmcuTGlzdE9wZXJhdGlvbnNSZXF1ZXN0P2U6KHQ9bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLkxpc3RPcGVyYXRpb25zUmVxdWVzdCxudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLG51bGwhPWUuZmlsdGVyJiYodC5maWx0ZXI9U3RyaW5nKGUuZmlsdGVyKSksbnVsbCE9ZS5wYWdlU2l6ZSYmKHQucGFnZVNpemU9MHxlLnBhZ2VTaXplKSxudWxsIT1lLnBhZ2VUb2tlbiYmKHQucGFnZVRva2VuPVN0cmluZyhlLnBhZ2VUb2tlbikpLHQpfSxzLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuKHQ9dHx8e30pLmRlZmF1bHRzJiYobi5maWx0ZXI9XCJcIixuLnBhZ2VTaXplPTAsbi5wYWdlVG9rZW49XCJcIixuLm5hbWU9XCJcIiksbnVsbCE9ZS5maWx0ZXImJmUuaGFzT3duUHJvcGVydHkoXCJmaWx0ZXJcIikmJihuLmZpbHRlcj1lLmZpbHRlciksbnVsbCE9ZS5wYWdlU2l6ZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBhZ2VTaXplXCIpJiYobi5wYWdlU2l6ZT1lLnBhZ2VTaXplKSxudWxsIT1lLnBhZ2VUb2tlbiYmZS5oYXNPd25Qcm9wZXJ0eShcInBhZ2VUb2tlblwiKSYmKG4ucGFnZVRva2VuPWUucGFnZVRva2VuKSxudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYobi5uYW1lPWUubmFtZSksbn0scy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LHMpLHQuTGlzdE9wZXJhdGlvbnNSZXNwb25zZT0odS5wcm90b3R5cGUub3BlcmF0aW9ucz1pLmVtcHR5QXJyYXksdS5wcm90b3R5cGUubmV4dFBhZ2VUb2tlbj1cIlwiLHUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdShlKX0sdS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5vcGVyYXRpb25zJiZlLm9wZXJhdGlvbnMubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5vcGVyYXRpb25zLmxlbmd0aDsrK24pcC5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uLmVuY29kZShlLm9wZXJhdGlvbnNbbl0sdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIG51bGwhPWUubmV4dFBhZ2VUb2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5leHRQYWdlVG9rZW5cIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5uZXh0UGFnZVRva2VuKSx0fSx1LmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSx1LmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5sb25ncnVubmluZy5MaXN0T3BlcmF0aW9uc1Jlc3BvbnNlO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ub3BlcmF0aW9ucyYmby5vcGVyYXRpb25zLmxlbmd0aHx8KG8ub3BlcmF0aW9ucz1bXSksby5vcGVyYXRpb25zLnB1c2gocC5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDI6by5uZXh0UGFnZVRva2VuPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSx1LmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSx1LnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm9wZXJhdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcGVyYXRpb25zXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm9wZXJhdGlvbnMpKXJldHVyblwib3BlcmF0aW9uczogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUub3BlcmF0aW9ucy5sZW5ndGg7Kyt0KXt2YXIgbj1wLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24udmVyaWZ5KGUub3BlcmF0aW9uc1t0XSk7aWYobilyZXR1cm5cIm9wZXJhdGlvbnMuXCIrbn19cmV0dXJuIG51bGwhPWUubmV4dFBhZ2VUb2tlbiYmZS5oYXNPd25Qcm9wZXJ0eShcIm5leHRQYWdlVG9rZW5cIikmJiFpLmlzU3RyaW5nKGUubmV4dFBhZ2VUb2tlbik/XCJuZXh0UGFnZVRva2VuOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsfSx1LmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLmxvbmdydW5uaW5nLkxpc3RPcGVyYXRpb25zUmVzcG9uc2UpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLkxpc3RPcGVyYXRpb25zUmVzcG9uc2U7aWYoZS5vcGVyYXRpb25zKXtpZighQXJyYXkuaXNBcnJheShlLm9wZXJhdGlvbnMpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUubG9uZ3J1bm5pbmcuTGlzdE9wZXJhdGlvbnNSZXNwb25zZS5vcGVyYXRpb25zOiBhcnJheSBleHBlY3RlZFwiKTt0Lm9wZXJhdGlvbnM9W107Zm9yKHZhciBuPTA7bjxlLm9wZXJhdGlvbnMubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUub3BlcmF0aW9uc1tuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLmxvbmdydW5uaW5nLkxpc3RPcGVyYXRpb25zUmVzcG9uc2Uub3BlcmF0aW9uczogb2JqZWN0IGV4cGVjdGVkXCIpO3Qub3BlcmF0aW9uc1tuXT1wLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24uZnJvbU9iamVjdChlLm9wZXJhdGlvbnNbbl0pfX1yZXR1cm4gbnVsbCE9ZS5uZXh0UGFnZVRva2VuJiYodC5uZXh0UGFnZVRva2VuPVN0cmluZyhlLm5leHRQYWdlVG9rZW4pKSx0fSx1LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5vcGVyYXRpb25zPVtdKSx0LmRlZmF1bHRzJiYobi5uZXh0UGFnZVRva2VuPVwiXCIpLGUub3BlcmF0aW9ucyYmZS5vcGVyYXRpb25zLmxlbmd0aCl7bi5vcGVyYXRpb25zPVtdO2Zvcih2YXIgbz0wO288ZS5vcGVyYXRpb25zLmxlbmd0aDsrK28pbi5vcGVyYXRpb25zW29dPXAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbi50b09iamVjdChlLm9wZXJhdGlvbnNbb10sdCl9cmV0dXJuIG51bGwhPWUubmV4dFBhZ2VUb2tlbiYmZS5oYXNPd25Qcm9wZXJ0eShcIm5leHRQYWdlVG9rZW5cIikmJihuLm5leHRQYWdlVG9rZW49ZS5uZXh0UGFnZVRva2VuKSxufSx1LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sdSksdC5DYW5jZWxPcGVyYXRpb25SZXF1ZXN0PShMLnByb3RvdHlwZS5uYW1lPVwiXCIsTC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBMKGUpfSxMLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLHR9LEwuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEwuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLkNhbmNlbE9wZXJhdGlvblJlcXVlc3Q7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7cj4+PjM9PTE/by5uYW1lPWUuc3RyaW5nKCk6ZS5za2lwVHlwZSg3JnIpfXJldHVybiBvfSxMLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxMLnZlcmlmeT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWU/XCJvYmplY3QgZXhwZWN0ZWRcIjpudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhaS5pc1N0cmluZyhlLm5hbWUpP1wibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0sTC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUubG9uZ3J1bm5pbmcuQ2FuY2VsT3BlcmF0aW9uUmVxdWVzdD9lOih0PW5ldyBwLmdvb2dsZS5sb25ncnVubmluZy5DYW5jZWxPcGVyYXRpb25SZXF1ZXN0LG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksdCl9LEwudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLm5hbWU9XCJcIiksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG59LEwucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxMKSx0LkRlbGV0ZU9wZXJhdGlvblJlcXVlc3Q9KFUucHJvdG90eXBlLm5hbWU9XCJcIixVLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFUoZSl9LFUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksdH0sVS5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sVS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUubG9uZ3J1bm5pbmcuRGVsZXRlT3BlcmF0aW9uUmVxdWVzdDtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09MT9vLm5hbWU9ZS5zdHJpbmcoKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LFUuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFUudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOm51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSk/XCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsfSxVLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5sb25ncnVubmluZy5EZWxldGVPcGVyYXRpb25SZXF1ZXN0P2U6KHQ9bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLkRlbGV0ZU9wZXJhdGlvblJlcXVlc3QsbnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSx0KX0sVS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiKSxudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYobi5uYW1lPWUubmFtZSksbn0sVS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFUpLHQuV2FpdE9wZXJhdGlvblJlcXVlc3Q9KGMucHJvdG90eXBlLm5hbWU9XCJcIixjLnByb3RvdHlwZS50aW1lb3V0PW51bGwsYy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBjKGUpfSxjLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLG51bGwhPWUudGltZW91dCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInRpbWVvdXRcIikmJnAuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uLmVuY29kZShlLnRpbWVvdXQsdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksdH0sYy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sYy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUubG9uZ3J1bm5pbmcuV2FpdE9wZXJhdGlvblJlcXVlc3Q7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5uYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8udGltZW91dD1wLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbi5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGMuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGMudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnRpbWVvdXQmJmUuaGFzT3duUHJvcGVydHkoXCJ0aW1lb3V0XCIpKXtlPXAuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uLnZlcmlmeShlLnRpbWVvdXQpO2lmKGUpcmV0dXJuXCJ0aW1lb3V0LlwiK2V9cmV0dXJuIG51bGx9LGMuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUubG9uZ3J1bm5pbmcuV2FpdE9wZXJhdGlvblJlcXVlc3QpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLldhaXRPcGVyYXRpb25SZXF1ZXN0O2lmKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksbnVsbCE9ZS50aW1lb3V0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS50aW1lb3V0KXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUubG9uZ3J1bm5pbmcuV2FpdE9wZXJhdGlvblJlcXVlc3QudGltZW91dDogb2JqZWN0IGV4cGVjdGVkXCIpO3QudGltZW91dD1wLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbi5mcm9tT2JqZWN0KGUudGltZW91dCl9cmV0dXJuIHR9LGMudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLnRpbWVvdXQ9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUudGltZW91dCYmZS5oYXNPd25Qcm9wZXJ0eShcInRpbWVvdXRcIikmJihuLnRpbWVvdXQ9cC5nb29nbGUucHJvdG9idWYuRHVyYXRpb24udG9PYmplY3QoZS50aW1lb3V0LHQpKSxufSxjLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sYyksdC5PcGVyYXRpb25JbmZvPShkLnByb3RvdHlwZS5yZXNwb25zZVR5cGU9XCJcIixkLnByb3RvdHlwZS5tZXRhZGF0YVR5cGU9XCJcIixkLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGQoZSl9LGQuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLnJlc3BvbnNlVHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlc3BvbnNlVHlwZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLnJlc3BvbnNlVHlwZSksbnVsbCE9ZS5tZXRhZGF0YVR5cGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtZXRhZGF0YVR5cGVcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tZXRhZGF0YVR5cGUpLHR9LGQuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbkluZm87ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5yZXNwb25zZVR5cGU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5tZXRhZGF0YVR5cGU9ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGQuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGQudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOm51bGwhPWUucmVzcG9uc2VUeXBlJiZlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VUeXBlXCIpJiYhaS5pc1N0cmluZyhlLnJlc3BvbnNlVHlwZSk/XCJyZXNwb25zZVR5cGU6IHN0cmluZyBleHBlY3RlZFwiOm51bGwhPWUubWV0YWRhdGFUeXBlJiZlLmhhc093blByb3BlcnR5KFwibWV0YWRhdGFUeXBlXCIpJiYhaS5pc1N0cmluZyhlLm1ldGFkYXRhVHlwZSk/XCJtZXRhZGF0YVR5cGU6IHN0cmluZyBleHBlY3RlZFwiOm51bGx9LGQuZnJvbU9iamVjdD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbkluZm8/ZToodD1uZXcgcC5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uSW5mbyxudWxsIT1lLnJlc3BvbnNlVHlwZSYmKHQucmVzcG9uc2VUeXBlPVN0cmluZyhlLnJlc3BvbnNlVHlwZSkpLG51bGwhPWUubWV0YWRhdGFUeXBlJiYodC5tZXRhZGF0YVR5cGU9U3RyaW5nKGUubWV0YWRhdGFUeXBlKSksdCl9LGQudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLnJlc3BvbnNlVHlwZT1cIlwiLG4ubWV0YWRhdGFUeXBlPVwiXCIpLG51bGwhPWUucmVzcG9uc2VUeXBlJiZlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VUeXBlXCIpJiYobi5yZXNwb25zZVR5cGU9ZS5yZXNwb25zZVR5cGUpLG51bGwhPWUubWV0YWRhdGFUeXBlJiZlLmhhc093blByb3BlcnR5KFwibWV0YWRhdGFUeXBlXCIpJiYobi5tZXRhZGF0YVR5cGU9ZS5tZXRhZGF0YVR5cGUpLG59LGQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxkKSx0KSxGLmFwaT0oKG49e30pLkh0dHA9KGcucHJvdG90eXBlLnJ1bGVzPWkuZW1wdHlBcnJheSxnLnByb3RvdHlwZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uPSExLGcuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZyhlKX0sZy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5ydWxlcyYmZS5ydWxlcy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnJ1bGVzLmxlbmd0aDsrK24pcC5nb29nbGUuYXBpLkh0dHBSdWxlLmVuY29kZShlLnJ1bGVzW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiBudWxsIT1lLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJmdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uXCIpJiZ0LnVpbnQzMigxNikuYm9vbChlLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb24pLHR9LGcuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGcuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLmFwaS5IdHRwO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ucnVsZXMmJm8ucnVsZXMubGVuZ3RofHwoby5ydWxlcz1bXSksby5ydWxlcy5wdXNoKHAuZ29vZ2xlLmFwaS5IdHRwUnVsZS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAyOm8uZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbj1lLmJvb2woKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGcuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGcudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUucnVsZXMmJmUuaGFzT3duUHJvcGVydHkoXCJydWxlc1wiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5ydWxlcykpcmV0dXJuXCJydWxlczogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUucnVsZXMubGVuZ3RoOysrdCl7dmFyIG49cC5nb29nbGUuYXBpLkh0dHBSdWxlLnZlcmlmeShlLnJ1bGVzW3RdKTtpZihuKXJldHVyblwicnVsZXMuXCIrbn19cmV0dXJuIG51bGwhPWUuZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbiYmZS5oYXNPd25Qcm9wZXJ0eShcImZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb25cIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uP1wiZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbjogYm9vbGVhbiBleHBlY3RlZFwiOm51bGx9LGcuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUuYXBpLkh0dHApcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLmFwaS5IdHRwO2lmKGUucnVsZXMpe2lmKCFBcnJheS5pc0FycmF5KGUucnVsZXMpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuYXBpLkh0dHAucnVsZXM6IGFycmF5IGV4cGVjdGVkXCIpO3QucnVsZXM9W107Zm9yKHZhciBuPTA7bjxlLnJ1bGVzLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnJ1bGVzW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuYXBpLkh0dHAucnVsZXM6IG9iamVjdCBleHBlY3RlZFwiKTt0LnJ1bGVzW25dPXAuZ29vZ2xlLmFwaS5IdHRwUnVsZS5mcm9tT2JqZWN0KGUucnVsZXNbbl0pfX1yZXR1cm4gbnVsbCE9ZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uJiYodC5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uPUJvb2xlYW4oZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uKSksdH0sZy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4ucnVsZXM9W10pLHQuZGVmYXVsdHMmJihuLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb249ITEpLGUucnVsZXMmJmUucnVsZXMubGVuZ3RoKXtuLnJ1bGVzPVtdO2Zvcih2YXIgbz0wO288ZS5ydWxlcy5sZW5ndGg7KytvKW4ucnVsZXNbb109cC5nb29nbGUuYXBpLkh0dHBSdWxlLnRvT2JqZWN0KGUucnVsZXNbb10sdCl9cmV0dXJuIG51bGwhPWUuZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbiYmZS5oYXNPd25Qcm9wZXJ0eShcImZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb25cIikmJihuLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb249ZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uKSxufSxnLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sZyksbi5IdHRwUnVsZT0oZi5wcm90b3R5cGUuc2VsZWN0b3I9XCJcIixmLnByb3RvdHlwZS5nZXQ9XCJcIixmLnByb3RvdHlwZS5wdXQ9XCJcIixmLnByb3RvdHlwZS5wb3N0PVwiXCIsZi5wcm90b3R5cGUuZGVsZXRlPVwiXCIsZi5wcm90b3R5cGUucGF0Y2g9XCJcIixmLnByb3RvdHlwZS5jdXN0b209bnVsbCxmLnByb3RvdHlwZS5ib2R5PVwiXCIsZi5wcm90b3R5cGUucmVzcG9uc2VCb2R5PVwiXCIsZi5wcm90b3R5cGUuYWRkaXRpb25hbEJpbmRpbmdzPWkuZW1wdHlBcnJheSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZi5wcm90b3R5cGUsXCJwYXR0ZXJuXCIse2dldDppLm9uZU9mR2V0dGVyKHQ9W1wiZ2V0XCIsXCJwdXRcIixcInBvc3RcIixcImRlbGV0ZVwiLFwicGF0Y2hcIixcImN1c3RvbVwiXSksc2V0Omkub25lT2ZTZXR0ZXIodCl9KSxmLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGYoZSl9LGYuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuc2VsZWN0b3ImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZWxlY3RvclwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLnNlbGVjdG9yKSxudWxsIT1lLmdldCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImdldFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLmdldCksbnVsbCE9ZS5wdXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwdXRcIikmJnQudWludDMyKDI2KS5zdHJpbmcoZS5wdXQpLG51bGwhPWUucG9zdCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBvc3RcIikmJnQudWludDMyKDM0KS5zdHJpbmcoZS5wb3N0KSxudWxsIT1lLmRlbGV0ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlbGV0ZVwiKSYmdC51aW50MzIoNDIpLnN0cmluZyhlLmRlbGV0ZSksbnVsbCE9ZS5wYXRjaCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBhdGNoXCIpJiZ0LnVpbnQzMig1MCkuc3RyaW5nKGUucGF0Y2gpLG51bGwhPWUuYm9keSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImJvZHlcIikmJnQudWludDMyKDU4KS5zdHJpbmcoZS5ib2R5KSxudWxsIT1lLmN1c3RvbSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImN1c3RvbVwiKSYmcC5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLmVuY29kZShlLmN1c3RvbSx0LnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmFkZGl0aW9uYWxCaW5kaW5ncyYmZS5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RoOysrbilwLmdvb2dsZS5hcGkuSHR0cFJ1bGUuZW5jb2RlKGUuYWRkaXRpb25hbEJpbmRpbmdzW25dLHQudWludDMyKDkwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiBudWxsIT1lLnJlc3BvbnNlQm9keSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlc3BvbnNlQm9keVwiKSYmdC51aW50MzIoOTgpLnN0cmluZyhlLnJlc3BvbnNlQm9keSksdH0sZi5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sZi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUuYXBpLkh0dHBSdWxlO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8uc2VsZWN0b3I9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5nZXQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5wdXQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5wb3N0PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA1Om8uZGVsZXRlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA2Om8ucGF0Y2g9ZS5zdHJpbmcoKTticmVhaztjYXNlIDg6by5jdXN0b209cC5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgNzpvLmJvZHk9ZS5zdHJpbmcoKTticmVhaztjYXNlIDEyOm8ucmVzcG9uc2VCb2R5PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMTpvLmFkZGl0aW9uYWxCaW5kaW5ncyYmby5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RofHwoby5hZGRpdGlvbmFsQmluZGluZ3M9W10pLG8uYWRkaXRpb25hbEJpbmRpbmdzLnB1c2gocC5nb29nbGUuYXBpLkh0dHBSdWxlLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGYuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGYudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO3ZhciB0PXt9O2lmKG51bGwhPWUuc2VsZWN0b3ImJmUuaGFzT3duUHJvcGVydHkoXCJzZWxlY3RvclwiKSYmIWkuaXNTdHJpbmcoZS5zZWxlY3RvcikpcmV0dXJuXCJzZWxlY3Rvcjogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5nZXQmJmUuaGFzT3duUHJvcGVydHkoXCJnZXRcIikmJih0LnBhdHRlcm49MSwhaS5pc1N0cmluZyhlLmdldCkpKXJldHVyblwiZ2V0OiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnB1dCYmZS5oYXNPd25Qcm9wZXJ0eShcInB1dFwiKSl7aWYoMT09PXQucGF0dGVybilyZXR1cm5cInBhdHRlcm46IG11bHRpcGxlIHZhbHVlc1wiO2lmKHQucGF0dGVybj0xLCFpLmlzU3RyaW5nKGUucHV0KSlyZXR1cm5cInB1dDogc3RyaW5nIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5wb3N0JiZlLmhhc093blByb3BlcnR5KFwicG9zdFwiKSl7aWYoMT09PXQucGF0dGVybilyZXR1cm5cInBhdHRlcm46IG11bHRpcGxlIHZhbHVlc1wiO2lmKHQucGF0dGVybj0xLCFpLmlzU3RyaW5nKGUucG9zdCkpcmV0dXJuXCJwb3N0OiBzdHJpbmcgZXhwZWN0ZWRcIn1pZihudWxsIT1lLmRlbGV0ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlbGV0ZVwiKSl7aWYoMT09PXQucGF0dGVybilyZXR1cm5cInBhdHRlcm46IG11bHRpcGxlIHZhbHVlc1wiO2lmKHQucGF0dGVybj0xLCFpLmlzU3RyaW5nKGUuZGVsZXRlKSlyZXR1cm5cImRlbGV0ZTogc3RyaW5nIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5wYXRjaCYmZS5oYXNPd25Qcm9wZXJ0eShcInBhdGNoXCIpKXtpZigxPT09dC5wYXR0ZXJuKXJldHVyblwicGF0dGVybjogbXVsdGlwbGUgdmFsdWVzXCI7aWYodC5wYXR0ZXJuPTEsIWkuaXNTdHJpbmcoZS5wYXRjaCkpcmV0dXJuXCJwYXRjaDogc3RyaW5nIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5jdXN0b20mJmUuaGFzT3duUHJvcGVydHkoXCJjdXN0b21cIikpe2lmKDE9PT10LnBhdHRlcm4pcmV0dXJuXCJwYXR0ZXJuOiBtdWx0aXBsZSB2YWx1ZXNcIjtpZih0LnBhdHRlcm49MSxuPXAuZ29vZ2xlLmFwaS5DdXN0b21IdHRwUGF0dGVybi52ZXJpZnkoZS5jdXN0b20pKXJldHVyblwiY3VzdG9tLlwiK259aWYobnVsbCE9ZS5ib2R5JiZlLmhhc093blByb3BlcnR5KFwiYm9keVwiKSYmIWkuaXNTdHJpbmcoZS5ib2R5KSlyZXR1cm5cImJvZHk6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUucmVzcG9uc2VCb2R5JiZlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VCb2R5XCIpJiYhaS5pc1N0cmluZyhlLnJlc3BvbnNlQm9keSkpcmV0dXJuXCJyZXNwb25zZUJvZHk6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuYWRkaXRpb25hbEJpbmRpbmdzJiZlLmhhc093blByb3BlcnR5KFwiYWRkaXRpb25hbEJpbmRpbmdzXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmFkZGl0aW9uYWxCaW5kaW5ncykpcmV0dXJuXCJhZGRpdGlvbmFsQmluZGluZ3M6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciBuLG89MDtvPGUuYWRkaXRpb25hbEJpbmRpbmdzLmxlbmd0aDsrK28paWYobj1wLmdvb2dsZS5hcGkuSHR0cFJ1bGUudmVyaWZ5KGUuYWRkaXRpb25hbEJpbmRpbmdzW29dKSlyZXR1cm5cImFkZGl0aW9uYWxCaW5kaW5ncy5cIitufXJldHVybiBudWxsfSxmLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLmFwaS5IdHRwUnVsZSlyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUuYXBpLkh0dHBSdWxlO2lmKG51bGwhPWUuc2VsZWN0b3ImJih0LnNlbGVjdG9yPVN0cmluZyhlLnNlbGVjdG9yKSksbnVsbCE9ZS5nZXQmJih0LmdldD1TdHJpbmcoZS5nZXQpKSxudWxsIT1lLnB1dCYmKHQucHV0PVN0cmluZyhlLnB1dCkpLG51bGwhPWUucG9zdCYmKHQucG9zdD1TdHJpbmcoZS5wb3N0KSksbnVsbCE9ZS5kZWxldGUmJih0LmRlbGV0ZT1TdHJpbmcoZS5kZWxldGUpKSxudWxsIT1lLnBhdGNoJiYodC5wYXRjaD1TdHJpbmcoZS5wYXRjaCkpLG51bGwhPWUuY3VzdG9tKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5jdXN0b20pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5hcGkuSHR0cFJ1bGUuY3VzdG9tOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5jdXN0b209cC5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLmZyb21PYmplY3QoZS5jdXN0b20pfWlmKG51bGwhPWUuYm9keSYmKHQuYm9keT1TdHJpbmcoZS5ib2R5KSksbnVsbCE9ZS5yZXNwb25zZUJvZHkmJih0LnJlc3BvbnNlQm9keT1TdHJpbmcoZS5yZXNwb25zZUJvZHkpKSxlLmFkZGl0aW9uYWxCaW5kaW5ncyl7aWYoIUFycmF5LmlzQXJyYXkoZS5hZGRpdGlvbmFsQmluZGluZ3MpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuYXBpLkh0dHBSdWxlLmFkZGl0aW9uYWxCaW5kaW5nczogYXJyYXkgZXhwZWN0ZWRcIik7dC5hZGRpdGlvbmFsQmluZGluZ3M9W107Zm9yKHZhciBuPTA7bjxlLmFkZGl0aW9uYWxCaW5kaW5ncy5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5hZGRpdGlvbmFsQmluZGluZ3Nbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5hcGkuSHR0cFJ1bGUuYWRkaXRpb25hbEJpbmRpbmdzOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5hZGRpdGlvbmFsQmluZGluZ3Nbbl09cC5nb29nbGUuYXBpLkh0dHBSdWxlLmZyb21PYmplY3QoZS5hZGRpdGlvbmFsQmluZGluZ3Nbbl0pfX1yZXR1cm4gdH0sZi50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4uYWRkaXRpb25hbEJpbmRpbmdzPVtdKSx0LmRlZmF1bHRzJiYobi5zZWxlY3Rvcj1cIlwiLG4uYm9keT1cIlwiLG4ucmVzcG9uc2VCb2R5PVwiXCIpLG51bGwhPWUuc2VsZWN0b3ImJmUuaGFzT3duUHJvcGVydHkoXCJzZWxlY3RvclwiKSYmKG4uc2VsZWN0b3I9ZS5zZWxlY3RvciksbnVsbCE9ZS5nZXQmJmUuaGFzT3duUHJvcGVydHkoXCJnZXRcIikmJihuLmdldD1lLmdldCx0Lm9uZW9mcykmJihuLnBhdHRlcm49XCJnZXRcIiksbnVsbCE9ZS5wdXQmJmUuaGFzT3duUHJvcGVydHkoXCJwdXRcIikmJihuLnB1dD1lLnB1dCx0Lm9uZW9mcykmJihuLnBhdHRlcm49XCJwdXRcIiksbnVsbCE9ZS5wb3N0JiZlLmhhc093blByb3BlcnR5KFwicG9zdFwiKSYmKG4ucG9zdD1lLnBvc3QsdC5vbmVvZnMpJiYobi5wYXR0ZXJuPVwicG9zdFwiKSxudWxsIT1lLmRlbGV0ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlbGV0ZVwiKSYmKG4uZGVsZXRlPWUuZGVsZXRlLHQub25lb2ZzKSYmKG4ucGF0dGVybj1cImRlbGV0ZVwiKSxudWxsIT1lLnBhdGNoJiZlLmhhc093blByb3BlcnR5KFwicGF0Y2hcIikmJihuLnBhdGNoPWUucGF0Y2gsdC5vbmVvZnMpJiYobi5wYXR0ZXJuPVwicGF0Y2hcIiksbnVsbCE9ZS5ib2R5JiZlLmhhc093blByb3BlcnR5KFwiYm9keVwiKSYmKG4uYm9keT1lLmJvZHkpLG51bGwhPWUuY3VzdG9tJiZlLmhhc093blByb3BlcnR5KFwiY3VzdG9tXCIpJiYobi5jdXN0b209cC5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLnRvT2JqZWN0KGUuY3VzdG9tLHQpLHQub25lb2ZzKSYmKG4ucGF0dGVybj1cImN1c3RvbVwiKSxlLmFkZGl0aW9uYWxCaW5kaW5ncyYmZS5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RoKXtuLmFkZGl0aW9uYWxCaW5kaW5ncz1bXTtmb3IodmFyIG89MDtvPGUuYWRkaXRpb25hbEJpbmRpbmdzLmxlbmd0aDsrK28pbi5hZGRpdGlvbmFsQmluZGluZ3Nbb109cC5nb29nbGUuYXBpLkh0dHBSdWxlLnRvT2JqZWN0KGUuYWRkaXRpb25hbEJpbmRpbmdzW29dLHQpfXJldHVybiBudWxsIT1lLnJlc3BvbnNlQm9keSYmZS5oYXNPd25Qcm9wZXJ0eShcInJlc3BvbnNlQm9keVwiKSYmKG4ucmVzcG9uc2VCb2R5PWUucmVzcG9uc2VCb2R5KSxufSxmLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sZiksbi5DdXN0b21IdHRwUGF0dGVybj0oeS5wcm90b3R5cGUua2luZD1cIlwiLHkucHJvdG90eXBlLnBhdGg9XCJcIix5LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHkoZSl9LHkuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmtpbmQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJraW5kXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUua2luZCksbnVsbCE9ZS5wYXRoJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGF0aFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnBhdGgpLHR9LHkuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LHkuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLmFwaS5DdXN0b21IdHRwUGF0dGVybjtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmtpbmQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5wYXRoPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSx5LmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSx5LnZlcmlmeT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWU/XCJvYmplY3QgZXhwZWN0ZWRcIjpudWxsIT1lLmtpbmQmJmUuaGFzT3duUHJvcGVydHkoXCJraW5kXCIpJiYhaS5pc1N0cmluZyhlLmtpbmQpP1wia2luZDogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbCE9ZS5wYXRoJiZlLmhhc093blByb3BlcnR5KFwicGF0aFwiKSYmIWkuaXNTdHJpbmcoZS5wYXRoKT9cInBhdGg6IHN0cmluZyBleHBlY3RlZFwiOm51bGx9LHkuZnJvbU9iamVjdD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLmFwaS5DdXN0b21IdHRwUGF0dGVybj9lOih0PW5ldyBwLmdvb2dsZS5hcGkuQ3VzdG9tSHR0cFBhdHRlcm4sbnVsbCE9ZS5raW5kJiYodC5raW5kPVN0cmluZyhlLmtpbmQpKSxudWxsIT1lLnBhdGgmJih0LnBhdGg9U3RyaW5nKGUucGF0aCkpLHQpfSx5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuKHQ9dHx8e30pLmRlZmF1bHRzJiYobi5raW5kPVwiXCIsbi5wYXRoPVwiXCIpLG51bGwhPWUua2luZCYmZS5oYXNPd25Qcm9wZXJ0eShcImtpbmRcIikmJihuLmtpbmQ9ZS5raW5kKSxudWxsIT1lLnBhdGgmJmUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpJiYobi5wYXRoPWUucGF0aCksbn0seS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LHkpLG4pLEYucHJvdG9idWY9KCh0PXt9KS5GaWxlRGVzY3JpcHRvclNldD0oSi5wcm90b3R5cGUuZmlsZT1pLmVtcHR5QXJyYXksSi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBKKGUpfSxKLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmZpbGUmJmUuZmlsZS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLmZpbGUubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLmVuY29kZShlLmZpbGVbbl0sdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEouZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEouZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0O2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3I+Pj4zPT0xPyhvLmZpbGUmJm8uZmlsZS5sZW5ndGh8fChvLmZpbGU9W10pLG8uZmlsZS5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LEouZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEoudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuZmlsZSYmZS5oYXNPd25Qcm9wZXJ0eShcImZpbGVcIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZmlsZSkpcmV0dXJuXCJmaWxlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS5maWxlLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUuZmlsZVt0XSk7aWYobilyZXR1cm5cImZpbGUuXCIrbn19cmV0dXJuIG51bGx9LEouZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JTZXQpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0O2lmKGUuZmlsZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5maWxlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0LmZpbGU6IGFycmF5IGV4cGVjdGVkXCIpO3QuZmlsZT1bXTtmb3IodmFyIG49MDtuPGUuZmlsZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5maWxlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JTZXQuZmlsZTogb2JqZWN0IGV4cGVjdGVkXCIpO3QuZmlsZVtuXT1wLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5maWxlW25dKX19cmV0dXJuIHR9LEoudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLmZpbGU9W10pLGUuZmlsZSYmZS5maWxlLmxlbmd0aCl7bi5maWxlPVtdO2Zvcih2YXIgbz0wO288ZS5maWxlLmxlbmd0aDsrK28pbi5maWxlW29dPXAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5maWxlW29dLHQpfXJldHVybiBufSxKLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sSiksdC5GaWxlRGVzY3JpcHRvclByb3RvPShoLnByb3RvdHlwZS5uYW1lPVwiXCIsaC5wcm90b3R5cGUucGFja2FnZT1cIlwiLGgucHJvdG90eXBlLmRlcGVuZGVuY3k9aS5lbXB0eUFycmF5LGgucHJvdG90eXBlLnB1YmxpY0RlcGVuZGVuY3k9aS5lbXB0eUFycmF5LGgucHJvdG90eXBlLndlYWtEZXBlbmRlbmN5PWkuZW1wdHlBcnJheSxoLnByb3RvdHlwZS5tZXNzYWdlVHlwZT1pLmVtcHR5QXJyYXksaC5wcm90b3R5cGUuZW51bVR5cGU9aS5lbXB0eUFycmF5LGgucHJvdG90eXBlLnNlcnZpY2U9aS5lbXB0eUFycmF5LGgucHJvdG90eXBlLmV4dGVuc2lvbj1pLmVtcHR5QXJyYXksaC5wcm90b3R5cGUub3B0aW9ucz1udWxsLGgucHJvdG90eXBlLnNvdXJjZUNvZGVJbmZvPW51bGwsaC5wcm90b3R5cGUuc3ludGF4PVwiXCIsaC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBoKGUpfSxoLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5wYWNrYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGFja2FnZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnBhY2thZ2UpLG51bGwhPWUuZGVwZW5kZW5jeSYmZS5kZXBlbmRlbmN5Lmxlbmd0aClmb3IodmFyIG49MDtuPGUuZGVwZW5kZW5jeS5sZW5ndGg7KytuKXQudWludDMyKDI2KS5zdHJpbmcoZS5kZXBlbmRlbmN5W25dKTtpZihudWxsIT1lLm1lc3NhZ2VUeXBlJiZlLm1lc3NhZ2VUeXBlLmxlbmd0aClmb3Iobj0wO248ZS5tZXNzYWdlVHlwZS5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5lbmNvZGUoZS5tZXNzYWdlVHlwZVtuXSx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtpZihudWxsIT1lLmVudW1UeXBlJiZlLmVudW1UeXBlLmxlbmd0aClmb3Iobj0wO248ZS5lbnVtVHlwZS5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZW5jb2RlKGUuZW51bVR5cGVbbl0sdC51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5zZXJ2aWNlJiZlLnNlcnZpY2UubGVuZ3RoKWZvcihuPTA7bjxlLnNlcnZpY2UubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLmVuY29kZShlLnNlcnZpY2Vbbl0sdC51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5leHRlbnNpb24mJmUuZXh0ZW5zaW9uLmxlbmd0aClmb3Iobj0wO248ZS5leHRlbnNpb24ubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5lbmNvZGUoZS5leHRlbnNpb25bbl0sdC51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmcC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnNvdXJjZUNvZGVJbmZvJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic291cmNlQ29kZUluZm9cIikmJnAuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLmVuY29kZShlLnNvdXJjZUNvZGVJbmZvLHQudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucHVibGljRGVwZW5kZW5jeSYmZS5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aClmb3Iobj0wO248ZS5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aDsrK24pdC51aW50MzIoODApLmludDMyKGUucHVibGljRGVwZW5kZW5jeVtuXSk7aWYobnVsbCE9ZS53ZWFrRGVwZW5kZW5jeSYmZS53ZWFrRGVwZW5kZW5jeS5sZW5ndGgpZm9yKG49MDtuPGUud2Vha0RlcGVuZGVuY3kubGVuZ3RoOysrbil0LnVpbnQzMig4OCkuaW50MzIoZS53ZWFrRGVwZW5kZW5jeVtuXSk7cmV0dXJuIG51bGwhPWUuc3ludGF4JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3ludGF4XCIpJiZ0LnVpbnQzMig5OCkuc3RyaW5nKGUuc3ludGF4KSx0fSxoLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxoLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnBhY2thZ2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5kZXBlbmRlbmN5JiZvLmRlcGVuZGVuY3kubGVuZ3RofHwoby5kZXBlbmRlbmN5PVtdKSxvLmRlcGVuZGVuY3kucHVzaChlLnN0cmluZygpKTticmVhaztjYXNlIDEwOmlmKG8ucHVibGljRGVwZW5kZW5jeSYmby5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aHx8KG8ucHVibGljRGVwZW5kZW5jeT1bXSksMj09KDcmcikpZm9yKHZhciBpPWUudWludDMyKCkrZS5wb3M7ZS5wb3M8aTspby5wdWJsaWNEZXBlbmRlbmN5LnB1c2goZS5pbnQzMigpKTtlbHNlIG8ucHVibGljRGVwZW5kZW5jeS5wdXNoKGUuaW50MzIoKSk7YnJlYWs7Y2FzZSAxMTppZihvLndlYWtEZXBlbmRlbmN5JiZvLndlYWtEZXBlbmRlbmN5Lmxlbmd0aHx8KG8ud2Vha0RlcGVuZGVuY3k9W10pLDI9PSg3JnIpKWZvcihpPWUudWludDMyKCkrZS5wb3M7ZS5wb3M8aTspby53ZWFrRGVwZW5kZW5jeS5wdXNoKGUuaW50MzIoKSk7ZWxzZSBvLndlYWtEZXBlbmRlbmN5LnB1c2goZS5pbnQzMigpKTticmVhaztjYXNlIDQ6by5tZXNzYWdlVHlwZSYmby5tZXNzYWdlVHlwZS5sZW5ndGh8fChvLm1lc3NhZ2VUeXBlPVtdKSxvLm1lc3NhZ2VUeXBlLnB1c2gocC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDU6by5lbnVtVHlwZSYmby5lbnVtVHlwZS5sZW5ndGh8fChvLmVudW1UeXBlPVtdKSxvLmVudW1UeXBlLnB1c2gocC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA2Om8uc2VydmljZSYmby5zZXJ2aWNlLmxlbmd0aHx8KG8uc2VydmljZT1bXSksby5zZXJ2aWNlLnB1c2gocC5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA3Om8uZXh0ZW5zaW9uJiZvLmV4dGVuc2lvbi5sZW5ndGh8fChvLmV4dGVuc2lvbj1bXSksby5leHRlbnNpb24ucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA4Om8ub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDk6by5zb3VyY2VDb2RlSW5mbz1wLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDEyOm8uc3ludGF4PWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxoLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxoLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhaS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5wYWNrYWdlJiZlLmhhc093blByb3BlcnR5KFwicGFja2FnZVwiKSYmIWkuaXNTdHJpbmcoZS5wYWNrYWdlKSlyZXR1cm5cInBhY2thZ2U6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwZW5kZW5jeSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcGVuZGVuY3lcIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZGVwZW5kZW5jeSkpcmV0dXJuXCJkZXBlbmRlbmN5OiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS5kZXBlbmRlbmN5Lmxlbmd0aDsrK3QpaWYoIWkuaXNTdHJpbmcoZS5kZXBlbmRlbmN5W3RdKSlyZXR1cm5cImRlcGVuZGVuY3k6IHN0cmluZ1tdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5wdWJsaWNEZXBlbmRlbmN5JiZlLmhhc093blByb3BlcnR5KFwicHVibGljRGVwZW5kZW5jeVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5wdWJsaWNEZXBlbmRlbmN5KSlyZXR1cm5cInB1YmxpY0RlcGVuZGVuY3k6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGUucHVibGljRGVwZW5kZW5jeS5sZW5ndGg7Kyt0KWlmKCFpLmlzSW50ZWdlcihlLnB1YmxpY0RlcGVuZGVuY3lbdF0pKXJldHVyblwicHVibGljRGVwZW5kZW5jeTogaW50ZWdlcltdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS53ZWFrRGVwZW5kZW5jeSYmZS5oYXNPd25Qcm9wZXJ0eShcIndlYWtEZXBlbmRlbmN5XCIpKXtpZighQXJyYXkuaXNBcnJheShlLndlYWtEZXBlbmRlbmN5KSlyZXR1cm5cIndlYWtEZXBlbmRlbmN5OiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLndlYWtEZXBlbmRlbmN5Lmxlbmd0aDsrK3QpaWYoIWkuaXNJbnRlZ2VyKGUud2Vha0RlcGVuZGVuY3lbdF0pKXJldHVyblwid2Vha0RlcGVuZGVuY3k6IGludGVnZXJbXSBleHBlY3RlZFwifWlmKG51bGwhPWUubWVzc2FnZVR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJtZXNzYWdlVHlwZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5tZXNzYWdlVHlwZSkpcmV0dXJuXCJtZXNzYWdlVHlwZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5tZXNzYWdlVHlwZS5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLm1lc3NhZ2VUeXBlW3RdKSlyZXR1cm5cIm1lc3NhZ2VUeXBlLlwiK259aWYobnVsbCE9ZS5lbnVtVHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImVudW1UeXBlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmVudW1UeXBlKSlyZXR1cm5cImVudW1UeXBlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmVudW1UeXBlLmxlbmd0aDsrK3QpaWYobj1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmVudW1UeXBlW3RdKSlyZXR1cm5cImVudW1UeXBlLlwiK259aWYobnVsbCE9ZS5zZXJ2aWNlJiZlLmhhc093blByb3BlcnR5KFwic2VydmljZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5zZXJ2aWNlKSlyZXR1cm5cInNlcnZpY2U6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGUuc2VydmljZS5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by52ZXJpZnkoZS5zZXJ2aWNlW3RdKSlyZXR1cm5cInNlcnZpY2UuXCIrbn1pZihudWxsIT1lLmV4dGVuc2lvbiYmZS5oYXNPd25Qcm9wZXJ0eShcImV4dGVuc2lvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5leHRlbnNpb24pKXJldHVyblwiZXh0ZW5zaW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmV4dGVuc2lvbi5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUuZXh0ZW5zaW9uW3RdKSlyZXR1cm5cImV4dGVuc2lvbi5cIitufXZhciBuO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuPXAuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLnZlcmlmeShlLm9wdGlvbnMpKSlyZXR1cm5cIm9wdGlvbnMuXCIrbjtpZihudWxsIT1lLnNvdXJjZUNvZGVJbmZvJiZlLmhhc093blByb3BlcnR5KFwic291cmNlQ29kZUluZm9cIikmJihuPXAuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLnZlcmlmeShlLnNvdXJjZUNvZGVJbmZvKSkpcmV0dXJuXCJzb3VyY2VDb2RlSW5mby5cIituO3JldHVybiBudWxsIT1lLnN5bnRheCYmZS5oYXNPd25Qcm9wZXJ0eShcInN5bnRheFwiKSYmIWkuaXNTdHJpbmcoZS5zeW50YXgpP1wic3ludGF4OiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsfSxoLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8pcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG87aWYobnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSxudWxsIT1lLnBhY2thZ2UmJih0LnBhY2thZ2U9U3RyaW5nKGUucGFja2FnZSkpLGUuZGVwZW5kZW5jeSl7aWYoIUFycmF5LmlzQXJyYXkoZS5kZXBlbmRlbmN5KSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uZGVwZW5kZW5jeTogYXJyYXkgZXhwZWN0ZWRcIik7dC5kZXBlbmRlbmN5PVtdO2Zvcih2YXIgbj0wO248ZS5kZXBlbmRlbmN5Lmxlbmd0aDsrK24pdC5kZXBlbmRlbmN5W25dPVN0cmluZyhlLmRlcGVuZGVuY3lbbl0pfWlmKGUucHVibGljRGVwZW5kZW5jeSl7aWYoIUFycmF5LmlzQXJyYXkoZS5wdWJsaWNEZXBlbmRlbmN5KSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8ucHVibGljRGVwZW5kZW5jeTogYXJyYXkgZXhwZWN0ZWRcIik7dC5wdWJsaWNEZXBlbmRlbmN5PVtdO2ZvcihuPTA7bjxlLnB1YmxpY0RlcGVuZGVuY3kubGVuZ3RoOysrbil0LnB1YmxpY0RlcGVuZGVuY3lbbl09MHxlLnB1YmxpY0RlcGVuZGVuY3lbbl19aWYoZS53ZWFrRGVwZW5kZW5jeSl7aWYoIUFycmF5LmlzQXJyYXkoZS53ZWFrRGVwZW5kZW5jeSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLndlYWtEZXBlbmRlbmN5OiBhcnJheSBleHBlY3RlZFwiKTt0LndlYWtEZXBlbmRlbmN5PVtdO2ZvcihuPTA7bjxlLndlYWtEZXBlbmRlbmN5Lmxlbmd0aDsrK24pdC53ZWFrRGVwZW5kZW5jeVtuXT0wfGUud2Vha0RlcGVuZGVuY3lbbl19aWYoZS5tZXNzYWdlVHlwZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5tZXNzYWdlVHlwZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLm1lc3NhZ2VUeXBlOiBhcnJheSBleHBlY3RlZFwiKTt0Lm1lc3NhZ2VUeXBlPVtdO2ZvcihuPTA7bjxlLm1lc3NhZ2VUeXBlLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm1lc3NhZ2VUeXBlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5tZXNzYWdlVHlwZTogb2JqZWN0IGV4cGVjdGVkXCIpO3QubWVzc2FnZVR5cGVbbl09cC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5tZXNzYWdlVHlwZVtuXSl9fWlmKGUuZW51bVR5cGUpe2lmKCFBcnJheS5pc0FycmF5KGUuZW51bVR5cGUpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5lbnVtVHlwZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5lbnVtVHlwZT1bXTtmb3Iobj0wO248ZS5lbnVtVHlwZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5lbnVtVHlwZVtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uZW51bVR5cGU6IG9iamVjdCBleHBlY3RlZFwiKTt0LmVudW1UeXBlW25dPXAuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmVudW1UeXBlW25dKX19aWYoZS5zZXJ2aWNlKXtpZighQXJyYXkuaXNBcnJheShlLnNlcnZpY2UpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5zZXJ2aWNlOiBhcnJheSBleHBlY3RlZFwiKTt0LnNlcnZpY2U9W107Zm9yKG49MDtuPGUuc2VydmljZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5zZXJ2aWNlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5zZXJ2aWNlOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5zZXJ2aWNlW25dPXAuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VEZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLnNlcnZpY2Vbbl0pfX1pZihlLmV4dGVuc2lvbil7aWYoIUFycmF5LmlzQXJyYXkoZS5leHRlbnNpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5leHRlbnNpb246IGFycmF5IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uPVtdO2ZvcihuPTA7bjxlLmV4dGVuc2lvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5leHRlbnNpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLmV4dGVuc2lvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uW25dPXAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5leHRlbnNpb25bbl0pfX1pZihudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuZnJvbU9iamVjdChlLm9wdGlvbnMpfWlmKG51bGwhPWUuc291cmNlQ29kZUluZm8pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnNvdXJjZUNvZGVJbmZvKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5zb3VyY2VDb2RlSW5mbzogb2JqZWN0IGV4cGVjdGVkXCIpO3Quc291cmNlQ29kZUluZm89cC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uZnJvbU9iamVjdChlLnNvdXJjZUNvZGVJbmZvKX1yZXR1cm4gbnVsbCE9ZS5zeW50YXgmJih0LnN5bnRheD1TdHJpbmcoZS5zeW50YXgpKSx0fSxoLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5kZXBlbmRlbmN5PVtdLG4ubWVzc2FnZVR5cGU9W10sbi5lbnVtVHlwZT1bXSxuLnNlcnZpY2U9W10sbi5leHRlbnNpb249W10sbi5wdWJsaWNEZXBlbmRlbmN5PVtdLG4ud2Vha0RlcGVuZGVuY3k9W10pLHQuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLnBhY2thZ2U9XCJcIixuLm9wdGlvbnM9bnVsbCxuLnNvdXJjZUNvZGVJbmZvPW51bGwsbi5zeW50YXg9XCJcIiksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUucGFja2FnZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBhY2thZ2VcIikmJihuLnBhY2thZ2U9ZS5wYWNrYWdlKSxlLmRlcGVuZGVuY3kmJmUuZGVwZW5kZW5jeS5sZW5ndGgpe24uZGVwZW5kZW5jeT1bXTtmb3IodmFyIG89MDtvPGUuZGVwZW5kZW5jeS5sZW5ndGg7KytvKW4uZGVwZW5kZW5jeVtvXT1lLmRlcGVuZGVuY3lbb119aWYoZS5tZXNzYWdlVHlwZSYmZS5tZXNzYWdlVHlwZS5sZW5ndGgpe24ubWVzc2FnZVR5cGU9W107Zm9yKG89MDtvPGUubWVzc2FnZVR5cGUubGVuZ3RoOysrbyluLm1lc3NhZ2VUeXBlW29dPXAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by50b09iamVjdChlLm1lc3NhZ2VUeXBlW29dLHQpfWlmKGUuZW51bVR5cGUmJmUuZW51bVR5cGUubGVuZ3RoKXtuLmVudW1UeXBlPVtdO2ZvcihvPTA7bzxlLmVudW1UeXBlLmxlbmd0aDsrK28pbi5lbnVtVHlwZVtvXT1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUuZW51bVR5cGVbb10sdCl9aWYoZS5zZXJ2aWNlJiZlLnNlcnZpY2UubGVuZ3RoKXtuLnNlcnZpY2U9W107Zm9yKG89MDtvPGUuc2VydmljZS5sZW5ndGg7KytvKW4uc2VydmljZVtvXT1wLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUuc2VydmljZVtvXSx0KX1pZihlLmV4dGVuc2lvbiYmZS5leHRlbnNpb24ubGVuZ3RoKXtuLmV4dGVuc2lvbj1bXTtmb3Iobz0wO288ZS5leHRlbnNpb24ubGVuZ3RoOysrbyluLmV4dGVuc2lvbltvXT1wLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by50b09iamVjdChlLmV4dGVuc2lvbltvXSx0KX1pZihudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbnVsbCE9ZS5zb3VyY2VDb2RlSW5mbyYmZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZUNvZGVJbmZvXCIpJiYobi5zb3VyY2VDb2RlSW5mbz1wLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby50b09iamVjdChlLnNvdXJjZUNvZGVJbmZvLHQpKSxlLnB1YmxpY0RlcGVuZGVuY3kmJmUucHVibGljRGVwZW5kZW5jeS5sZW5ndGgpe24ucHVibGljRGVwZW5kZW5jeT1bXTtmb3Iobz0wO288ZS5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aDsrK28pbi5wdWJsaWNEZXBlbmRlbmN5W29dPWUucHVibGljRGVwZW5kZW5jeVtvXX1pZihlLndlYWtEZXBlbmRlbmN5JiZlLndlYWtEZXBlbmRlbmN5Lmxlbmd0aCl7bi53ZWFrRGVwZW5kZW5jeT1bXTtmb3Iobz0wO288ZS53ZWFrRGVwZW5kZW5jeS5sZW5ndGg7KytvKW4ud2Vha0RlcGVuZGVuY3lbb109ZS53ZWFrRGVwZW5kZW5jeVtvXX1yZXR1cm4gbnVsbCE9ZS5zeW50YXgmJmUuaGFzT3duUHJvcGVydHkoXCJzeW50YXhcIikmJihuLnN5bnRheD1lLnN5bnRheCksbn0saC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LGgpLHQuRGVzY3JpcHRvclByb3RvPShPLnByb3RvdHlwZS5uYW1lPVwiXCIsTy5wcm90b3R5cGUuZmllbGQ9aS5lbXB0eUFycmF5LE8ucHJvdG90eXBlLmV4dGVuc2lvbj1pLmVtcHR5QXJyYXksTy5wcm90b3R5cGUubmVzdGVkVHlwZT1pLmVtcHR5QXJyYXksTy5wcm90b3R5cGUuZW51bVR5cGU9aS5lbXB0eUFycmF5LE8ucHJvdG90eXBlLmV4dGVuc2lvblJhbmdlPWkuZW1wdHlBcnJheSxPLnByb3RvdHlwZS5vbmVvZkRlY2w9aS5lbXB0eUFycmF5LE8ucHJvdG90eXBlLm9wdGlvbnM9bnVsbCxPLnByb3RvdHlwZS5yZXNlcnZlZFJhbmdlPWkuZW1wdHlBcnJheSxPLnByb3RvdHlwZS5yZXNlcnZlZE5hbWU9aS5lbXB0eUFycmF5LE8uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTyhlKX0sTy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLG51bGwhPWUuZmllbGQmJmUuZmllbGQubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5maWVsZC5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLmVuY29kZShlLmZpZWxkW25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUubmVzdGVkVHlwZSYmZS5uZXN0ZWRUeXBlLmxlbmd0aClmb3Iobj0wO248ZS5uZXN0ZWRUeXBlLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmVuY29kZShlLm5lc3RlZFR5cGVbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5lbnVtVHlwZSYmZS5lbnVtVHlwZS5sZW5ndGgpZm9yKG49MDtuPGUuZW51bVR5cGUubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLmVuY29kZShlLmVudW1UeXBlW25dLHQudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUuZXh0ZW5zaW9uUmFuZ2UmJmUuZXh0ZW5zaW9uUmFuZ2UubGVuZ3RoKWZvcihuPTA7bjxlLmV4dGVuc2lvblJhbmdlLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlLmVuY29kZShlLmV4dGVuc2lvblJhbmdlW25dLHQudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUuZXh0ZW5zaW9uJiZlLmV4dGVuc2lvbi5sZW5ndGgpZm9yKG49MDtuPGUuZXh0ZW5zaW9uLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZW5jb2RlKGUuZXh0ZW5zaW9uW25dLHQudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUub3B0aW9ucyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm9wdGlvbnNcIikmJnAuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLmVuY29kZShlLm9wdGlvbnMsdC51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5vbmVvZkRlY2wmJmUub25lb2ZEZWNsLmxlbmd0aClmb3Iobj0wO248ZS5vbmVvZkRlY2wubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5lbmNvZGUoZS5vbmVvZkRlY2xbbl0sdC51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5yZXNlcnZlZFJhbmdlJiZlLnJlc2VydmVkUmFuZ2UubGVuZ3RoKWZvcihuPTA7bjxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZS5lbmNvZGUoZS5yZXNlcnZlZFJhbmdlW25dLHQudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUucmVzZXJ2ZWROYW1lJiZlLnJlc2VydmVkTmFtZS5sZW5ndGgpZm9yKG49MDtuPGUucmVzZXJ2ZWROYW1lLmxlbmd0aDsrK24pdC51aW50MzIoODIpLnN0cmluZyhlLnJlc2VydmVkTmFtZVtuXSk7cmV0dXJuIHR9LE8uZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LE8uZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90bztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLm5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5maWVsZCYmby5maWVsZC5sZW5ndGh8fChvLmZpZWxkPVtdKSxvLmZpZWxkLnB1c2gocC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNjpvLmV4dGVuc2lvbiYmby5leHRlbnNpb24ubGVuZ3RofHwoby5leHRlbnNpb249W10pLG8uZXh0ZW5zaW9uLnB1c2gocC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMzpvLm5lc3RlZFR5cGUmJm8ubmVzdGVkVHlwZS5sZW5ndGh8fChvLm5lc3RlZFR5cGU9W10pLG8ubmVzdGVkVHlwZS5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA0Om8uZW51bVR5cGUmJm8uZW51bVR5cGUubGVuZ3RofHwoby5lbnVtVHlwZT1bXSksby5lbnVtVHlwZS5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNTpvLmV4dGVuc2lvblJhbmdlJiZvLmV4dGVuc2lvblJhbmdlLmxlbmd0aHx8KG8uZXh0ZW5zaW9uUmFuZ2U9W10pLG8uZXh0ZW5zaW9uUmFuZ2UucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2UuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgODpvLm9uZW9mRGVjbCYmby5vbmVvZkRlY2wubGVuZ3RofHwoby5vbmVvZkRlY2w9W10pLG8ub25lb2ZEZWNsLnB1c2gocC5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNzpvLm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA5Om8ucmVzZXJ2ZWRSYW5nZSYmby5yZXNlcnZlZFJhbmdlLmxlbmd0aHx8KG8ucmVzZXJ2ZWRSYW5nZT1bXSksby5yZXNlcnZlZFJhbmdlLnB1c2gocC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTA6by5yZXNlcnZlZE5hbWUmJm8ucmVzZXJ2ZWROYW1lLmxlbmd0aHx8KG8ucmVzZXJ2ZWROYW1lPVtdKSxvLnJlc2VydmVkTmFtZS5wdXNoKGUuc3RyaW5nKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sTy5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sTy52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmIWkuaXNTdHJpbmcoZS5uYW1lKSlyZXR1cm5cIm5hbWU6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuZmllbGQmJmUuaGFzT3duUHJvcGVydHkoXCJmaWVsZFwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5maWVsZCkpcmV0dXJuXCJmaWVsZDogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUuZmllbGQubGVuZ3RoOysrdClpZihuPXAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmZpZWxkW3RdKSlyZXR1cm5cImZpZWxkLlwiK259aWYobnVsbCE9ZS5leHRlbnNpb24mJmUuaGFzT3duUHJvcGVydHkoXCJleHRlbnNpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZXh0ZW5zaW9uKSlyZXR1cm5cImV4dGVuc2lvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5leHRlbnNpb24ubGVuZ3RoOysrdClpZihuPXAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmV4dGVuc2lvblt0XSkpcmV0dXJuXCJleHRlbnNpb24uXCIrbn1pZihudWxsIT1lLm5lc3RlZFR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJuZXN0ZWRUeXBlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm5lc3RlZFR5cGUpKXJldHVyblwibmVzdGVkVHlwZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5uZXN0ZWRUeXBlLmxlbmd0aDsrK3QpaWYobj1wLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUubmVzdGVkVHlwZVt0XSkpcmV0dXJuXCJuZXN0ZWRUeXBlLlwiK259aWYobnVsbCE9ZS5lbnVtVHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImVudW1UeXBlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmVudW1UeXBlKSlyZXR1cm5cImVudW1UeXBlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmVudW1UeXBlLmxlbmd0aDsrK3QpaWYobj1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmVudW1UeXBlW3RdKSlyZXR1cm5cImVudW1UeXBlLlwiK259aWYobnVsbCE9ZS5leHRlbnNpb25SYW5nZSYmZS5oYXNPd25Qcm9wZXJ0eShcImV4dGVuc2lvblJhbmdlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmV4dGVuc2lvblJhbmdlKSlyZXR1cm5cImV4dGVuc2lvblJhbmdlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmV4dGVuc2lvblJhbmdlLmxlbmd0aDsrK3QpaWYobj1wLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2UudmVyaWZ5KGUuZXh0ZW5zaW9uUmFuZ2VbdF0pKXJldHVyblwiZXh0ZW5zaW9uUmFuZ2UuXCIrbn1pZihudWxsIT1lLm9uZW9mRGVjbCYmZS5oYXNPd25Qcm9wZXJ0eShcIm9uZW9mRGVjbFwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5vbmVvZkRlY2wpKXJldHVyblwib25lb2ZEZWNsOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLm9uZW9mRGVjbC5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUub25lb2ZEZWNsW3RdKSlyZXR1cm5cIm9uZW9mRGVjbC5cIitufWlmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuPXAuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLnZlcmlmeShlLm9wdGlvbnMpKSlyZXR1cm5cIm9wdGlvbnMuXCIrbjtpZihudWxsIT1lLnJlc2VydmVkUmFuZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJyZXNlcnZlZFJhbmdlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnJlc2VydmVkUmFuZ2UpKXJldHVyblwicmVzZXJ2ZWRSYW5nZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIG4sdD0wO3Q8ZS5yZXNlcnZlZFJhbmdlLmxlbmd0aDsrK3QpaWYobj1wLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZS52ZXJpZnkoZS5yZXNlcnZlZFJhbmdlW3RdKSlyZXR1cm5cInJlc2VydmVkUmFuZ2UuXCIrbn1pZihudWxsIT1lLnJlc2VydmVkTmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcInJlc2VydmVkTmFtZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZE5hbWUpKXJldHVyblwicmVzZXJ2ZWROYW1lOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLnJlc2VydmVkTmFtZS5sZW5ndGg7Kyt0KWlmKCFpLmlzU3RyaW5nKGUucmVzZXJ2ZWROYW1lW3RdKSlyZXR1cm5cInJlc2VydmVkTmFtZTogc3RyaW5nW10gZXhwZWN0ZWRcIn1yZXR1cm4gbnVsbH0sTy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8pcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90bztpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLGUuZmllbGQpe2lmKCFBcnJheS5pc0FycmF5KGUuZmllbGQpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmZpZWxkOiBhcnJheSBleHBlY3RlZFwiKTt0LmZpZWxkPVtdO2Zvcih2YXIgbj0wO248ZS5maWVsZC5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5maWVsZFtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5maWVsZDogb2JqZWN0IGV4cGVjdGVkXCIpO3QuZmllbGRbbl09cC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmZpZWxkW25dKX19aWYoZS5leHRlbnNpb24pe2lmKCFBcnJheS5pc0FycmF5KGUuZXh0ZW5zaW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5leHRlbnNpb246IGFycmF5IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uPVtdO2ZvcihuPTA7bjxlLmV4dGVuc2lvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5leHRlbnNpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZXh0ZW5zaW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5leHRlbnNpb25bbl09cC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmV4dGVuc2lvbltuXSl9fWlmKGUubmVzdGVkVHlwZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5uZXN0ZWRUeXBlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5uZXN0ZWRUeXBlOiBhcnJheSBleHBlY3RlZFwiKTt0Lm5lc3RlZFR5cGU9W107Zm9yKG49MDtuPGUubmVzdGVkVHlwZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5uZXN0ZWRUeXBlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLm5lc3RlZFR5cGU6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm5lc3RlZFR5cGVbbl09cC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5uZXN0ZWRUeXBlW25dKX19aWYoZS5lbnVtVHlwZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5lbnVtVHlwZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZW51bVR5cGU6IGFycmF5IGV4cGVjdGVkXCIpO3QuZW51bVR5cGU9W107Zm9yKG49MDtuPGUuZW51bVR5cGUubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuZW51bVR5cGVbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZW51bVR5cGU6IG9iamVjdCBleHBlY3RlZFwiKTt0LmVudW1UeXBlW25dPXAuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmVudW1UeXBlW25dKX19aWYoZS5leHRlbnNpb25SYW5nZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5leHRlbnNpb25SYW5nZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZXh0ZW5zaW9uUmFuZ2U6IGFycmF5IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uUmFuZ2U9W107Zm9yKG49MDtuPGUuZXh0ZW5zaW9uUmFuZ2UubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuZXh0ZW5zaW9uUmFuZ2Vbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZXh0ZW5zaW9uUmFuZ2U6IG9iamVjdCBleHBlY3RlZFwiKTt0LmV4dGVuc2lvblJhbmdlW25dPXAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZS5mcm9tT2JqZWN0KGUuZXh0ZW5zaW9uUmFuZ2Vbbl0pfX1pZihlLm9uZW9mRGVjbCl7aWYoIUFycmF5LmlzQXJyYXkoZS5vbmVvZkRlY2wpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLm9uZW9mRGVjbDogYXJyYXkgZXhwZWN0ZWRcIik7dC5vbmVvZkRlY2w9W107Zm9yKG49MDtuPGUub25lb2ZEZWNsLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9uZW9mRGVjbFtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5vbmVvZkRlY2w6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9uZW9mRGVjbFtuXT1wLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5mcm9tT2JqZWN0KGUub25lb2ZEZWNsW25dKX19aWYobnVsbCE9ZS5vcHRpb25zKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5vcHRpb25zKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMuZnJvbU9iamVjdChlLm9wdGlvbnMpfWlmKGUucmVzZXJ2ZWRSYW5nZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZFJhbmdlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5yZXNlcnZlZFJhbmdlOiBhcnJheSBleHBlY3RlZFwiKTt0LnJlc2VydmVkUmFuZ2U9W107Zm9yKG49MDtuPGUucmVzZXJ2ZWRSYW5nZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5yZXNlcnZlZFJhbmdlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLnJlc2VydmVkUmFuZ2U6IG9iamVjdCBleHBlY3RlZFwiKTt0LnJlc2VydmVkUmFuZ2Vbbl09cC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UuZnJvbU9iamVjdChlLnJlc2VydmVkUmFuZ2Vbbl0pfX1pZihlLnJlc2VydmVkTmFtZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZE5hbWUpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLnJlc2VydmVkTmFtZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5yZXNlcnZlZE5hbWU9W107Zm9yKG49MDtuPGUucmVzZXJ2ZWROYW1lLmxlbmd0aDsrK24pdC5yZXNlcnZlZE5hbWVbbl09U3RyaW5nKGUucmVzZXJ2ZWROYW1lW25dKX1yZXR1cm4gdH0sTy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4uZmllbGQ9W10sbi5uZXN0ZWRUeXBlPVtdLG4uZW51bVR5cGU9W10sbi5leHRlbnNpb25SYW5nZT1bXSxuLmV4dGVuc2lvbj1bXSxuLm9uZW9mRGVjbD1bXSxuLnJlc2VydmVkUmFuZ2U9W10sbi5yZXNlcnZlZE5hbWU9W10pLHQuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLGUuZmllbGQmJmUuZmllbGQubGVuZ3RoKXtuLmZpZWxkPVtdO2Zvcih2YXIgbz0wO288ZS5maWVsZC5sZW5ndGg7KytvKW4uZmllbGRbb109cC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5maWVsZFtvXSx0KX1pZihlLm5lc3RlZFR5cGUmJmUubmVzdGVkVHlwZS5sZW5ndGgpe24ubmVzdGVkVHlwZT1bXTtmb3Iobz0wO288ZS5uZXN0ZWRUeXBlLmxlbmd0aDsrK28pbi5uZXN0ZWRUeXBlW29dPXAuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by50b09iamVjdChlLm5lc3RlZFR5cGVbb10sdCl9aWYoZS5lbnVtVHlwZSYmZS5lbnVtVHlwZS5sZW5ndGgpe24uZW51bVR5cGU9W107Zm9yKG89MDtvPGUuZW51bVR5cGUubGVuZ3RoOysrbyluLmVudW1UeXBlW29dPXAuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5lbnVtVHlwZVtvXSx0KX1pZihlLmV4dGVuc2lvblJhbmdlJiZlLmV4dGVuc2lvblJhbmdlLmxlbmd0aCl7bi5leHRlbnNpb25SYW5nZT1bXTtmb3Iobz0wO288ZS5leHRlbnNpb25SYW5nZS5sZW5ndGg7KytvKW4uZXh0ZW5zaW9uUmFuZ2Vbb109cC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlLnRvT2JqZWN0KGUuZXh0ZW5zaW9uUmFuZ2Vbb10sdCl9aWYoZS5leHRlbnNpb24mJmUuZXh0ZW5zaW9uLmxlbmd0aCl7bi5leHRlbnNpb249W107Zm9yKG89MDtvPGUuZXh0ZW5zaW9uLmxlbmd0aDsrK28pbi5leHRlbnNpb25bb109cC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5leHRlbnNpb25bb10sdCl9aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSYmKG4ub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5NZXNzYWdlT3B0aW9ucy50b09iamVjdChlLm9wdGlvbnMsdCkpLGUub25lb2ZEZWNsJiZlLm9uZW9mRGVjbC5sZW5ndGgpe24ub25lb2ZEZWNsPVtdO2ZvcihvPTA7bzxlLm9uZW9mRGVjbC5sZW5ndGg7KytvKW4ub25lb2ZEZWNsW29dPXAuZ29vZ2xlLnByb3RvYnVmLk9uZW9mRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUub25lb2ZEZWNsW29dLHQpfWlmKGUucmVzZXJ2ZWRSYW5nZSYmZS5yZXNlcnZlZFJhbmdlLmxlbmd0aCl7bi5yZXNlcnZlZFJhbmdlPVtdO2ZvcihvPTA7bzxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbyluLnJlc2VydmVkUmFuZ2Vbb109cC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UudG9PYmplY3QoZS5yZXNlcnZlZFJhbmdlW29dLHQpfWlmKGUucmVzZXJ2ZWROYW1lJiZlLnJlc2VydmVkTmFtZS5sZW5ndGgpe24ucmVzZXJ2ZWROYW1lPVtdO2ZvcihvPTA7bzxlLnJlc2VydmVkTmFtZS5sZW5ndGg7KytvKW4ucmVzZXJ2ZWROYW1lW29dPWUucmVzZXJ2ZWROYW1lW29dfXJldHVybiBufSxPLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sTy5FeHRlbnNpb25SYW5nZT0oYi5wcm90b3R5cGUuc3RhcnQ9MCxiLnByb3RvdHlwZS5lbmQ9MCxiLnByb3RvdHlwZS5vcHRpb25zPW51bGwsYi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBiKGUpfSxiLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5zdGFydCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0YXJ0XCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLnN0YXJ0KSxudWxsIT1lLmVuZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImVuZFwiKSYmdC51aW50MzIoMTYpLmludDMyKGUuZW5kKSxudWxsIT1lLm9wdGlvbnMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJvcHRpb25zXCIpJiZwLmdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSx0fSxiLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxiLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2U7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5zdGFydD1lLmludDMyKCk7YnJlYWs7Y2FzZSAyOm8uZW5kPWUuaW50MzIoKTticmVhaztjYXNlIDM6by5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGIuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGIudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuc3RhcnQmJmUuaGFzT3duUHJvcGVydHkoXCJzdGFydFwiKSYmIWkuaXNJbnRlZ2VyKGUuc3RhcnQpKXJldHVyblwic3RhcnQ6IGludGVnZXIgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmVuZCYmZS5oYXNPd25Qcm9wZXJ0eShcImVuZFwiKSYmIWkuaXNJbnRlZ2VyKGUuZW5kKSlyZXR1cm5cImVuZDogaW50ZWdlciBleHBlY3RlZFwiO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikpe2U9cC5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLnZlcmlmeShlLm9wdGlvbnMpO2lmKGUpcmV0dXJuXCJvcHRpb25zLlwiK2V9cmV0dXJuIG51bGx9LGIuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2U7aWYobnVsbCE9ZS5zdGFydCYmKHQuc3RhcnQ9MHxlLnN0YXJ0KSxudWxsIT1lLmVuZCYmKHQuZW5kPTB8ZS5lbmQpLG51bGwhPWUub3B0aW9ucyl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUub3B0aW9ucyl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZS5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5mcm9tT2JqZWN0KGUub3B0aW9ucyl9cmV0dXJuIHR9LGIudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLnN0YXJ0PTAsbi5lbmQ9MCxuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5zdGFydCYmZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0XCIpJiYobi5zdGFydD1lLnN0YXJ0KSxudWxsIT1lLmVuZCYmZS5oYXNPd25Qcm9wZXJ0eShcImVuZFwiKSYmKG4uZW5kPWUuZW5kKSxudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy50b09iamVjdChlLm9wdGlvbnMsdCkpLG59LGIucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxiKSxPLlJlc2VydmVkUmFuZ2U9KG0ucHJvdG90eXBlLnN0YXJ0PTAsbS5wcm90b3R5cGUuZW5kPTAsbS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBtKGUpfSxtLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5zdGFydCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0YXJ0XCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLnN0YXJ0KSxudWxsIT1lLmVuZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImVuZFwiKSYmdC51aW50MzIoMTYpLmludDMyKGUuZW5kKSx0fSxtLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxtLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZTtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLnN0YXJ0PWUuaW50MzIoKTticmVhaztjYXNlIDI6by5lbmQ9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sbS5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sbS52ZXJpZnk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lP1wib2JqZWN0IGV4cGVjdGVkXCI6bnVsbCE9ZS5zdGFydCYmZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0XCIpJiYhaS5pc0ludGVnZXIoZS5zdGFydCk/XCJzdGFydDogaW50ZWdlciBleHBlY3RlZFwiOm51bGwhPWUuZW5kJiZlLmhhc093blByb3BlcnR5KFwiZW5kXCIpJiYhaS5pc0ludGVnZXIoZS5lbmQpP1wiZW5kOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbH0sbS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2U/ZToodD1uZXcgcC5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UsbnVsbCE9ZS5zdGFydCYmKHQuc3RhcnQ9MHxlLnN0YXJ0KSxudWxsIT1lLmVuZCYmKHQuZW5kPTB8ZS5lbmQpLHQpfSxtLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuKHQ9dHx8e30pLmRlZmF1bHRzJiYobi5zdGFydD0wLG4uZW5kPTApLG51bGwhPWUuc3RhcnQmJmUuaGFzT3duUHJvcGVydHkoXCJzdGFydFwiKSYmKG4uc3RhcnQ9ZS5zdGFydCksbnVsbCE9ZS5lbmQmJmUuaGFzT3duUHJvcGVydHkoXCJlbmRcIikmJihuLmVuZD1lLmVuZCksbn0sbS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LG0pLE8pLHQuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zPShNLnByb3RvdHlwZS51bmludGVycHJldGVkT3B0aW9uPWkuZW1wdHlBcnJheSxNLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IE0oZSl9LE0uZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aClmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZW5jb2RlKGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSx0LnVpbnQzMig3OTk0KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxNLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxNLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnM7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7cj4+PjM9PTk5OT8oby51bmludGVycHJldGVkT3B0aW9uJiZvLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RofHwoby51bmludGVycHJldGVkT3B0aW9uPVtdKSxvLnVuaW50ZXJwcmV0ZWRPcHRpb24ucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmRlY29kZShlLGUudWludDMyKCkpKSk6ZS5za2lwVHlwZSg3JnIpfXJldHVybiBvfSxNLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxNLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJ1bmludGVycHJldGVkT3B0aW9uXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXJldHVyblwidW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7Kyt0KXt2YXIgbj1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnZlcmlmeShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bdF0pO2lmKG4pcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uLlwiK259fXJldHVybiBudWxsfSxNLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucylyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zO2lmKGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1yZXR1cm4gdH0sTS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LE0ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxNKSx0LkZpZWxkRGVzY3JpcHRvclByb3RvPSh2LnByb3RvdHlwZS5uYW1lPVwiXCIsdi5wcm90b3R5cGUubnVtYmVyPTAsdi5wcm90b3R5cGUubGFiZWw9MSx2LnByb3RvdHlwZS50eXBlPTEsdi5wcm90b3R5cGUudHlwZU5hbWU9XCJcIix2LnByb3RvdHlwZS5leHRlbmRlZT1cIlwiLHYucHJvdG90eXBlLmRlZmF1bHRWYWx1ZT1cIlwiLHYucHJvdG90eXBlLm9uZW9mSW5kZXg9MCx2LnByb3RvdHlwZS5qc29uTmFtZT1cIlwiLHYucHJvdG90eXBlLm9wdGlvbnM9bnVsbCx2LnByb3RvdHlwZS5wcm90bzNPcHRpb25hbD0hMSx2LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHYoZSl9LHYuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5leHRlbmRlZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImV4dGVuZGVlXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUuZXh0ZW5kZWUpLG51bGwhPWUubnVtYmVyJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibnVtYmVyXCIpJiZ0LnVpbnQzMigyNCkuaW50MzIoZS5udW1iZXIpLG51bGwhPWUubGFiZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsYWJlbFwiKSYmdC51aW50MzIoMzIpLmludDMyKGUubGFiZWwpLG51bGwhPWUudHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR5cGVcIikmJnQudWludDMyKDQwKS5pbnQzMihlLnR5cGUpLG51bGwhPWUudHlwZU5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eXBlTmFtZVwiKSYmdC51aW50MzIoNTApLnN0cmluZyhlLnR5cGVOYW1lKSxudWxsIT1lLmRlZmF1bHRWYWx1ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlZmF1bHRWYWx1ZVwiKSYmdC51aW50MzIoNTgpLnN0cmluZyhlLmRlZmF1bHRWYWx1ZSksbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmcC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLmVuY29kZShlLm9wdGlvbnMsdC51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5vbmVvZkluZGV4JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib25lb2ZJbmRleFwiKSYmdC51aW50MzIoNzIpLmludDMyKGUub25lb2ZJbmRleCksbnVsbCE9ZS5qc29uTmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImpzb25OYW1lXCIpJiZ0LnVpbnQzMig4Mikuc3RyaW5nKGUuanNvbk5hbWUpLG51bGwhPWUucHJvdG8zT3B0aW9uYWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwcm90bzNPcHRpb25hbFwiKSYmdC51aW50MzIoMTM2KS5ib29sKGUucHJvdG8zT3B0aW9uYWwpLHR9LHYuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LHYuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLm51bWJlcj1lLmludDMyKCk7YnJlYWs7Y2FzZSA0Om8ubGFiZWw9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNTpvLnR5cGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNjpvLnR5cGVOYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8uZXh0ZW5kZWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDc6by5kZWZhdWx0VmFsdWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDk6by5vbmVvZkluZGV4PWUuaW50MzIoKTticmVhaztjYXNlIDEwOm8uanNvbk5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDg6by5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDE3Om8ucHJvdG8zT3B0aW9uYWw9ZS5ib29sKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSx2LmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSx2LnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhaS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5udW1iZXImJmUuaGFzT3duUHJvcGVydHkoXCJudW1iZXJcIikmJiFpLmlzSW50ZWdlcihlLm51bWJlcikpcmV0dXJuXCJudW1iZXI6IGludGVnZXIgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmxhYmVsJiZlLmhhc093blByb3BlcnR5KFwibGFiZWxcIikpc3dpdGNoKGUubGFiZWwpe2RlZmF1bHQ6cmV0dXJuXCJsYWJlbDogZW51bSB2YWx1ZSBleHBlY3RlZFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOn1pZihudWxsIT1lLnR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKXN3aXRjaChlLnR5cGUpe2RlZmF1bHQ6cmV0dXJuXCJ0eXBlOiBlbnVtIHZhbHVlIGV4cGVjdGVkXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpjYXNlIDY6Y2FzZSA3OmNhc2UgODpjYXNlIDk6Y2FzZSAxMDpjYXNlIDExOmNhc2UgMTI6Y2FzZSAxMzpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAxNjpjYXNlIDE3OmNhc2UgMTg6fWlmKG51bGwhPWUudHlwZU5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlTmFtZVwiKSYmIWkuaXNTdHJpbmcoZS50eXBlTmFtZSkpcmV0dXJuXCJ0eXBlTmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5leHRlbmRlZSYmZS5oYXNPd25Qcm9wZXJ0eShcImV4dGVuZGVlXCIpJiYhaS5pc1N0cmluZyhlLmV4dGVuZGVlKSlyZXR1cm5cImV4dGVuZGVlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmRlZmF1bHRWYWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmIWkuaXNTdHJpbmcoZS5kZWZhdWx0VmFsdWUpKXJldHVyblwiZGVmYXVsdFZhbHVlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm9uZW9mSW5kZXgmJmUuaGFzT3duUHJvcGVydHkoXCJvbmVvZkluZGV4XCIpJiYhaS5pc0ludGVnZXIoZS5vbmVvZkluZGV4KSlyZXR1cm5cIm9uZW9mSW5kZXg6IGludGVnZXIgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmpzb25OYW1lJiZlLmhhc093blByb3BlcnR5KFwianNvbk5hbWVcIikmJiFpLmlzU3RyaW5nKGUuanNvbk5hbWUpKXJldHVyblwianNvbk5hbWU6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikpe3ZhciB0PXAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKTtpZih0KXJldHVyblwib3B0aW9ucy5cIit0fXJldHVybiBudWxsIT1lLnByb3RvM09wdGlvbmFsJiZlLmhhc093blByb3BlcnR5KFwicHJvdG8zT3B0aW9uYWxcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5wcm90bzNPcHRpb25hbD9cInByb3RvM09wdGlvbmFsOiBib29sZWFuIGV4cGVjdGVkXCI6bnVsbH0sdi5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG87c3dpdGNoKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksbnVsbCE9ZS5udW1iZXImJih0Lm51bWJlcj0wfGUubnVtYmVyKSxlLmxhYmVsKXtjYXNlXCJMQUJFTF9PUFRJT05BTFwiOmNhc2UgMTp0LmxhYmVsPTE7YnJlYWs7Y2FzZVwiTEFCRUxfUkVRVUlSRURcIjpjYXNlIDI6dC5sYWJlbD0yO2JyZWFrO2Nhc2VcIkxBQkVMX1JFUEVBVEVEXCI6Y2FzZSAzOnQubGFiZWw9M31zd2l0Y2goZS50eXBlKXtjYXNlXCJUWVBFX0RPVUJMRVwiOmNhc2UgMTp0LnR5cGU9MTticmVhaztjYXNlXCJUWVBFX0ZMT0FUXCI6Y2FzZSAyOnQudHlwZT0yO2JyZWFrO2Nhc2VcIlRZUEVfSU5UNjRcIjpjYXNlIDM6dC50eXBlPTM7YnJlYWs7Y2FzZVwiVFlQRV9VSU5UNjRcIjpjYXNlIDQ6dC50eXBlPTQ7YnJlYWs7Y2FzZVwiVFlQRV9JTlQzMlwiOmNhc2UgNTp0LnR5cGU9NTticmVhaztjYXNlXCJUWVBFX0ZJWEVENjRcIjpjYXNlIDY6dC50eXBlPTY7YnJlYWs7Y2FzZVwiVFlQRV9GSVhFRDMyXCI6Y2FzZSA3OnQudHlwZT03O2JyZWFrO2Nhc2VcIlRZUEVfQk9PTFwiOmNhc2UgODp0LnR5cGU9ODticmVhaztjYXNlXCJUWVBFX1NUUklOR1wiOmNhc2UgOTp0LnR5cGU9OTticmVhaztjYXNlXCJUWVBFX0dST1VQXCI6Y2FzZSAxMDp0LnR5cGU9MTA7YnJlYWs7Y2FzZVwiVFlQRV9NRVNTQUdFXCI6Y2FzZSAxMTp0LnR5cGU9MTE7YnJlYWs7Y2FzZVwiVFlQRV9CWVRFU1wiOmNhc2UgMTI6dC50eXBlPTEyO2JyZWFrO2Nhc2VcIlRZUEVfVUlOVDMyXCI6Y2FzZSAxMzp0LnR5cGU9MTM7YnJlYWs7Y2FzZVwiVFlQRV9FTlVNXCI6Y2FzZSAxNDp0LnR5cGU9MTQ7YnJlYWs7Y2FzZVwiVFlQRV9TRklYRUQzMlwiOmNhc2UgMTU6dC50eXBlPTE1O2JyZWFrO2Nhc2VcIlRZUEVfU0ZJWEVENjRcIjpjYXNlIDE2OnQudHlwZT0xNjticmVhaztjYXNlXCJUWVBFX1NJTlQzMlwiOmNhc2UgMTc6dC50eXBlPTE3O2JyZWFrO2Nhc2VcIlRZUEVfU0lOVDY0XCI6Y2FzZSAxODp0LnR5cGU9MTh9aWYobnVsbCE9ZS50eXBlTmFtZSYmKHQudHlwZU5hbWU9U3RyaW5nKGUudHlwZU5hbWUpKSxudWxsIT1lLmV4dGVuZGVlJiYodC5leHRlbmRlZT1TdHJpbmcoZS5leHRlbmRlZSkpLG51bGwhPWUuZGVmYXVsdFZhbHVlJiYodC5kZWZhdWx0VmFsdWU9U3RyaW5nKGUuZGVmYXVsdFZhbHVlKSksbnVsbCE9ZS5vbmVvZkluZGV4JiYodC5vbmVvZkluZGV4PTB8ZS5vbmVvZkluZGV4KSxudWxsIT1lLmpzb25OYW1lJiYodC5qc29uTmFtZT1TdHJpbmcoZS5qc29uTmFtZSkpLG51bGwhPWUub3B0aW9ucyl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUub3B0aW9ucyl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gbnVsbCE9ZS5wcm90bzNPcHRpb25hbCYmKHQucHJvdG8zT3B0aW9uYWw9Qm9vbGVhbihlLnByb3RvM09wdGlvbmFsKSksdH0sdi50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4uZXh0ZW5kZWU9XCJcIixuLm51bWJlcj0wLG4ubGFiZWw9dC5lbnVtcz09PVN0cmluZz9cIkxBQkVMX09QVElPTkFMXCI6MSxuLnR5cGU9dC5lbnVtcz09PVN0cmluZz9cIlRZUEVfRE9VQkxFXCI6MSxuLnR5cGVOYW1lPVwiXCIsbi5kZWZhdWx0VmFsdWU9XCJcIixuLm9wdGlvbnM9bnVsbCxuLm9uZW9mSW5kZXg9MCxuLmpzb25OYW1lPVwiXCIsbi5wcm90bzNPcHRpb25hbD0hMSksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUuZXh0ZW5kZWUmJmUuaGFzT3duUHJvcGVydHkoXCJleHRlbmRlZVwiKSYmKG4uZXh0ZW5kZWU9ZS5leHRlbmRlZSksbnVsbCE9ZS5udW1iZXImJmUuaGFzT3duUHJvcGVydHkoXCJudW1iZXJcIikmJihuLm51bWJlcj1lLm51bWJlciksbnVsbCE9ZS5sYWJlbCYmZS5oYXNPd25Qcm9wZXJ0eShcImxhYmVsXCIpJiYobi5sYWJlbD10LmVudW1zPT09U3RyaW5nP3AuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsW2UubGFiZWxdOmUubGFiZWwpLG51bGwhPWUudHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcInR5cGVcIikmJihuLnR5cGU9dC5lbnVtcz09PVN0cmluZz9wLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlW2UudHlwZV06ZS50eXBlKSxudWxsIT1lLnR5cGVOYW1lJiZlLmhhc093blByb3BlcnR5KFwidHlwZU5hbWVcIikmJihuLnR5cGVOYW1lPWUudHlwZU5hbWUpLG51bGwhPWUuZGVmYXVsdFZhbHVlJiZlLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYobi5kZWZhdWx0VmFsdWU9ZS5kZWZhdWx0VmFsdWUpLG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuLm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbnVsbCE9ZS5vbmVvZkluZGV4JiZlLmhhc093blByb3BlcnR5KFwib25lb2ZJbmRleFwiKSYmKG4ub25lb2ZJbmRleD1lLm9uZW9mSW5kZXgpLG51bGwhPWUuanNvbk5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJqc29uTmFtZVwiKSYmKG4uanNvbk5hbWU9ZS5qc29uTmFtZSksbnVsbCE9ZS5wcm90bzNPcHRpb25hbCYmZS5oYXNPd25Qcm9wZXJ0eShcInByb3RvM09wdGlvbmFsXCIpJiYobi5wcm90bzNPcHRpb25hbD1lLnByb3RvM09wdGlvbmFsKSxufSx2LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sdi5UeXBlPShuPXt9LChlPU9iamVjdC5jcmVhdGUobikpW25bMV09XCJUWVBFX0RPVUJMRVwiXT0xLGVbblsyXT1cIlRZUEVfRkxPQVRcIl09MixlW25bM109XCJUWVBFX0lOVDY0XCJdPTMsZVtuWzRdPVwiVFlQRV9VSU5UNjRcIl09NCxlW25bNV09XCJUWVBFX0lOVDMyXCJdPTUsZVtuWzZdPVwiVFlQRV9GSVhFRDY0XCJdPTYsZVtuWzddPVwiVFlQRV9GSVhFRDMyXCJdPTcsZVtuWzhdPVwiVFlQRV9CT09MXCJdPTgsZVtuWzldPVwiVFlQRV9TVFJJTkdcIl09OSxlW25bMTBdPVwiVFlQRV9HUk9VUFwiXT0xMCxlW25bMTFdPVwiVFlQRV9NRVNTQUdFXCJdPTExLGVbblsxMl09XCJUWVBFX0JZVEVTXCJdPTEyLGVbblsxM109XCJUWVBFX1VJTlQzMlwiXT0xMyxlW25bMTRdPVwiVFlQRV9FTlVNXCJdPTE0LGVbblsxNV09XCJUWVBFX1NGSVhFRDMyXCJdPTE1LGVbblsxNl09XCJUWVBFX1NGSVhFRDY0XCJdPTE2LGVbblsxN109XCJUWVBFX1NJTlQzMlwiXT0xNyxlW25bMThdPVwiVFlQRV9TSU5UNjRcIl09MTgsZSksdi5MYWJlbD0obj17fSwoZT1PYmplY3QuY3JlYXRlKG4pKVtuWzFdPVwiTEFCRUxfT1BUSU9OQUxcIl09MSxlW25bMl09XCJMQUJFTF9SRVFVSVJFRFwiXT0yLGVbblszXT1cIkxBQkVMX1JFUEVBVEVEXCJdPTMsZSksdiksdC5PbmVvZkRlc2NyaXB0b3JQcm90bz0ody5wcm90b3R5cGUubmFtZT1cIlwiLHcucHJvdG90eXBlLm9wdGlvbnM9bnVsbCx3LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHcoZSl9LHcuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmcC5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLmVuY29kZShlLm9wdGlvbnMsdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksdH0sdy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sdy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG87ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5uYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8ub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSx3LmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSx3LnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhaS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSl7ZT1wLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnMudmVyaWZ5KGUub3B0aW9ucyk7aWYoZSlyZXR1cm5cIm9wdGlvbnMuXCIrZX1yZXR1cm4gbnVsbH0sdy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG87aWYobnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSxudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9ucy5mcm9tT2JqZWN0KGUub3B0aW9ucyl9cmV0dXJuIHR9LHcudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuLm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbn0sdy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LHcpLHQuRW51bURlc2NyaXB0b3JQcm90bz0oUC5wcm90b3R5cGUubmFtZT1cIlwiLFAucHJvdG90eXBlLnZhbHVlPWkuZW1wdHlBcnJheSxQLnByb3RvdHlwZS5vcHRpb25zPW51bGwsUC5wcm90b3R5cGUucmVzZXJ2ZWRSYW5nZT1pLmVtcHR5QXJyYXksUC5wcm90b3R5cGUucmVzZXJ2ZWROYW1lPWkuZW1wdHlBcnJheSxQLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFAoZSl9LFAuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbWVcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5uYW1lKSxudWxsIT1lLnZhbHVlJiZlLnZhbHVlLmxlbmd0aClmb3IodmFyIG49MDtuPGUudmFsdWUubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8uZW5jb2RlKGUudmFsdWVbbl0sdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmcC5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnJlc2VydmVkUmFuZ2UmJmUucmVzZXJ2ZWRSYW5nZS5sZW5ndGgpZm9yKG49MDtuPGUucmVzZXJ2ZWRSYW5nZS5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uRW51bVJlc2VydmVkUmFuZ2UuZW5jb2RlKGUucmVzZXJ2ZWRSYW5nZVtuXSx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtpZihudWxsIT1lLnJlc2VydmVkTmFtZSYmZS5yZXNlcnZlZE5hbWUubGVuZ3RoKWZvcihuPTA7bjxlLnJlc2VydmVkTmFtZS5sZW5ndGg7KytuKXQudWludDMyKDQyKS5zdHJpbmcoZS5yZXNlcnZlZE5hbWVbbl0pO3JldHVybiB0fSxQLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxQLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnZhbHVlJiZvLnZhbHVlLmxlbmd0aHx8KG8udmFsdWU9W10pLG8udmFsdWUucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMzpvLm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA0Om8ucmVzZXJ2ZWRSYW5nZSYmby5yZXNlcnZlZFJhbmdlLmxlbmd0aHx8KG8ucmVzZXJ2ZWRSYW5nZT1bXSksby5yZXNlcnZlZFJhbmdlLnB1c2gocC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA1Om8ucmVzZXJ2ZWROYW1lJiZvLnJlc2VydmVkTmFtZS5sZW5ndGh8fChvLnJlc2VydmVkTmFtZT1bXSksby5yZXNlcnZlZE5hbWUucHVzaChlLnN0cmluZygpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LFAuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFAudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnZhbHVlJiZlLmhhc093blByb3BlcnR5KFwidmFsdWVcIikpe2lmKCFBcnJheS5pc0FycmF5KGUudmFsdWUpKXJldHVyblwidmFsdWU6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLnZhbHVlLmxlbmd0aDsrK3QpaWYobj1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUudmFsdWVbdF0pKXJldHVyblwidmFsdWUuXCIrbn1pZihudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobj1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKSkpcmV0dXJuXCJvcHRpb25zLlwiK247aWYobnVsbCE9ZS5yZXNlcnZlZFJhbmdlJiZlLmhhc093blByb3BlcnR5KFwicmVzZXJ2ZWRSYW5nZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZFJhbmdlKSlyZXR1cm5cInJlc2VydmVkUmFuZ2U6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciBuLHQ9MDt0PGUucmVzZXJ2ZWRSYW5nZS5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZS52ZXJpZnkoZS5yZXNlcnZlZFJhbmdlW3RdKSlyZXR1cm5cInJlc2VydmVkUmFuZ2UuXCIrbn1pZihudWxsIT1lLnJlc2VydmVkTmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcInJlc2VydmVkTmFtZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZE5hbWUpKXJldHVyblwicmVzZXJ2ZWROYW1lOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLnJlc2VydmVkTmFtZS5sZW5ndGg7Kyt0KWlmKCFpLmlzU3RyaW5nKGUucmVzZXJ2ZWROYW1lW3RdKSlyZXR1cm5cInJlc2VydmVkTmFtZTogc3RyaW5nW10gZXhwZWN0ZWRcIn1yZXR1cm4gbnVsbH0sUC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvO2lmKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksZS52YWx1ZSl7aWYoIUFycmF5LmlzQXJyYXkoZS52YWx1ZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnZhbHVlOiBhcnJheSBleHBlY3RlZFwiKTt0LnZhbHVlPVtdO2Zvcih2YXIgbj0wO248ZS52YWx1ZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS52YWx1ZVtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8udmFsdWU6IG9iamVjdCBleHBlY3RlZFwiKTt0LnZhbHVlW25dPXAuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90by5mcm9tT2JqZWN0KGUudmFsdWVbbl0pfX1pZihudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuZnJvbU9iamVjdChlLm9wdGlvbnMpfWlmKGUucmVzZXJ2ZWRSYW5nZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZFJhbmdlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8ucmVzZXJ2ZWRSYW5nZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5yZXNlcnZlZFJhbmdlPVtdO2ZvcihuPTA7bjxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUucmVzZXJ2ZWRSYW5nZVtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8ucmVzZXJ2ZWRSYW5nZTogb2JqZWN0IGV4cGVjdGVkXCIpO3QucmVzZXJ2ZWRSYW5nZVtuXT1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlLmZyb21PYmplY3QoZS5yZXNlcnZlZFJhbmdlW25dKX19aWYoZS5yZXNlcnZlZE5hbWUpe2lmKCFBcnJheS5pc0FycmF5KGUucmVzZXJ2ZWROYW1lKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8ucmVzZXJ2ZWROYW1lOiBhcnJheSBleHBlY3RlZFwiKTt0LnJlc2VydmVkTmFtZT1bXTtmb3Iobj0wO248ZS5yZXNlcnZlZE5hbWUubGVuZ3RoOysrbil0LnJlc2VydmVkTmFtZVtuXT1TdHJpbmcoZS5yZXNlcnZlZE5hbWVbbl0pfXJldHVybiB0fSxQLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi52YWx1ZT1bXSxuLnJlc2VydmVkUmFuZ2U9W10sbi5yZXNlcnZlZE5hbWU9W10pLHQuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLGUudmFsdWUmJmUudmFsdWUubGVuZ3RoKXtuLnZhbHVlPVtdO2Zvcih2YXIgbz0wO288ZS52YWx1ZS5sZW5ndGg7KytvKW4udmFsdWVbb109cC5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUudmFsdWVbb10sdCl9aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSYmKG4ub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtT3B0aW9ucy50b09iamVjdChlLm9wdGlvbnMsdCkpLGUucmVzZXJ2ZWRSYW5nZSYmZS5yZXNlcnZlZFJhbmdlLmxlbmd0aCl7bi5yZXNlcnZlZFJhbmdlPVtdO2ZvcihvPTA7bzxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbyluLnJlc2VydmVkUmFuZ2Vbb109cC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZS50b09iamVjdChlLnJlc2VydmVkUmFuZ2Vbb10sdCl9aWYoZS5yZXNlcnZlZE5hbWUmJmUucmVzZXJ2ZWROYW1lLmxlbmd0aCl7bi5yZXNlcnZlZE5hbWU9W107Zm9yKG89MDtvPGUucmVzZXJ2ZWROYW1lLmxlbmd0aDsrK28pbi5yZXNlcnZlZE5hbWVbb109ZS5yZXNlcnZlZE5hbWVbb119cmV0dXJuIG59LFAucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxQLkVudW1SZXNlcnZlZFJhbmdlPShfLnByb3RvdHlwZS5zdGFydD0wLF8ucHJvdG90eXBlLmVuZD0wLF8uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgXyhlKX0sXy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuc3RhcnQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdGFydFwiKSYmdC51aW50MzIoOCkuaW50MzIoZS5zdGFydCksbnVsbCE9ZS5lbmQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJlbmRcIikmJnQudWludDMyKDE2KS5pbnQzMihlLmVuZCksdH0sXy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sXy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZTtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLnN0YXJ0PWUuaW50MzIoKTticmVhaztjYXNlIDI6by5lbmQ9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sXy5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sXy52ZXJpZnk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lP1wib2JqZWN0IGV4cGVjdGVkXCI6bnVsbCE9ZS5zdGFydCYmZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0XCIpJiYhaS5pc0ludGVnZXIoZS5zdGFydCk/XCJzdGFydDogaW50ZWdlciBleHBlY3RlZFwiOm51bGwhPWUuZW5kJiZlLmhhc093blByb3BlcnR5KFwiZW5kXCIpJiYhaS5pc0ludGVnZXIoZS5lbmQpP1wiZW5kOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbH0sXy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZT9lOih0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlLG51bGwhPWUuc3RhcnQmJih0LnN0YXJ0PTB8ZS5zdGFydCksbnVsbCE9ZS5lbmQmJih0LmVuZD0wfGUuZW5kKSx0KX0sXy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4uc3RhcnQ9MCxuLmVuZD0wKSxudWxsIT1lLnN0YXJ0JiZlLmhhc093blByb3BlcnR5KFwic3RhcnRcIikmJihuLnN0YXJ0PWUuc3RhcnQpLG51bGwhPWUuZW5kJiZlLmhhc093blByb3BlcnR5KFwiZW5kXCIpJiYobi5lbmQ9ZS5lbmQpLG59LF8ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxfKSxQKSx0LkVudW1WYWx1ZURlc2NyaXB0b3JQcm90bz0oai5wcm90b3R5cGUubmFtZT1cIlwiLGoucHJvdG90eXBlLm51bWJlcj0wLGoucHJvdG90eXBlLm9wdGlvbnM9bnVsbCxqLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGooZSl9LGouZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5udW1iZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJudW1iZXJcIikmJnQudWludDMyKDE2KS5pbnQzMihlLm51bWJlciksbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmcC5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucy5lbmNvZGUoZS5vcHRpb25zLHQudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLHR9LGouZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGouZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90bztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLm5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5udW1iZXI9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMzpvLm9wdGlvbnM9cC5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGouZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGoudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm51bWJlciYmZS5oYXNPd25Qcm9wZXJ0eShcIm51bWJlclwiKSYmIWkuaXNJbnRlZ2VyKGUubnVtYmVyKSlyZXR1cm5cIm51bWJlcjogaW50ZWdlciBleHBlY3RlZFwiO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikpe2U9cC5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKTtpZihlKXJldHVyblwib3B0aW9ucy5cIitlfXJldHVybiBudWxsfSxqLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvO2lmKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksbnVsbCE9ZS5udW1iZXImJih0Lm51bWJlcj0wfGUubnVtYmVyKSxudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8ub3B0aW9uczogb2JqZWN0IGV4cGVjdGVkXCIpO3Qub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gdH0sai50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4ubnVtYmVyPTAsbi5vcHRpb25zPW51bGwpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxudWxsIT1lLm51bWJlciYmZS5oYXNPd25Qcm9wZXJ0eShcIm51bWJlclwiKSYmKG4ubnVtYmVyPWUubnVtYmVyKSxudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnMudG9PYmplY3QoZS5vcHRpb25zLHQpKSxufSxqLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0saiksdC5TZXJ2aWNlRGVzY3JpcHRvclByb3RvPShTLnByb3RvdHlwZS5uYW1lPVwiXCIsUy5wcm90b3R5cGUubWV0aG9kPWkuZW1wdHlBcnJheSxTLnByb3RvdHlwZS5vcHRpb25zPW51bGwsUy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBTKGUpfSxTLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5tZXRob2QmJmUubWV0aG9kLmxlbmd0aClmb3IodmFyIG49MDtuPGUubWV0aG9kLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLmVuY29kZShlLm1ldGhvZFtuXSx0LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmcC5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSx0fSxTLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxTLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLm1ldGhvZCYmby5tZXRob2QubGVuZ3RofHwoby5tZXRob2Q9W10pLG8ubWV0aG9kLnB1c2gocC5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDM6by5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sUy5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sUy52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmIWkuaXNTdHJpbmcoZS5uYW1lKSlyZXR1cm5cIm5hbWU6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUubWV0aG9kJiZlLmhhc093blByb3BlcnR5KFwibWV0aG9kXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm1ldGhvZCkpcmV0dXJuXCJtZXRob2Q6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLm1ldGhvZC5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLm1ldGhvZFt0XSkpcmV0dXJuXCJtZXRob2QuXCIrbn12YXIgbjtpZihudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobj1wLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKSkpcmV0dXJuXCJvcHRpb25zLlwiK247cmV0dXJuIG51bGx9LFMuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90bztpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLGUubWV0aG9kKXtpZighQXJyYXkuaXNBcnJheShlLm1ldGhvZCkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLm1ldGhvZDogYXJyYXkgZXhwZWN0ZWRcIik7dC5tZXRob2Q9W107Zm9yKHZhciBuPTA7bjxlLm1ldGhvZC5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5tZXRob2Rbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLm1ldGhvZDogb2JqZWN0IGV4cGVjdGVkXCIpO3QubWV0aG9kW25dPXAuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90by5mcm9tT2JqZWN0KGUubWV0aG9kW25dKX19aWYobnVsbCE9ZS5vcHRpb25zKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5vcHRpb25zKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gdH0sUy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4ubWV0aG9kPVtdKSx0LmRlZmF1bHRzJiYobi5uYW1lPVwiXCIsbi5vcHRpb25zPW51bGwpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxlLm1ldGhvZCYmZS5tZXRob2QubGVuZ3RoKXtuLm1ldGhvZD1bXTtmb3IodmFyIG89MDtvPGUubWV0aG9kLmxlbmd0aDsrK28pbi5tZXRob2Rbb109cC5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUubWV0aG9kW29dLHQpfXJldHVybiBudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbn0sUy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFMpLHQuTWV0aG9kRGVzY3JpcHRvclByb3RvPSh4LnByb3RvdHlwZS5uYW1lPVwiXCIseC5wcm90b3R5cGUuaW5wdXRUeXBlPVwiXCIseC5wcm90b3R5cGUub3V0cHV0VHlwZT1cIlwiLHgucHJvdG90eXBlLm9wdGlvbnM9bnVsbCx4LnByb3RvdHlwZS5jbGllbnRTdHJlYW1pbmc9ITEseC5wcm90b3R5cGUuc2VydmVyU3RyZWFtaW5nPSExLHguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgeChlKX0seC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbWVcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5uYW1lKSxudWxsIT1lLmlucHV0VHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlucHV0VHlwZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLmlucHV0VHlwZSksbnVsbCE9ZS5vdXRwdXRUeXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3V0cHV0VHlwZVwiKSYmdC51aW50MzIoMjYpLnN0cmluZyhlLm91dHB1dFR5cGUpLG51bGwhPWUub3B0aW9ucyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm9wdGlvbnNcIikmJnAuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmNsaWVudFN0cmVhbWluZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNsaWVudFN0cmVhbWluZ1wiKSYmdC51aW50MzIoNDApLmJvb2woZS5jbGllbnRTdHJlYW1pbmcpLG51bGwhPWUuc2VydmVyU3RyZWFtaW5nJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic2VydmVyU3RyZWFtaW5nXCIpJiZ0LnVpbnQzMig0OCkuYm9vbChlLnNlcnZlclN0cmVhbWluZyksdH0seC5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0seC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmlucHV0VHlwZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLm91dHB1dFR5cGU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5vcHRpb25zPXAuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA1Om8uY2xpZW50U3RyZWFtaW5nPWUuYm9vbCgpO2JyZWFrO2Nhc2UgNjpvLnNlcnZlclN0cmVhbWluZz1lLmJvb2woKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LHguZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LHgudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiFpLmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmlucHV0VHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImlucHV0VHlwZVwiKSYmIWkuaXNTdHJpbmcoZS5pbnB1dFR5cGUpKXJldHVyblwiaW5wdXRUeXBlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm91dHB1dFR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJvdXRwdXRUeXBlXCIpJiYhaS5pc1N0cmluZyhlLm91dHB1dFR5cGUpKXJldHVyblwib3V0cHV0VHlwZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSl7dmFyIHQ9cC5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKTtpZih0KXJldHVyblwib3B0aW9ucy5cIit0fXJldHVybiBudWxsIT1lLmNsaWVudFN0cmVhbWluZyYmZS5oYXNPd25Qcm9wZXJ0eShcImNsaWVudFN0cmVhbWluZ1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmNsaWVudFN0cmVhbWluZz9cImNsaWVudFN0cmVhbWluZzogYm9vbGVhbiBleHBlY3RlZFwiOm51bGwhPWUuc2VydmVyU3RyZWFtaW5nJiZlLmhhc093blByb3BlcnR5KFwic2VydmVyU3RyZWFtaW5nXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUuc2VydmVyU3RyZWFtaW5nP1wic2VydmVyU3RyZWFtaW5nOiBib29sZWFuIGV4cGVjdGVkXCI6bnVsbH0seC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5NZXRob2REZXNjcmlwdG9yUHJvdG8pcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90bztpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLG51bGwhPWUuaW5wdXRUeXBlJiYodC5pbnB1dFR5cGU9U3RyaW5nKGUuaW5wdXRUeXBlKSksbnVsbCE9ZS5vdXRwdXRUeXBlJiYodC5vdXRwdXRUeXBlPVN0cmluZyhlLm91dHB1dFR5cGUpKSxudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5NZXRob2REZXNjcmlwdG9yUHJvdG8ub3B0aW9uczogb2JqZWN0IGV4cGVjdGVkXCIpO3Qub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gbnVsbCE9ZS5jbGllbnRTdHJlYW1pbmcmJih0LmNsaWVudFN0cmVhbWluZz1Cb29sZWFuKGUuY2xpZW50U3RyZWFtaW5nKSksbnVsbCE9ZS5zZXJ2ZXJTdHJlYW1pbmcmJih0LnNlcnZlclN0cmVhbWluZz1Cb29sZWFuKGUuc2VydmVyU3RyZWFtaW5nKSksdH0seC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4uaW5wdXRUeXBlPVwiXCIsbi5vdXRwdXRUeXBlPVwiXCIsbi5vcHRpb25zPW51bGwsbi5jbGllbnRTdHJlYW1pbmc9ITEsbi5zZXJ2ZXJTdHJlYW1pbmc9ITEpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxudWxsIT1lLmlucHV0VHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImlucHV0VHlwZVwiKSYmKG4uaW5wdXRUeXBlPWUuaW5wdXRUeXBlKSxudWxsIT1lLm91dHB1dFR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJvdXRwdXRUeXBlXCIpJiYobi5vdXRwdXRUeXBlPWUub3V0cHV0VHlwZSksbnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSYmKG4ub3B0aW9ucz1wLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbnVsbCE9ZS5jbGllbnRTdHJlYW1pbmcmJmUuaGFzT3duUHJvcGVydHkoXCJjbGllbnRTdHJlYW1pbmdcIikmJihuLmNsaWVudFN0cmVhbWluZz1lLmNsaWVudFN0cmVhbWluZyksbnVsbCE9ZS5zZXJ2ZXJTdHJlYW1pbmcmJmUuaGFzT3duUHJvcGVydHkoXCJzZXJ2ZXJTdHJlYW1pbmdcIikmJihuLnNlcnZlclN0cmVhbWluZz1lLnNlcnZlclN0cmVhbWluZyksbn0seC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LHgpLHQuRmlsZU9wdGlvbnM9KGsucHJvdG90eXBlLmphdmFQYWNrYWdlPVwiXCIsay5wcm90b3R5cGUuamF2YU91dGVyQ2xhc3NuYW1lPVwiXCIsay5wcm90b3R5cGUuamF2YU11bHRpcGxlRmlsZXM9ITEsay5wcm90b3R5cGUuamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaD0hMSxrLnByb3RvdHlwZS5qYXZhU3RyaW5nQ2hlY2tVdGY4PSExLGsucHJvdG90eXBlLm9wdGltaXplRm9yPTEsay5wcm90b3R5cGUuZ29QYWNrYWdlPVwiXCIsay5wcm90b3R5cGUuY2NHZW5lcmljU2VydmljZXM9ITEsay5wcm90b3R5cGUuamF2YUdlbmVyaWNTZXJ2aWNlcz0hMSxrLnByb3RvdHlwZS5weUdlbmVyaWNTZXJ2aWNlcz0hMSxrLnByb3RvdHlwZS5waHBHZW5lcmljU2VydmljZXM9ITEsay5wcm90b3R5cGUuZGVwcmVjYXRlZD0hMSxrLnByb3RvdHlwZS5jY0VuYWJsZUFyZW5hcz0hMCxrLnByb3RvdHlwZS5vYmpjQ2xhc3NQcmVmaXg9XCJcIixrLnByb3RvdHlwZS5jc2hhcnBOYW1lc3BhY2U9XCJcIixrLnByb3RvdHlwZS5zd2lmdFByZWZpeD1cIlwiLGsucHJvdG90eXBlLnBocENsYXNzUHJlZml4PVwiXCIsay5wcm90b3R5cGUucGhwTmFtZXNwYWNlPVwiXCIsay5wcm90b3R5cGUucGhwTWV0YWRhdGFOYW1lc3BhY2U9XCJcIixrLnByb3RvdHlwZS5ydWJ5UGFja2FnZT1cIlwiLGsucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249aS5lbXB0eUFycmF5LGsuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgayhlKX0say5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5qYXZhUGFja2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImphdmFQYWNrYWdlXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUuamF2YVBhY2thZ2UpLG51bGwhPWUuamF2YU91dGVyQ2xhc3NuYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiamF2YU91dGVyQ2xhc3NuYW1lXCIpJiZ0LnVpbnQzMig2Nikuc3RyaW5nKGUuamF2YU91dGVyQ2xhc3NuYW1lKSxudWxsIT1lLm9wdGltaXplRm9yJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW1pemVGb3JcIikmJnQudWludDMyKDcyKS5pbnQzMihlLm9wdGltaXplRm9yKSxudWxsIT1lLmphdmFNdWx0aXBsZUZpbGVzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiamF2YU11bHRpcGxlRmlsZXNcIikmJnQudWludDMyKDgwKS5ib29sKGUuamF2YU11bHRpcGxlRmlsZXMpLG51bGwhPWUuZ29QYWNrYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZ29QYWNrYWdlXCIpJiZ0LnVpbnQzMig5MCkuc3RyaW5nKGUuZ29QYWNrYWdlKSxudWxsIT1lLmNjR2VuZXJpY1NlcnZpY2VzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY2NHZW5lcmljU2VydmljZXNcIikmJnQudWludDMyKDEyOCkuYm9vbChlLmNjR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmljU2VydmljZXMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJqYXZhR2VuZXJpY1NlcnZpY2VzXCIpJiZ0LnVpbnQzMigxMzYpLmJvb2woZS5qYXZhR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLnB5R2VuZXJpY1NlcnZpY2VzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicHlHZW5lcmljU2VydmljZXNcIikmJnQudWludDMyKDE0NCkuYm9vbChlLnB5R2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoXCIpJiZ0LnVpbnQzMigxNjApLmJvb2woZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigxODQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLmphdmFTdHJpbmdDaGVja1V0ZjgmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJqYXZhU3RyaW5nQ2hlY2tVdGY4XCIpJiZ0LnVpbnQzMigyMTYpLmJvb2woZS5qYXZhU3RyaW5nQ2hlY2tVdGY4KSxudWxsIT1lLmNjRW5hYmxlQXJlbmFzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY2NFbmFibGVBcmVuYXNcIikmJnQudWludDMyKDI0OCkuYm9vbChlLmNjRW5hYmxlQXJlbmFzKSxudWxsIT1lLm9iamNDbGFzc1ByZWZpeCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm9iamNDbGFzc1ByZWZpeFwiKSYmdC51aW50MzIoMjkwKS5zdHJpbmcoZS5vYmpjQ2xhc3NQcmVmaXgpLG51bGwhPWUuY3NoYXJwTmFtZXNwYWNlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY3NoYXJwTmFtZXNwYWNlXCIpJiZ0LnVpbnQzMigyOTgpLnN0cmluZyhlLmNzaGFycE5hbWVzcGFjZSksbnVsbCE9ZS5zd2lmdFByZWZpeCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN3aWZ0UHJlZml4XCIpJiZ0LnVpbnQzMigzMTQpLnN0cmluZyhlLnN3aWZ0UHJlZml4KSxudWxsIT1lLnBocENsYXNzUHJlZml4JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGhwQ2xhc3NQcmVmaXhcIikmJnQudWludDMyKDMyMikuc3RyaW5nKGUucGhwQ2xhc3NQcmVmaXgpLG51bGwhPWUucGhwTmFtZXNwYWNlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGhwTmFtZXNwYWNlXCIpJiZ0LnVpbnQzMigzMzApLnN0cmluZyhlLnBocE5hbWVzcGFjZSksbnVsbCE9ZS5waHBHZW5lcmljU2VydmljZXMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwaHBHZW5lcmljU2VydmljZXNcIikmJnQudWludDMyKDMzNikuYm9vbChlLnBocEdlbmVyaWNTZXJ2aWNlcyksbnVsbCE9ZS5waHBNZXRhZGF0YU5hbWVzcGFjZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBocE1ldGFkYXRhTmFtZXNwYWNlXCIpJiZ0LnVpbnQzMigzNTQpLnN0cmluZyhlLnBocE1ldGFkYXRhTmFtZXNwYWNlKSxudWxsIT1lLnJ1YnlQYWNrYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnVieVBhY2thZ2VcIikmJnQudWludDMyKDM2Mikuc3RyaW5nKGUucnVieVBhY2thZ2UpLG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aClmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZW5jb2RlKGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSx0LnVpbnQzMig3OTk0KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxrLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxrLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmphdmFQYWNrYWdlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA4Om8uamF2YU91dGVyQ2xhc3NuYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMDpvLmphdmFNdWx0aXBsZUZpbGVzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMjA6by5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMjc6by5qYXZhU3RyaW5nQ2hlY2tVdGY4PWUuYm9vbCgpO2JyZWFrO2Nhc2UgOTpvLm9wdGltaXplRm9yPWUuaW50MzIoKTticmVhaztjYXNlIDExOm8uZ29QYWNrYWdlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxNjpvLmNjR2VuZXJpY1NlcnZpY2VzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMTc6by5qYXZhR2VuZXJpY1NlcnZpY2VzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMTg6by5weUdlbmVyaWNTZXJ2aWNlcz1lLmJvb2woKTticmVhaztjYXNlIDQyOm8ucGhwR2VuZXJpY1NlcnZpY2VzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMjM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzE6by5jY0VuYWJsZUFyZW5hcz1lLmJvb2woKTticmVhaztjYXNlIDM2Om8ub2JqY0NsYXNzUHJlZml4PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzNzpvLmNzaGFycE5hbWVzcGFjZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzk6by5zd2lmdFByZWZpeD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDA6by5waHBDbGFzc1ByZWZpeD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDE6by5waHBOYW1lc3BhY2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ0Om8ucGhwTWV0YWRhdGFOYW1lc3BhY2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ1Om8ucnVieVBhY2thZ2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDk5OTpvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30say5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0say52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qYXZhUGFja2FnZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFQYWNrYWdlXCIpJiYhaS5pc1N0cmluZyhlLmphdmFQYWNrYWdlKSlyZXR1cm5cImphdmFQYWNrYWdlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmphdmFPdXRlckNsYXNzbmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFPdXRlckNsYXNzbmFtZVwiKSYmIWkuaXNTdHJpbmcoZS5qYXZhT3V0ZXJDbGFzc25hbWUpKXJldHVyblwiamF2YU91dGVyQ2xhc3NuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmphdmFNdWx0aXBsZUZpbGVzJiZlLmhhc093blByb3BlcnR5KFwiamF2YU11bHRpcGxlRmlsZXNcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5qYXZhTXVsdGlwbGVGaWxlcylyZXR1cm5cImphdmFNdWx0aXBsZUZpbGVzOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoJiZlLmhhc093blByb3BlcnR5KFwiamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gpcmV0dXJuXCJqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qYXZhU3RyaW5nQ2hlY2tVdGY4JiZlLmhhc093blByb3BlcnR5KFwiamF2YVN0cmluZ0NoZWNrVXRmOFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmphdmFTdHJpbmdDaGVja1V0ZjgpcmV0dXJuXCJqYXZhU3RyaW5nQ2hlY2tVdGY4OiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5vcHRpbWl6ZUZvciYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGltaXplRm9yXCIpKXN3aXRjaChlLm9wdGltaXplRm9yKXtkZWZhdWx0OnJldHVyblwib3B0aW1pemVGb3I6IGVudW0gdmFsdWUgZXhwZWN0ZWRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp9aWYobnVsbCE9ZS5nb1BhY2thZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJnb1BhY2thZ2VcIikmJiFpLmlzU3RyaW5nKGUuZ29QYWNrYWdlKSlyZXR1cm5cImdvUGFja2FnZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5jY0dlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcImNjR2VuZXJpY1NlcnZpY2VzXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUuY2NHZW5lcmljU2VydmljZXMpcmV0dXJuXCJjY0dlbmVyaWNTZXJ2aWNlczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuamF2YUdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFHZW5lcmljU2VydmljZXNcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5qYXZhR2VuZXJpY1NlcnZpY2VzKXJldHVyblwiamF2YUdlbmVyaWNTZXJ2aWNlczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUucHlHZW5lcmljU2VydmljZXMmJmUuaGFzT3duUHJvcGVydHkoXCJweUdlbmVyaWNTZXJ2aWNlc1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLnB5R2VuZXJpY1NlcnZpY2VzKXJldHVyblwicHlHZW5lcmljU2VydmljZXM6IGJvb2xlYW4gZXhwZWN0ZWRcIjtpZihudWxsIT1lLnBocEdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcInBocEdlbmVyaWNTZXJ2aWNlc1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLnBocEdlbmVyaWNTZXJ2aWNlcylyZXR1cm5cInBocEdlbmVyaWNTZXJ2aWNlczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuY2NFbmFibGVBcmVuYXMmJmUuaGFzT3duUHJvcGVydHkoXCJjY0VuYWJsZUFyZW5hc1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmNjRW5hYmxlQXJlbmFzKXJldHVyblwiY2NFbmFibGVBcmVuYXM6IGJvb2xlYW4gZXhwZWN0ZWRcIjtpZihudWxsIT1lLm9iamNDbGFzc1ByZWZpeCYmZS5oYXNPd25Qcm9wZXJ0eShcIm9iamNDbGFzc1ByZWZpeFwiKSYmIWkuaXNTdHJpbmcoZS5vYmpjQ2xhc3NQcmVmaXgpKXJldHVyblwib2JqY0NsYXNzUHJlZml4OiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmNzaGFycE5hbWVzcGFjZSYmZS5oYXNPd25Qcm9wZXJ0eShcImNzaGFycE5hbWVzcGFjZVwiKSYmIWkuaXNTdHJpbmcoZS5jc2hhcnBOYW1lc3BhY2UpKXJldHVyblwiY3NoYXJwTmFtZXNwYWNlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnN3aWZ0UHJlZml4JiZlLmhhc093blByb3BlcnR5KFwic3dpZnRQcmVmaXhcIikmJiFpLmlzU3RyaW5nKGUuc3dpZnRQcmVmaXgpKXJldHVyblwic3dpZnRQcmVmaXg6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUucGhwQ2xhc3NQcmVmaXgmJmUuaGFzT3duUHJvcGVydHkoXCJwaHBDbGFzc1ByZWZpeFwiKSYmIWkuaXNTdHJpbmcoZS5waHBDbGFzc1ByZWZpeCkpcmV0dXJuXCJwaHBDbGFzc1ByZWZpeDogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5waHBOYW1lc3BhY2UmJmUuaGFzT3duUHJvcGVydHkoXCJwaHBOYW1lc3BhY2VcIikmJiFpLmlzU3RyaW5nKGUucGhwTmFtZXNwYWNlKSlyZXR1cm5cInBocE5hbWVzcGFjZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5waHBNZXRhZGF0YU5hbWVzcGFjZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBocE1ldGFkYXRhTmFtZXNwYWNlXCIpJiYhaS5pc1N0cmluZyhlLnBocE1ldGFkYXRhTmFtZXNwYWNlKSlyZXR1cm5cInBocE1ldGFkYXRhTmFtZXNwYWNlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnJ1YnlQYWNrYWdlJiZlLmhhc093blByb3BlcnR5KFwicnVieVBhY2thZ2VcIikmJiFpLmlzU3RyaW5nKGUucnVieVBhY2thZ2UpKXJldHVyblwicnVieVBhY2thZ2U6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LGsuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zO3N3aXRjaChudWxsIT1lLmphdmFQYWNrYWdlJiYodC5qYXZhUGFja2FnZT1TdHJpbmcoZS5qYXZhUGFja2FnZSkpLG51bGwhPWUuamF2YU91dGVyQ2xhc3NuYW1lJiYodC5qYXZhT3V0ZXJDbGFzc25hbWU9U3RyaW5nKGUuamF2YU91dGVyQ2xhc3NuYW1lKSksbnVsbCE9ZS5qYXZhTXVsdGlwbGVGaWxlcyYmKHQuamF2YU11bHRpcGxlRmlsZXM9Qm9vbGVhbihlLmphdmFNdWx0aXBsZUZpbGVzKSksbnVsbCE9ZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoJiYodC5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoPUJvb2xlYW4oZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoKSksbnVsbCE9ZS5qYXZhU3RyaW5nQ2hlY2tVdGY4JiYodC5qYXZhU3RyaW5nQ2hlY2tVdGY4PUJvb2xlYW4oZS5qYXZhU3RyaW5nQ2hlY2tVdGY4KSksZS5vcHRpbWl6ZUZvcil7Y2FzZVwiU1BFRURcIjpjYXNlIDE6dC5vcHRpbWl6ZUZvcj0xO2JyZWFrO2Nhc2VcIkNPREVfU0laRVwiOmNhc2UgMjp0Lm9wdGltaXplRm9yPTI7YnJlYWs7Y2FzZVwiTElURV9SVU5USU1FXCI6Y2FzZSAzOnQub3B0aW1pemVGb3I9M31pZihudWxsIT1lLmdvUGFja2FnZSYmKHQuZ29QYWNrYWdlPVN0cmluZyhlLmdvUGFja2FnZSkpLG51bGwhPWUuY2NHZW5lcmljU2VydmljZXMmJih0LmNjR2VuZXJpY1NlcnZpY2VzPUJvb2xlYW4oZS5jY0dlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUuamF2YUdlbmVyaWNTZXJ2aWNlcyYmKHQuamF2YUdlbmVyaWNTZXJ2aWNlcz1Cb29sZWFuKGUuamF2YUdlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUucHlHZW5lcmljU2VydmljZXMmJih0LnB5R2VuZXJpY1NlcnZpY2VzPUJvb2xlYW4oZS5weUdlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUucGhwR2VuZXJpY1NlcnZpY2VzJiYodC5waHBHZW5lcmljU2VydmljZXM9Qm9vbGVhbihlLnBocEdlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLG51bGwhPWUuY2NFbmFibGVBcmVuYXMmJih0LmNjRW5hYmxlQXJlbmFzPUJvb2xlYW4oZS5jY0VuYWJsZUFyZW5hcykpLG51bGwhPWUub2JqY0NsYXNzUHJlZml4JiYodC5vYmpjQ2xhc3NQcmVmaXg9U3RyaW5nKGUub2JqY0NsYXNzUHJlZml4KSksbnVsbCE9ZS5jc2hhcnBOYW1lc3BhY2UmJih0LmNzaGFycE5hbWVzcGFjZT1TdHJpbmcoZS5jc2hhcnBOYW1lc3BhY2UpKSxudWxsIT1lLnN3aWZ0UHJlZml4JiYodC5zd2lmdFByZWZpeD1TdHJpbmcoZS5zd2lmdFByZWZpeCkpLG51bGwhPWUucGhwQ2xhc3NQcmVmaXgmJih0LnBocENsYXNzUHJlZml4PVN0cmluZyhlLnBocENsYXNzUHJlZml4KSksbnVsbCE9ZS5waHBOYW1lc3BhY2UmJih0LnBocE5hbWVzcGFjZT1TdHJpbmcoZS5waHBOYW1lc3BhY2UpKSxudWxsIT1lLnBocE1ldGFkYXRhTmFtZXNwYWNlJiYodC5waHBNZXRhZGF0YU5hbWVzcGFjZT1TdHJpbmcoZS5waHBNZXRhZGF0YU5hbWVzcGFjZSkpLG51bGwhPWUucnVieVBhY2thZ2UmJih0LnJ1YnlQYWNrYWdlPVN0cmluZyhlLnJ1YnlQYWNrYWdlKSksZS51bmludGVycHJldGVkT3B0aW9uKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uPVtdO2Zvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1yZXR1cm4gdH0say50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksdC5kZWZhdWx0cyYmKG4uamF2YVBhY2thZ2U9XCJcIixuLmphdmFPdXRlckNsYXNzbmFtZT1cIlwiLG4ub3B0aW1pemVGb3I9dC5lbnVtcz09PVN0cmluZz9cIlNQRUVEXCI6MSxuLmphdmFNdWx0aXBsZUZpbGVzPSExLG4uZ29QYWNrYWdlPVwiXCIsbi5jY0dlbmVyaWNTZXJ2aWNlcz0hMSxuLmphdmFHZW5lcmljU2VydmljZXM9ITEsbi5weUdlbmVyaWNTZXJ2aWNlcz0hMSxuLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2g9ITEsbi5kZXByZWNhdGVkPSExLG4uamF2YVN0cmluZ0NoZWNrVXRmOD0hMSxuLmNjRW5hYmxlQXJlbmFzPSEwLG4ub2JqY0NsYXNzUHJlZml4PVwiXCIsbi5jc2hhcnBOYW1lc3BhY2U9XCJcIixuLnN3aWZ0UHJlZml4PVwiXCIsbi5waHBDbGFzc1ByZWZpeD1cIlwiLG4ucGhwTmFtZXNwYWNlPVwiXCIsbi5waHBHZW5lcmljU2VydmljZXM9ITEsbi5waHBNZXRhZGF0YU5hbWVzcGFjZT1cIlwiLG4ucnVieVBhY2thZ2U9XCJcIiksbnVsbCE9ZS5qYXZhUGFja2FnZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFQYWNrYWdlXCIpJiYobi5qYXZhUGFja2FnZT1lLmphdmFQYWNrYWdlKSxudWxsIT1lLmphdmFPdXRlckNsYXNzbmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFPdXRlckNsYXNzbmFtZVwiKSYmKG4uamF2YU91dGVyQ2xhc3NuYW1lPWUuamF2YU91dGVyQ2xhc3NuYW1lKSxudWxsIT1lLm9wdGltaXplRm9yJiZlLmhhc093blByb3BlcnR5KFwib3B0aW1pemVGb3JcIikmJihuLm9wdGltaXplRm9yPXQuZW51bXM9PT1TdHJpbmc/cC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuT3B0aW1pemVNb2RlW2Uub3B0aW1pemVGb3JdOmUub3B0aW1pemVGb3IpLG51bGwhPWUuamF2YU11bHRpcGxlRmlsZXMmJmUuaGFzT3duUHJvcGVydHkoXCJqYXZhTXVsdGlwbGVGaWxlc1wiKSYmKG4uamF2YU11bHRpcGxlRmlsZXM9ZS5qYXZhTXVsdGlwbGVGaWxlcyksbnVsbCE9ZS5nb1BhY2thZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJnb1BhY2thZ2VcIikmJihuLmdvUGFja2FnZT1lLmdvUGFja2FnZSksbnVsbCE9ZS5jY0dlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcImNjR2VuZXJpY1NlcnZpY2VzXCIpJiYobi5jY0dlbmVyaWNTZXJ2aWNlcz1lLmNjR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmljU2VydmljZXMmJmUuaGFzT3duUHJvcGVydHkoXCJqYXZhR2VuZXJpY1NlcnZpY2VzXCIpJiYobi5qYXZhR2VuZXJpY1NlcnZpY2VzPWUuamF2YUdlbmVyaWNTZXJ2aWNlcyksbnVsbCE9ZS5weUdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcInB5R2VuZXJpY1NlcnZpY2VzXCIpJiYobi5weUdlbmVyaWNTZXJ2aWNlcz1lLnB5R2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gmJmUuaGFzT3duUHJvcGVydHkoXCJqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoXCIpJiYobi5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoPWUuamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaCksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLG51bGwhPWUuamF2YVN0cmluZ0NoZWNrVXRmOCYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFTdHJpbmdDaGVja1V0ZjhcIikmJihuLmphdmFTdHJpbmdDaGVja1V0Zjg9ZS5qYXZhU3RyaW5nQ2hlY2tVdGY4KSxudWxsIT1lLmNjRW5hYmxlQXJlbmFzJiZlLmhhc093blByb3BlcnR5KFwiY2NFbmFibGVBcmVuYXNcIikmJihuLmNjRW5hYmxlQXJlbmFzPWUuY2NFbmFibGVBcmVuYXMpLG51bGwhPWUub2JqY0NsYXNzUHJlZml4JiZlLmhhc093blByb3BlcnR5KFwib2JqY0NsYXNzUHJlZml4XCIpJiYobi5vYmpjQ2xhc3NQcmVmaXg9ZS5vYmpjQ2xhc3NQcmVmaXgpLG51bGwhPWUuY3NoYXJwTmFtZXNwYWNlJiZlLmhhc093blByb3BlcnR5KFwiY3NoYXJwTmFtZXNwYWNlXCIpJiYobi5jc2hhcnBOYW1lc3BhY2U9ZS5jc2hhcnBOYW1lc3BhY2UpLG51bGwhPWUuc3dpZnRQcmVmaXgmJmUuaGFzT3duUHJvcGVydHkoXCJzd2lmdFByZWZpeFwiKSYmKG4uc3dpZnRQcmVmaXg9ZS5zd2lmdFByZWZpeCksbnVsbCE9ZS5waHBDbGFzc1ByZWZpeCYmZS5oYXNPd25Qcm9wZXJ0eShcInBocENsYXNzUHJlZml4XCIpJiYobi5waHBDbGFzc1ByZWZpeD1lLnBocENsYXNzUHJlZml4KSxudWxsIT1lLnBocE5hbWVzcGFjZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBocE5hbWVzcGFjZVwiKSYmKG4ucGhwTmFtZXNwYWNlPWUucGhwTmFtZXNwYWNlKSxudWxsIT1lLnBocEdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcInBocEdlbmVyaWNTZXJ2aWNlc1wiKSYmKG4ucGhwR2VuZXJpY1NlcnZpY2VzPWUucGhwR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLnBocE1ldGFkYXRhTmFtZXNwYWNlJiZlLmhhc093blByb3BlcnR5KFwicGhwTWV0YWRhdGFOYW1lc3BhY2VcIikmJihuLnBocE1ldGFkYXRhTmFtZXNwYWNlPWUucGhwTWV0YWRhdGFOYW1lc3BhY2UpLG51bGwhPWUucnVieVBhY2thZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJydWJ5UGFja2FnZVwiKSYmKG4ucnVieVBhY2thZ2U9ZS5ydWJ5UGFja2FnZSksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LGsucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxrLk9wdGltaXplTW9kZT0obj17fSwoZT1PYmplY3QuY3JlYXRlKG4pKVtuWzFdPVwiU1BFRURcIl09MSxlW25bMl09XCJDT0RFX1NJWkVcIl09MixlW25bM109XCJMSVRFX1JVTlRJTUVcIl09MyxlKSxrKSx0Lk1lc3NhZ2VPcHRpb25zPShELnByb3RvdHlwZS5tZXNzYWdlU2V0V2lyZUZvcm1hdD0hMSxELnByb3RvdHlwZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yPSExLEQucHJvdG90eXBlLmRlcHJlY2F0ZWQ9ITEsRC5wcm90b3R5cGUubWFwRW50cnk9ITEsRC5wcm90b3R5cGUudW5pbnRlcnByZXRlZE9wdGlvbj1pLmVtcHR5QXJyYXksRC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEKGUpfSxELmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm1lc3NhZ2VTZXRXaXJlRm9ybWF0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibWVzc2FnZVNldFdpcmVGb3JtYXRcIikmJnQudWludDMyKDgpLmJvb2woZS5tZXNzYWdlU2V0V2lyZUZvcm1hdCksbnVsbCE9ZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvclwiKSYmdC51aW50MzIoMTYpLmJvb2woZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigyNCkuYm9vbChlLmRlcHJlY2F0ZWQpLG51bGwhPWUubWFwRW50cnkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtYXBFbnRyeVwiKSYmdC51aW50MzIoNTYpLmJvb2woZS5tYXBFbnRyeSksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEQuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubWVzc2FnZVNldFdpcmVGb3JtYXQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSAyOm8ubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvcj1lLmJvb2woKTticmVhaztjYXNlIDM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgNzpvLm1hcEVudHJ5PWUuYm9vbCgpO2JyZWFrO2Nhc2UgOTk5Om8udW5pbnRlcnByZXRlZE9wdGlvbiYmby51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aHx8KG8udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksby51bmludGVycHJldGVkT3B0aW9uLnB1c2gocC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxELmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxELnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm1lc3NhZ2VTZXRXaXJlRm9ybWF0JiZlLmhhc093blByb3BlcnR5KFwibWVzc2FnZVNldFdpcmVGb3JtYXRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5tZXNzYWdlU2V0V2lyZUZvcm1hdClyZXR1cm5cIm1lc3NhZ2VTZXRXaXJlRm9ybWF0OiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yJiZlLmhhc093blByb3BlcnR5KFwibm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvclwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLm5vU3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3IpcmV0dXJuXCJub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmRlcHJlY2F0ZWQpcmV0dXJuXCJkZXByZWNhdGVkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5tYXBFbnRyeSYmZS5oYXNPd25Qcm9wZXJ0eShcIm1hcEVudHJ5XCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUubWFwRW50cnkpcmV0dXJuXCJtYXBFbnRyeTogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LEQuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zO2lmKG51bGwhPWUubWVzc2FnZVNldFdpcmVGb3JtYXQmJih0Lm1lc3NhZ2VTZXRXaXJlRm9ybWF0PUJvb2xlYW4oZS5tZXNzYWdlU2V0V2lyZUZvcm1hdCkpLG51bGwhPWUubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvciYmKHQubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvcj1Cb29sZWFuKGUubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvcikpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLG51bGwhPWUubWFwRW50cnkmJih0Lm1hcEVudHJ5PUJvb2xlYW4oZS5tYXBFbnRyeSkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19cmV0dXJuIHR9LEQudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLHQuZGVmYXVsdHMmJihuLm1lc3NhZ2VTZXRXaXJlRm9ybWF0PSExLG4ubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvcj0hMSxuLmRlcHJlY2F0ZWQ9ITEsbi5tYXBFbnRyeT0hMSksbnVsbCE9ZS5tZXNzYWdlU2V0V2lyZUZvcm1hdCYmZS5oYXNPd25Qcm9wZXJ0eShcIm1lc3NhZ2VTZXRXaXJlRm9ybWF0XCIpJiYobi5tZXNzYWdlU2V0V2lyZUZvcm1hdD1lLm1lc3NhZ2VTZXRXaXJlRm9ybWF0KSxudWxsIT1lLm5vU3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3ImJmUuaGFzT3duUHJvcGVydHkoXCJub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yXCIpJiYobi5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yPWUubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvciksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLG51bGwhPWUubWFwRW50cnkmJmUuaGFzT3duUHJvcGVydHkoXCJtYXBFbnRyeVwiKSYmKG4ubWFwRW50cnk9ZS5tYXBFbnRyeSksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LEQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxEKSx0LkZpZWxkT3B0aW9ucz0oVC5wcm90b3R5cGUuY3R5cGU9MCxULnByb3RvdHlwZS5wYWNrZWQ9ITEsVC5wcm90b3R5cGUuanN0eXBlPTAsVC5wcm90b3R5cGUubGF6eT0hMSxULnByb3RvdHlwZS5kZXByZWNhdGVkPSExLFQucHJvdG90eXBlLndlYWs9ITEsVC5wcm90b3R5cGUudW5pbnRlcnByZXRlZE9wdGlvbj1pLmVtcHR5QXJyYXksVC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBUKGUpfSxULmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmN0eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY3R5cGVcIikmJnQudWludDMyKDgpLmludDMyKGUuY3R5cGUpLG51bGwhPWUucGFja2VkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGFja2VkXCIpJiZ0LnVpbnQzMigxNikuYm9vbChlLnBhY2tlZCksbnVsbCE9ZS5kZXByZWNhdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVwcmVjYXRlZFwiKSYmdC51aW50MzIoMjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLmxhenkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsYXp5XCIpJiZ0LnVpbnQzMig0MCkuYm9vbChlLmxhenkpLG51bGwhPWUuanN0eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwianN0eXBlXCIpJiZ0LnVpbnQzMig0OCkuaW50MzIoZS5qc3R5cGUpLG51bGwhPWUud2VhayYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIndlYWtcIikmJnQudWludDMyKDgwKS5ib29sKGUud2VhayksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LFQuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LFQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmN0eXBlPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5wYWNrZWQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSA2Om8uanN0eXBlPWUuaW50MzIoKTticmVhaztjYXNlIDU6by5sYXp5PWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzpvLmRlcHJlY2F0ZWQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSAxMDpvLndlYWs9ZS5ib29sKCk7YnJlYWs7Y2FzZSA5OTk6by51bmludGVycHJldGVkT3B0aW9uJiZvLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RofHwoby51bmludGVycHJldGVkT3B0aW9uPVtdKSxvLnVuaW50ZXJwcmV0ZWRPcHRpb24ucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LFQuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFQudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuY3R5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJjdHlwZVwiKSlzd2l0Y2goZS5jdHlwZSl7ZGVmYXVsdDpyZXR1cm5cImN0eXBlOiBlbnVtIHZhbHVlIGV4cGVjdGVkXCI7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6fWlmKG51bGwhPWUucGFja2VkJiZlLmhhc093blByb3BlcnR5KFwicGFja2VkXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUucGFja2VkKXJldHVyblwicGFja2VkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qc3R5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJqc3R5cGVcIikpc3dpdGNoKGUuanN0eXBlKXtkZWZhdWx0OnJldHVyblwianN0eXBlOiBlbnVtIHZhbHVlIGV4cGVjdGVkXCI7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6fWlmKG51bGwhPWUubGF6eSYmZS5oYXNPd25Qcm9wZXJ0eShcImxhenlcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5sYXp5KXJldHVyblwibGF6eTogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUud2VhayYmZS5oYXNPd25Qcm9wZXJ0eShcIndlYWtcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS53ZWFrKXJldHVyblwid2VhazogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LFQuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnM7c3dpdGNoKGUuY3R5cGUpe2Nhc2VcIlNUUklOR1wiOmNhc2UgMDp0LmN0eXBlPTA7YnJlYWs7Y2FzZVwiQ09SRFwiOmNhc2UgMTp0LmN0eXBlPTE7YnJlYWs7Y2FzZVwiU1RSSU5HX1BJRUNFXCI6Y2FzZSAyOnQuY3R5cGU9Mn1zd2l0Y2gobnVsbCE9ZS5wYWNrZWQmJih0LnBhY2tlZD1Cb29sZWFuKGUucGFja2VkKSksZS5qc3R5cGUpe2Nhc2VcIkpTX05PUk1BTFwiOmNhc2UgMDp0LmpzdHlwZT0wO2JyZWFrO2Nhc2VcIkpTX1NUUklOR1wiOmNhc2UgMTp0LmpzdHlwZT0xO2JyZWFrO2Nhc2VcIkpTX05VTUJFUlwiOmNhc2UgMjp0LmpzdHlwZT0yfWlmKG51bGwhPWUubGF6eSYmKHQubGF6eT1Cb29sZWFuKGUubGF6eSkpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLG51bGwhPWUud2VhayYmKHQud2Vhaz1Cb29sZWFuKGUud2VhaykpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1yZXR1cm4gdH0sVC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksdC5kZWZhdWx0cyYmKG4uY3R5cGU9dC5lbnVtcz09PVN0cmluZz9cIlNUUklOR1wiOjAsbi5wYWNrZWQ9ITEsbi5kZXByZWNhdGVkPSExLG4ubGF6eT0hMSxuLmpzdHlwZT10LmVudW1zPT09U3RyaW5nP1wiSlNfTk9STUFMXCI6MCxuLndlYWs9ITEpLG51bGwhPWUuY3R5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJjdHlwZVwiKSYmKG4uY3R5cGU9dC5lbnVtcz09PVN0cmluZz9wLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuQ1R5cGVbZS5jdHlwZV06ZS5jdHlwZSksbnVsbCE9ZS5wYWNrZWQmJmUuaGFzT3duUHJvcGVydHkoXCJwYWNrZWRcIikmJihuLnBhY2tlZD1lLnBhY2tlZCksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLG51bGwhPWUubGF6eSYmZS5oYXNPd25Qcm9wZXJ0eShcImxhenlcIikmJihuLmxhenk9ZS5sYXp5KSxudWxsIT1lLmpzdHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImpzdHlwZVwiKSYmKG4uanN0eXBlPXQuZW51bXM9PT1TdHJpbmc/cC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZVtlLmpzdHlwZV06ZS5qc3R5cGUpLG51bGwhPWUud2VhayYmZS5oYXNPd25Qcm9wZXJ0eShcIndlYWtcIikmJihuLndlYWs9ZS53ZWFrKSxlLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpe24udW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG89MDtvPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytvKW4udW5pbnRlcnByZXRlZE9wdGlvbltvXT1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnRvT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltvXSx0KX1yZXR1cm4gbn0sVC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFQuQ1R5cGU9KG49e30sKGU9T2JqZWN0LmNyZWF0ZShuKSlbblswXT1cIlNUUklOR1wiXT0wLGVbblsxXT1cIkNPUkRcIl09MSxlW25bMl09XCJTVFJJTkdfUElFQ0VcIl09MixlKSxULkpTVHlwZT0obj17fSwoZT1PYmplY3QuY3JlYXRlKG4pKVtuWzBdPVwiSlNfTk9STUFMXCJdPTAsZVtuWzFdPVwiSlNfU1RSSU5HXCJdPTEsZVtuWzJdPVwiSlNfTlVNQkVSXCJdPTIsZSksVCksdC5PbmVvZk9wdGlvbnM9KEgucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249aS5lbXB0eUFycmF5LEguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSChlKX0sSC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEguZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEguZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09OTk5PyhvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LEguZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEgudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LEguZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnM7aWYoZS51bmludGVycHJldGVkT3B0aW9uKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IG9iamVjdCBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb25bbl09cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5mcm9tT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl9fXJldHVybiB0fSxILnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi51bmludGVycHJldGVkT3B0aW9uPVtdKSxlLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpe24udW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG89MDtvPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytvKW4udW5pbnRlcnByZXRlZE9wdGlvbltvXT1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnRvT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltvXSx0KX1yZXR1cm4gbn0sSC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEgpLHQuRW51bU9wdGlvbnM9KEUucHJvdG90eXBlLmFsbG93QWxpYXM9ITEsRS5wcm90b3R5cGUuZGVwcmVjYXRlZD0hMSxFLnByb3RvdHlwZS51bmludGVycHJldGVkT3B0aW9uPWkuZW1wdHlBcnJheSxFLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEUoZSl9LEUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuYWxsb3dBbGlhcyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImFsbG93QWxpYXNcIikmJnQudWludDMyKDE2KS5ib29sKGUuYWxsb3dBbGlhcyksbnVsbCE9ZS5kZXByZWNhdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVwcmVjYXRlZFwiKSYmdC51aW50MzIoMjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmVuY29kZShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0sdC51aW50MzIoNzk5NCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sRS5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sRS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnM7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDI6by5hbGxvd0FsaWFzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzpvLmRlcHJlY2F0ZWQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSA5OTk6by51bmludGVycHJldGVkT3B0aW9uJiZvLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RofHwoby51bmludGVycHJldGVkT3B0aW9uPVtdKSxvLnVuaW50ZXJwcmV0ZWRPcHRpb24ucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LEUuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEUudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuYWxsb3dBbGlhcyYmZS5oYXNPd25Qcm9wZXJ0eShcImFsbG93QWxpYXNcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5hbGxvd0FsaWFzKXJldHVyblwiYWxsb3dBbGlhczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LEUuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkVudW1PcHRpb25zO2lmKG51bGwhPWUuYWxsb3dBbGlhcyYmKHQuYWxsb3dBbGlhcz1Cb29sZWFuKGUuYWxsb3dBbGlhcykpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1PcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19cmV0dXJuIHR9LEUudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLHQuZGVmYXVsdHMmJihuLmFsbG93QWxpYXM9ITEsbi5kZXByZWNhdGVkPSExKSxudWxsIT1lLmFsbG93QWxpYXMmJmUuaGFzT3duUHJvcGVydHkoXCJhbGxvd0FsaWFzXCIpJiYobi5hbGxvd0FsaWFzPWUuYWxsb3dBbGlhcyksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLGUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aCl7bi51bmludGVycHJldGVkT3B0aW9uPVtdO2Zvcih2YXIgbz0wO288ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK28pbi51bmludGVycHJldGVkT3B0aW9uW29dPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udG9PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW29dLHQpfXJldHVybiBufSxFLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sRSksdC5FbnVtVmFsdWVPcHRpb25zPSh6LnByb3RvdHlwZS5kZXByZWNhdGVkPSExLHoucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249aS5lbXB0eUFycmF5LHouY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgeihlKX0sei5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5kZXByZWNhdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVwcmVjYXRlZFwiKSYmdC51aW50MzIoOCkuYm9vbChlLmRlcHJlY2F0ZWQpLG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aClmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZW5jb2RlKGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSx0LnVpbnQzMig3OTk0KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSx6LmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSx6LmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8uZGVwcmVjYXRlZD1lLmJvb2woKTticmVhaztjYXNlIDk5OTpvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sei5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sei52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmRlcHJlY2F0ZWQpcmV0dXJuXCJkZXByZWNhdGVkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLmhhc093blByb3BlcnR5KFwidW5pbnRlcnByZXRlZE9wdGlvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSlyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrdCl7dmFyIG49cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi52ZXJpZnkoZS51bmludGVycHJldGVkT3B0aW9uW3RdKTtpZihuKXJldHVyblwidW5pbnRlcnByZXRlZE9wdGlvbi5cIitufX1yZXR1cm4gbnVsbH0sei5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uPVtdO2Zvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IG9iamVjdCBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb25bbl09cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5mcm9tT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl9fXJldHVybiB0fSx6LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi51bmludGVycHJldGVkT3B0aW9uPVtdKSx0LmRlZmF1bHRzJiYobi5kZXByZWNhdGVkPSExKSxudWxsIT1lLmRlcHJlY2F0ZWQmJmUuaGFzT3duUHJvcGVydHkoXCJkZXByZWNhdGVkXCIpJiYobi5kZXByZWNhdGVkPWUuZGVwcmVjYXRlZCksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LHoucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSx6KSx0LlNlcnZpY2VPcHRpb25zPShBLnByb3RvdHlwZS5kZXByZWNhdGVkPSExLEEucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249aS5lbXB0eUFycmF5LEEucHJvdG90eXBlW1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIl09XCJcIixBLnByb3RvdHlwZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdPVwiXCIsQS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBBKGUpfSxBLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigyNjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmVuY29kZShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0sdC51aW50MzIoNzk5NCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZVtcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCJdJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIikmJnQudWludDMyKDgzOTQpLnN0cmluZyhlW1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIl0pLG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5vYXV0aFNjb3Blc1wiXSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCIpJiZ0LnVpbnQzMig4NDAyKS5zdHJpbmcoZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdKSx0fSxBLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxBLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMzM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgOTk5Om8udW5pbnRlcnByZXRlZE9wdGlvbiYmby51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aHx8KG8udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksby51bmludGVycHJldGVkT3B0aW9uLnB1c2gocC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAxMDQ5Om9bXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMTA1MDpvW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl09ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LEEuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEEudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCIpJiYhaS5pc1N0cmluZyhlW1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIl0pP1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3Q6IHN0cmluZyBleHBlY3RlZFwiOm51bGwhPWVbXCIuZ29vZ2xlLmFwaS5vYXV0aFNjb3Blc1wiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCIpJiYhaS5pc1N0cmluZyhlW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl0pP1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXM6IHN0cmluZyBleHBlY3RlZFwiOm51bGx9LEEuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSYmKHRbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXT1TdHJpbmcoZVtcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCJdKSksbnVsbCE9ZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdJiYodFtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdPVN0cmluZyhlW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl0pKSx0fSxBLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi51bmludGVycHJldGVkT3B0aW9uPVtdKSx0LmRlZmF1bHRzJiYobi5kZXByZWNhdGVkPSExLG5bXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXT1cIlwiLG5bXCIuZ29vZ2xlLmFwaS5vYXV0aFNjb3Blc1wiXT1cIlwiKSxudWxsIT1lLmRlcHJlY2F0ZWQmJmUuaGFzT3duUHJvcGVydHkoXCJkZXByZWNhdGVkXCIpJiYobi5kZXByZWNhdGVkPWUuZGVwcmVjYXRlZCksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCIpJiYobltcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCJdPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSksbnVsbCE9ZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdJiZlLmhhc093blByb3BlcnR5KFwiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIikmJihuW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl09ZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdKSxufSxBLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sQSksdC5NZXRob2RPcHRpb25zPShOLnByb3RvdHlwZS5kZXByZWNhdGVkPSExLE4ucHJvdG90eXBlLmlkZW1wb3RlbmN5TGV2ZWw9MCxOLnByb3RvdHlwZS51bmludGVycHJldGVkT3B0aW9uPWkuZW1wdHlBcnJheSxOLnByb3RvdHlwZVtcIi5nb29nbGUubG9uZ3J1bm5pbmcub3BlcmF0aW9uSW5mb1wiXT1udWxsLE4ucHJvdG90eXBlW1wiLmdvb2dsZS5hcGkuaHR0cFwiXT1udWxsLE4ucHJvdG90eXBlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdPWkuZW1wdHlBcnJheSxOLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IE4oZSl9LE4uZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuZGVwcmVjYXRlZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlcHJlY2F0ZWRcIikmJnQudWludDMyKDI2NCkuYm9vbChlLmRlcHJlY2F0ZWQpLG51bGwhPWUuaWRlbXBvdGVuY3lMZXZlbCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlkZW1wb3RlbmN5TGV2ZWxcIikmJnQudWludDMyKDI3MikuaW50MzIoZS5pZGVtcG90ZW5jeUxldmVsKSxudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmVuY29kZShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0sdC51aW50MzIoNzk5NCkuZm9yaygpKS5sZGVsaW0oKTtpZihudWxsIT1lW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCIpJiZwLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb25JbmZvLmVuY29kZShlW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdLHQudWludDMyKDgzOTQpLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXSYmZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXS5sZW5ndGgpZm9yKG49MDtuPGVbXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl0ubGVuZ3RoOysrbil0LnVpbnQzMig4NDEwKS5zdHJpbmcoZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtuXSk7cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiLmdvb2dsZS5hcGkuaHR0cFwiKSYmcC5nb29nbGUuYXBpLkh0dHBSdWxlLmVuY29kZShlW1wiLmdvb2dsZS5hcGkuaHR0cFwiXSx0LnVpbnQzMig1NzgzNjU4MjYpLmZvcmsoKSkubGRlbGltKCksdH0sTi5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sTi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMzM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzQ6by5pZGVtcG90ZW5jeUxldmVsPWUuaW50MzIoKTticmVhaztjYXNlIDk5OTpvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKHAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTA0OTpvW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdPXAuZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbkluZm8uZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA3MjI5NTcyODpvW1wiLmdvb2dsZS5hcGkuaHR0cFwiXT1wLmdvb2dsZS5hcGkuSHR0cFJ1bGUuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSAxMDUxOm9bXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl0mJm9bXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl0ubGVuZ3RofHwob1tcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT1bXSksb1tcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXS5wdXNoKGUuc3RyaW5nKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sTi5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sTi52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmRlcHJlY2F0ZWQpcmV0dXJuXCJkZXByZWNhdGVkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5pZGVtcG90ZW5jeUxldmVsJiZlLmhhc093blByb3BlcnR5KFwiaWRlbXBvdGVuY3lMZXZlbFwiKSlzd2l0Y2goZS5pZGVtcG90ZW5jeUxldmVsKXtkZWZhdWx0OnJldHVyblwiaWRlbXBvdGVuY3lMZXZlbDogZW51bSB2YWx1ZSBleHBlY3RlZFwiO2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOn1pZihudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJ1bmludGVycHJldGVkT3B0aW9uXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXJldHVyblwidW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7Kyt0KWlmKG49cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi52ZXJpZnkoZS51bmludGVycHJldGVkT3B0aW9uW3RdKSlyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn12YXIgbjtpZihudWxsIT1lW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdJiZlLmhhc093blByb3BlcnR5KFwiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCIpJiYobj1wLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb25JbmZvLnZlcmlmeShlW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdKSkpcmV0dXJuXCIuZ29vZ2xlLmxvbmdydW5uaW5nLm9wZXJhdGlvbkluZm8uXCIrbjtpZihudWxsIT1lW1wiLmdvb2dsZS5hcGkuaHR0cFwiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLmh0dHBcIikmJihuPXAuZ29vZ2xlLmFwaS5IdHRwUnVsZS52ZXJpZnkoZVtcIi5nb29nbGUuYXBpLmh0dHBcIl0pKSlyZXR1cm5cIi5nb29nbGUuYXBpLmh0dHAuXCIrbjtpZihudWxsIT1lW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdJiZlLmhhc093blByb3BlcnR5KFwiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCIpKXtpZighQXJyYXkuaXNBcnJheShlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdKSlyZXR1cm5cIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXS5sZW5ndGg7Kyt0KWlmKCFpLmlzU3RyaW5nKGVbXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl1bdF0pKXJldHVyblwiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlOiBzdHJpbmdbXSBleHBlY3RlZFwifXJldHVybiBudWxsfSxOLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnM7c3dpdGNoKG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUuaWRlbXBvdGVuY3lMZXZlbCl7Y2FzZVwiSURFTVBPVEVOQ1lfVU5LTk9XTlwiOmNhc2UgMDp0LmlkZW1wb3RlbmN5TGV2ZWw9MDticmVhaztjYXNlXCJOT19TSURFX0VGRkVDVFNcIjpjYXNlIDE6dC5pZGVtcG90ZW5jeUxldmVsPTE7YnJlYWs7Y2FzZVwiSURFTVBPVEVOVFwiOmNhc2UgMjp0LmlkZW1wb3RlbmN5TGV2ZWw9Mn1pZihlLnVuaW50ZXJwcmV0ZWRPcHRpb24pe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPXAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1pZihudWxsIT1lW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZVtcIi5nb29nbGUubG9uZ3J1bm5pbmcub3BlcmF0aW9uSW5mb1wiXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvOiBvYmplY3QgZXhwZWN0ZWRcIik7dFtcIi5nb29nbGUubG9uZ3J1bm5pbmcub3BlcmF0aW9uSW5mb1wiXT1wLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb25JbmZvLmZyb21PYmplY3QoZVtcIi5nb29nbGUubG9uZ3J1bm5pbmcub3BlcmF0aW9uSW5mb1wiXSl9aWYobnVsbCE9ZVtcIi5nb29nbGUuYXBpLmh0dHBcIl0pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlW1wiLmdvb2dsZS5hcGkuaHR0cFwiXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuLmdvb2dsZS5hcGkuaHR0cDogb2JqZWN0IGV4cGVjdGVkXCIpO3RbXCIuZ29vZ2xlLmFwaS5odHRwXCJdPXAuZ29vZ2xlLmFwaS5IdHRwUnVsZS5mcm9tT2JqZWN0KGVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdKX1pZihlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdKXtpZighQXJyYXkuaXNBcnJheShlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlOiBhcnJheSBleHBlY3RlZFwiKTt0W1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdPVtdO2ZvcihuPTA7bjxlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdLmxlbmd0aDsrK24pdFtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtuXT1TdHJpbmcoZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtuXSl9cmV0dXJuIHR9LE4udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sbltcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT1bXSksdC5kZWZhdWx0cyYmKG4uZGVwcmVjYXRlZD0hMSxuLmlkZW1wb3RlbmN5TGV2ZWw9dC5lbnVtcz09PVN0cmluZz9cIklERU1QT1RFTkNZX1VOS05PV05cIjowLG5bXCIuZ29vZ2xlLmxvbmdydW5uaW5nLm9wZXJhdGlvbkluZm9cIl09bnVsbCxuW1wiLmdvb2dsZS5hcGkuaHR0cFwiXT1udWxsKSxudWxsIT1lLmRlcHJlY2F0ZWQmJmUuaGFzT3duUHJvcGVydHkoXCJkZXByZWNhdGVkXCIpJiYobi5kZXByZWNhdGVkPWUuZGVwcmVjYXRlZCksbnVsbCE9ZS5pZGVtcG90ZW5jeUxldmVsJiZlLmhhc093blByb3BlcnR5KFwiaWRlbXBvdGVuY3lMZXZlbFwiKSYmKG4uaWRlbXBvdGVuY3lMZXZlbD10LmVudW1zPT09U3RyaW5nP3AuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbFtlLmlkZW1wb3RlbmN5TGV2ZWxdOmUuaWRlbXBvdGVuY3lMZXZlbCksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9aWYobnVsbCE9ZVtcIi5nb29nbGUubG9uZ3J1bm5pbmcub3BlcmF0aW9uSW5mb1wiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUubG9uZ3J1bm5pbmcub3BlcmF0aW9uSW5mb1wiKSYmKG5bXCIuZ29vZ2xlLmxvbmdydW5uaW5nLm9wZXJhdGlvbkluZm9cIl09cC5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uSW5mby50b09iamVjdChlW1wiLmdvb2dsZS5sb25ncnVubmluZy5vcGVyYXRpb25JbmZvXCJdLHQpKSxlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdJiZlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdLmxlbmd0aCl7bltcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT1bXTtmb3Iobz0wO288ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXS5sZW5ndGg7KytvKW5bXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl1bb109ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtvXX1yZXR1cm4gbnVsbCE9ZVtcIi5nb29nbGUuYXBpLmh0dHBcIl0mJmUuaGFzT3duUHJvcGVydHkoXCIuZ29vZ2xlLmFwaS5odHRwXCIpJiYobltcIi5nb29nbGUuYXBpLmh0dHBcIl09cC5nb29nbGUuYXBpLkh0dHBSdWxlLnRvT2JqZWN0KGVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdLHQpKSxufSxOLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sTi5JZGVtcG90ZW5jeUxldmVsPShuPXt9LChlPU9iamVjdC5jcmVhdGUobikpW25bMF09XCJJREVNUE9URU5DWV9VTktOT1dOXCJdPTAsZVtuWzFdPVwiTk9fU0lERV9FRkZFQ1RTXCJdPTEsZVtuWzJdPVwiSURFTVBPVEVOVFwiXT0yLGUpLE4pLHQuVW5pbnRlcnByZXRlZE9wdGlvbj0oSS5wcm90b3R5cGUubmFtZT1pLmVtcHR5QXJyYXksSS5wcm90b3R5cGUuaWRlbnRpZmllclZhbHVlPVwiXCIsSS5wcm90b3R5cGUucG9zaXRpdmVJbnRWYWx1ZT1pLkxvbmc/aS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxJLnByb3RvdHlwZS5uZWdhdGl2ZUludFZhbHVlPWkuTG9uZz9pLkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEkucHJvdG90eXBlLmRvdWJsZVZhbHVlPTAsSS5wcm90b3R5cGUuc3RyaW5nVmFsdWU9aS5uZXdCdWZmZXIoW10pLEkucHJvdG90eXBlLmFnZ3JlZ2F0ZVZhbHVlPVwiXCIsSS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJKGUpfSxJLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJmUubmFtZS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLm5hbWUubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0LmVuY29kZShlLm5hbWVbbl0sdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIG51bGwhPWUuaWRlbnRpZmllclZhbHVlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRlbnRpZmllclZhbHVlXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUuaWRlbnRpZmllclZhbHVlKSxudWxsIT1lLnBvc2l0aXZlSW50VmFsdWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwb3NpdGl2ZUludFZhbHVlXCIpJiZ0LnVpbnQzMigzMikudWludDY0KGUucG9zaXRpdmVJbnRWYWx1ZSksbnVsbCE9ZS5uZWdhdGl2ZUludFZhbHVlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmVnYXRpdmVJbnRWYWx1ZVwiKSYmdC51aW50MzIoNDApLmludDY0KGUubmVnYXRpdmVJbnRWYWx1ZSksbnVsbCE9ZS5kb3VibGVWYWx1ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRvdWJsZVZhbHVlXCIpJiZ0LnVpbnQzMig0OSkuZG91YmxlKGUuZG91YmxlVmFsdWUpLG51bGwhPWUuc3RyaW5nVmFsdWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJpbmdWYWx1ZVwiKSYmdC51aW50MzIoNTgpLmJ5dGVzKGUuc3RyaW5nVmFsdWUpLG51bGwhPWUuYWdncmVnYXRlVmFsdWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhZ2dyZWdhdGVWYWx1ZVwiKSYmdC51aW50MzIoNjYpLnN0cmluZyhlLmFnZ3JlZ2F0ZVZhbHVlKSx0fSxJLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxJLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAyOm8ubmFtZSYmby5uYW1lLmxlbmd0aHx8KG8ubmFtZT1bXSksby5uYW1lLnB1c2gocC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydC5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAzOm8uaWRlbnRpZmllclZhbHVlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA0Om8ucG9zaXRpdmVJbnRWYWx1ZT1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNTpvLm5lZ2F0aXZlSW50VmFsdWU9ZS5pbnQ2NCgpO2JyZWFrO2Nhc2UgNjpvLmRvdWJsZVZhbHVlPWUuZG91YmxlKCk7YnJlYWs7Y2FzZSA3Om8uc3RyaW5nVmFsdWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgODpvLmFnZ3JlZ2F0ZVZhbHVlPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxJLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxJLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm5hbWUpKXJldHVyblwibmFtZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUubmFtZS5sZW5ndGg7Kyt0KXt2YXIgbj1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0LnZlcmlmeShlLm5hbWVbdF0pO2lmKG4pcmV0dXJuXCJuYW1lLlwiK259fXJldHVybiBudWxsIT1lLmlkZW50aWZpZXJWYWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImlkZW50aWZpZXJWYWx1ZVwiKSYmIWkuaXNTdHJpbmcoZS5pZGVudGlmaWVyVmFsdWUpP1wiaWRlbnRpZmllclZhbHVlOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLnBvc2l0aXZlSW50VmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJwb3NpdGl2ZUludFZhbHVlXCIpJiYhKGkuaXNJbnRlZ2VyKGUucG9zaXRpdmVJbnRWYWx1ZSl8fGUucG9zaXRpdmVJbnRWYWx1ZSYmaS5pc0ludGVnZXIoZS5wb3NpdGl2ZUludFZhbHVlLmxvdykmJmkuaXNJbnRlZ2VyKGUucG9zaXRpdmVJbnRWYWx1ZS5oaWdoKSk/XCJwb3NpdGl2ZUludFZhbHVlOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjpudWxsIT1lLm5lZ2F0aXZlSW50VmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJuZWdhdGl2ZUludFZhbHVlXCIpJiYhKGkuaXNJbnRlZ2VyKGUubmVnYXRpdmVJbnRWYWx1ZSl8fGUubmVnYXRpdmVJbnRWYWx1ZSYmaS5pc0ludGVnZXIoZS5uZWdhdGl2ZUludFZhbHVlLmxvdykmJmkuaXNJbnRlZ2VyKGUubmVnYXRpdmVJbnRWYWx1ZS5oaWdoKSk/XCJuZWdhdGl2ZUludFZhbHVlOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjpudWxsIT1lLmRvdWJsZVZhbHVlJiZlLmhhc093blByb3BlcnR5KFwiZG91YmxlVmFsdWVcIikmJlwibnVtYmVyXCIhPXR5cGVvZiBlLmRvdWJsZVZhbHVlP1wiZG91YmxlVmFsdWU6IG51bWJlciBleHBlY3RlZFwiOm51bGwhPWUuc3RyaW5nVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJzdHJpbmdWYWx1ZVwiKSYmIShlLnN0cmluZ1ZhbHVlJiZcIm51bWJlclwiPT10eXBlb2YgZS5zdHJpbmdWYWx1ZS5sZW5ndGh8fGkuaXNTdHJpbmcoZS5zdHJpbmdWYWx1ZSkpP1wic3RyaW5nVmFsdWU6IGJ1ZmZlciBleHBlY3RlZFwiOm51bGwhPWUuYWdncmVnYXRlVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJhZ2dyZWdhdGVWYWx1ZVwiKSYmIWkuaXNTdHJpbmcoZS5hZ2dyZWdhdGVWYWx1ZSk/XCJhZ2dyZWdhdGVWYWx1ZTogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0sSS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uO2lmKGUubmFtZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5uYW1lKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24ubmFtZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5uYW1lPVtdO2Zvcih2YXIgbj0wO248ZS5uYW1lLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm5hbWVbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLm5hbWU6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm5hbWVbbl09cC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydC5mcm9tT2JqZWN0KGUubmFtZVtuXSl9fXJldHVybiBudWxsIT1lLmlkZW50aWZpZXJWYWx1ZSYmKHQuaWRlbnRpZmllclZhbHVlPVN0cmluZyhlLmlkZW50aWZpZXJWYWx1ZSkpLG51bGwhPWUucG9zaXRpdmVJbnRWYWx1ZSYmKGkuTG9uZz8odC5wb3NpdGl2ZUludFZhbHVlPWkuTG9uZy5mcm9tVmFsdWUoZS5wb3NpdGl2ZUludFZhbHVlKSkudW5zaWduZWQ9ITA6XCJzdHJpbmdcIj09dHlwZW9mIGUucG9zaXRpdmVJbnRWYWx1ZT90LnBvc2l0aXZlSW50VmFsdWU9cGFyc2VJbnQoZS5wb3NpdGl2ZUludFZhbHVlLDEwKTpcIm51bWJlclwiPT10eXBlb2YgZS5wb3NpdGl2ZUludFZhbHVlP3QucG9zaXRpdmVJbnRWYWx1ZT1lLnBvc2l0aXZlSW50VmFsdWU6XCJvYmplY3RcIj09dHlwZW9mIGUucG9zaXRpdmVJbnRWYWx1ZSYmKHQucG9zaXRpdmVJbnRWYWx1ZT1uZXcgaS5Mb25nQml0cyhlLnBvc2l0aXZlSW50VmFsdWUubG93Pj4+MCxlLnBvc2l0aXZlSW50VmFsdWUuaGlnaD4+PjApLnRvTnVtYmVyKCEwKSkpLG51bGwhPWUubmVnYXRpdmVJbnRWYWx1ZSYmKGkuTG9uZz8odC5uZWdhdGl2ZUludFZhbHVlPWkuTG9uZy5mcm9tVmFsdWUoZS5uZWdhdGl2ZUludFZhbHVlKSkudW5zaWduZWQ9ITE6XCJzdHJpbmdcIj09dHlwZW9mIGUubmVnYXRpdmVJbnRWYWx1ZT90Lm5lZ2F0aXZlSW50VmFsdWU9cGFyc2VJbnQoZS5uZWdhdGl2ZUludFZhbHVlLDEwKTpcIm51bWJlclwiPT10eXBlb2YgZS5uZWdhdGl2ZUludFZhbHVlP3QubmVnYXRpdmVJbnRWYWx1ZT1lLm5lZ2F0aXZlSW50VmFsdWU6XCJvYmplY3RcIj09dHlwZW9mIGUubmVnYXRpdmVJbnRWYWx1ZSYmKHQubmVnYXRpdmVJbnRWYWx1ZT1uZXcgaS5Mb25nQml0cyhlLm5lZ2F0aXZlSW50VmFsdWUubG93Pj4+MCxlLm5lZ2F0aXZlSW50VmFsdWUuaGlnaD4+PjApLnRvTnVtYmVyKCkpKSxudWxsIT1lLmRvdWJsZVZhbHVlJiYodC5kb3VibGVWYWx1ZT1OdW1iZXIoZS5kb3VibGVWYWx1ZSkpLG51bGwhPWUuc3RyaW5nVmFsdWUmJihcInN0cmluZ1wiPT10eXBlb2YgZS5zdHJpbmdWYWx1ZT9pLmJhc2U2NC5kZWNvZGUoZS5zdHJpbmdWYWx1ZSx0LnN0cmluZ1ZhbHVlPWkubmV3QnVmZmVyKGkuYmFzZTY0Lmxlbmd0aChlLnN0cmluZ1ZhbHVlKSksMCk6ZS5zdHJpbmdWYWx1ZS5sZW5ndGgmJih0LnN0cmluZ1ZhbHVlPWUuc3RyaW5nVmFsdWUpKSxudWxsIT1lLmFnZ3JlZ2F0ZVZhbHVlJiYodC5hZ2dyZWdhdGVWYWx1ZT1TdHJpbmcoZS5hZ2dyZWdhdGVWYWx1ZSkpLHR9LEkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG8ubmFtZT1bXSksdC5kZWZhdWx0cyYmKG8uaWRlbnRpZmllclZhbHVlPVwiXCIsaS5Mb25nPyhuPW5ldyBpLkxvbmcoMCwwLCEwKSxvLnBvc2l0aXZlSW50VmFsdWU9dC5sb25ncz09PVN0cmluZz9uLnRvU3RyaW5nKCk6dC5sb25ncz09PU51bWJlcj9uLnRvTnVtYmVyKCk6bik6by5wb3NpdGl2ZUludFZhbHVlPXQubG9uZ3M9PT1TdHJpbmc/XCIwXCI6MCxpLkxvbmc/KG49bmV3IGkuTG9uZygwLDAsITEpLG8ubmVnYXRpdmVJbnRWYWx1ZT10LmxvbmdzPT09U3RyaW5nP24udG9TdHJpbmcoKTp0LmxvbmdzPT09TnVtYmVyP24udG9OdW1iZXIoKTpuKTpvLm5lZ2F0aXZlSW50VmFsdWU9dC5sb25ncz09PVN0cmluZz9cIjBcIjowLG8uZG91YmxlVmFsdWU9MCx0LmJ5dGVzPT09U3RyaW5nP28uc3RyaW5nVmFsdWU9XCJcIjooby5zdHJpbmdWYWx1ZT1bXSx0LmJ5dGVzIT09QXJyYXkmJihvLnN0cmluZ1ZhbHVlPWkubmV3QnVmZmVyKG8uc3RyaW5nVmFsdWUpKSksby5hZ2dyZWdhdGVWYWx1ZT1cIlwiKSxlLm5hbWUmJmUubmFtZS5sZW5ndGgpe28ubmFtZT1bXTtmb3IodmFyIHI9MDtyPGUubmFtZS5sZW5ndGg7KytyKW8ubmFtZVtyXT1wLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0LnRvT2JqZWN0KGUubmFtZVtyXSx0KX1yZXR1cm4gbnVsbCE9ZS5pZGVudGlmaWVyVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJpZGVudGlmaWVyVmFsdWVcIikmJihvLmlkZW50aWZpZXJWYWx1ZT1lLmlkZW50aWZpZXJWYWx1ZSksbnVsbCE9ZS5wb3NpdGl2ZUludFZhbHVlJiZlLmhhc093blByb3BlcnR5KFwicG9zaXRpdmVJbnRWYWx1ZVwiKSYmKFwibnVtYmVyXCI9PXR5cGVvZiBlLnBvc2l0aXZlSW50VmFsdWU/by5wb3NpdGl2ZUludFZhbHVlPXQubG9uZ3M9PT1TdHJpbmc/U3RyaW5nKGUucG9zaXRpdmVJbnRWYWx1ZSk6ZS5wb3NpdGl2ZUludFZhbHVlOm8ucG9zaXRpdmVJbnRWYWx1ZT10LmxvbmdzPT09U3RyaW5nP2kuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlLnBvc2l0aXZlSW50VmFsdWUpOnQubG9uZ3M9PT1OdW1iZXI/bmV3IGkuTG9uZ0JpdHMoZS5wb3NpdGl2ZUludFZhbHVlLmxvdz4+PjAsZS5wb3NpdGl2ZUludFZhbHVlLmhpZ2g+Pj4wKS50b051bWJlcighMCk6ZS5wb3NpdGl2ZUludFZhbHVlKSxudWxsIT1lLm5lZ2F0aXZlSW50VmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJuZWdhdGl2ZUludFZhbHVlXCIpJiYoXCJudW1iZXJcIj09dHlwZW9mIGUubmVnYXRpdmVJbnRWYWx1ZT9vLm5lZ2F0aXZlSW50VmFsdWU9dC5sb25ncz09PVN0cmluZz9TdHJpbmcoZS5uZWdhdGl2ZUludFZhbHVlKTplLm5lZ2F0aXZlSW50VmFsdWU6by5uZWdhdGl2ZUludFZhbHVlPXQubG9uZ3M9PT1TdHJpbmc/aS5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUubmVnYXRpdmVJbnRWYWx1ZSk6dC5sb25ncz09PU51bWJlcj9uZXcgaS5Mb25nQml0cyhlLm5lZ2F0aXZlSW50VmFsdWUubG93Pj4+MCxlLm5lZ2F0aXZlSW50VmFsdWUuaGlnaD4+PjApLnRvTnVtYmVyKCk6ZS5uZWdhdGl2ZUludFZhbHVlKSxudWxsIT1lLmRvdWJsZVZhbHVlJiZlLmhhc093blByb3BlcnR5KFwiZG91YmxlVmFsdWVcIikmJihvLmRvdWJsZVZhbHVlPXQuanNvbiYmIWlzRmluaXRlKGUuZG91YmxlVmFsdWUpP1N0cmluZyhlLmRvdWJsZVZhbHVlKTplLmRvdWJsZVZhbHVlKSxudWxsIT1lLnN0cmluZ1ZhbHVlJiZlLmhhc093blByb3BlcnR5KFwic3RyaW5nVmFsdWVcIikmJihvLnN0cmluZ1ZhbHVlPXQuYnl0ZXM9PT1TdHJpbmc/aS5iYXNlNjQuZW5jb2RlKGUuc3RyaW5nVmFsdWUsMCxlLnN0cmluZ1ZhbHVlLmxlbmd0aCk6dC5ieXRlcz09PUFycmF5P0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUuc3RyaW5nVmFsdWUpOmUuc3RyaW5nVmFsdWUpLG51bGwhPWUuYWdncmVnYXRlVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJhZ2dyZWdhdGVWYWx1ZVwiKSYmKG8uYWdncmVnYXRlVmFsdWU9ZS5hZ2dyZWdhdGVWYWx1ZSksb30sSS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEkuTmFtZVBhcnQ9KHEucHJvdG90eXBlLm5hbWVQYXJ0PVwiXCIscS5wcm90b3R5cGUuaXNFeHRlbnNpb249ITEscS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBxKGUpfSxxLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHIuY3JlYXRlKCkpLnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZVBhcnQpLHQudWludDMyKDE2KS5ib29sKGUuaXNFeHRlbnNpb24pLHR9LHEuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LHEuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnQ7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5uYW1lUGFydD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmlzRXh0ZW5zaW9uPWUuYm9vbCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1pZighby5oYXNPd25Qcm9wZXJ0eShcIm5hbWVQYXJ0XCIpKXRocm93IGkuUHJvdG9jb2xFcnJvcihcIm1pc3NpbmcgcmVxdWlyZWQgJ25hbWVQYXJ0J1wiLHtpbnN0YW5jZTpvfSk7aWYoby5oYXNPd25Qcm9wZXJ0eShcImlzRXh0ZW5zaW9uXCIpKXJldHVybiBvO3Rocm93IGkuUHJvdG9jb2xFcnJvcihcIm1pc3NpbmcgcmVxdWlyZWQgJ2lzRXh0ZW5zaW9uJ1wiLHtpbnN0YW5jZTpvfSl9LHEuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LHEudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOmkuaXNTdHJpbmcoZS5uYW1lUGFydCk/XCJib29sZWFuXCIhPXR5cGVvZiBlLmlzRXh0ZW5zaW9uP1wiaXNFeHRlbnNpb246IGJvb2xlYW4gZXhwZWN0ZWRcIjpudWxsOlwibmFtZVBhcnQ6IHN0cmluZyBleHBlY3RlZFwifSxxLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0P2U6KHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnQsbnVsbCE9ZS5uYW1lUGFydCYmKHQubmFtZVBhcnQ9U3RyaW5nKGUubmFtZVBhcnQpKSxudWxsIT1lLmlzRXh0ZW5zaW9uJiYodC5pc0V4dGVuc2lvbj1Cb29sZWFuKGUuaXNFeHRlbnNpb24pKSx0KX0scS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZVBhcnQ9XCJcIixuLmlzRXh0ZW5zaW9uPSExKSxudWxsIT1lLm5hbWVQYXJ0JiZlLmhhc093blByb3BlcnR5KFwibmFtZVBhcnRcIikmJihuLm5hbWVQYXJ0PWUubmFtZVBhcnQpLG51bGwhPWUuaXNFeHRlbnNpb24mJmUuaGFzT3duUHJvcGVydHkoXCJpc0V4dGVuc2lvblwiKSYmKG4uaXNFeHRlbnNpb249ZS5pc0V4dGVuc2lvbiksbn0scS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LHEpLEkpLHQuU291cmNlQ29kZUluZm89KFkucHJvdG90eXBlLmxvY2F0aW9uPWkuZW1wdHlBcnJheSxZLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFkoZSl9LFkuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubG9jYXRpb24mJmUubG9jYXRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5sb2NhdGlvbi5sZW5ndGg7KytuKXAuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLmVuY29kZShlLmxvY2F0aW9uW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxZLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxZLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mbztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09MT8oby5sb2NhdGlvbiYmby5sb2NhdGlvbi5sZW5ndGh8fChvLmxvY2F0aW9uPVtdKSxvLmxvY2F0aW9uLnB1c2gocC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LFkuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFkudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubG9jYXRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJsb2NhdGlvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5sb2NhdGlvbikpcmV0dXJuXCJsb2NhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUubG9jYXRpb24ubGVuZ3RoOysrdCl7dmFyIG49cC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24udmVyaWZ5KGUubG9jYXRpb25bdF0pO2lmKG4pcmV0dXJuXCJsb2NhdGlvbi5cIitufX1yZXR1cm4gbnVsbH0sWS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mbylyZXR1cm4gZTt2YXIgdD1uZXcgcC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm87aWYoZS5sb2NhdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS5sb2NhdGlvbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5sb2NhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7dC5sb2NhdGlvbj1bXTtmb3IodmFyIG49MDtuPGUubG9jYXRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUubG9jYXRpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5sb2NhdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QubG9jYXRpb25bbl09cC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24uZnJvbU9iamVjdChlLmxvY2F0aW9uW25dKX19cmV0dXJuIHR9LFkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLmxvY2F0aW9uPVtdKSxlLmxvY2F0aW9uJiZlLmxvY2F0aW9uLmxlbmd0aCl7bi5sb2NhdGlvbj1bXTtmb3IodmFyIG89MDtvPGUubG9jYXRpb24ubGVuZ3RoOysrbyluLmxvY2F0aW9uW29dPXAuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLnRvT2JqZWN0KGUubG9jYXRpb25bb10sdCl9cmV0dXJuIG59LFkucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxZLkxvY2F0aW9uPShSLnByb3RvdHlwZS5wYXRoPWkuZW1wdHlBcnJheSxSLnByb3RvdHlwZS5zcGFuPWkuZW1wdHlBcnJheSxSLnByb3RvdHlwZS5sZWFkaW5nQ29tbWVudHM9XCJcIixSLnByb3RvdHlwZS50cmFpbGluZ0NvbW1lbnRzPVwiXCIsUi5wcm90b3R5cGUubGVhZGluZ0RldGFjaGVkQ29tbWVudHM9aS5lbXB0eUFycmF5LFIuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUihlKX0sUi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5wYXRoJiZlLnBhdGgubGVuZ3RoKXt0LnVpbnQzMigxMCkuZm9yaygpO2Zvcih2YXIgbj0wO248ZS5wYXRoLmxlbmd0aDsrK24pdC5pbnQzMihlLnBhdGhbbl0pO3QubGRlbGltKCl9aWYobnVsbCE9ZS5zcGFuJiZlLnNwYW4ubGVuZ3RoKXt0LnVpbnQzMigxOCkuZm9yaygpO2ZvcihuPTA7bjxlLnNwYW4ubGVuZ3RoOysrbil0LmludDMyKGUuc3BhbltuXSk7dC5sZGVsaW0oKX1pZihudWxsIT1lLmxlYWRpbmdDb21tZW50cyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxlYWRpbmdDb21tZW50c1wiKSYmdC51aW50MzIoMjYpLnN0cmluZyhlLmxlYWRpbmdDb21tZW50cyksbnVsbCE9ZS50cmFpbGluZ0NvbW1lbnRzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhaWxpbmdDb21tZW50c1wiKSYmdC51aW50MzIoMzQpLnN0cmluZyhlLnRyYWlsaW5nQ29tbWVudHMpLG51bGwhPWUubGVhZGluZ0RldGFjaGVkQ29tbWVudHMmJmUubGVhZGluZ0RldGFjaGVkQ29tbWVudHMubGVuZ3RoKWZvcihuPTA7bjxlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzLmxlbmd0aDsrK24pdC51aW50MzIoNTApLnN0cmluZyhlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzW25dKTtyZXR1cm4gdH0sUi5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sUi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb247ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6aWYoby5wYXRoJiZvLnBhdGgubGVuZ3RofHwoby5wYXRoPVtdKSwyPT0oNyZyKSlmb3IodmFyIGk9ZS51aW50MzIoKStlLnBvcztlLnBvczxpOylvLnBhdGgucHVzaChlLmludDMyKCkpO2Vsc2Ugby5wYXRoLnB1c2goZS5pbnQzMigpKTticmVhaztjYXNlIDI6aWYoby5zcGFuJiZvLnNwYW4ubGVuZ3RofHwoby5zcGFuPVtdKSwyPT0oNyZyKSlmb3IoaT1lLnVpbnQzMigpK2UucG9zO2UucG9zPGk7KW8uc3Bhbi5wdXNoKGUuaW50MzIoKSk7ZWxzZSBvLnNwYW4ucHVzaChlLmludDMyKCkpO2JyZWFrO2Nhc2UgMzpvLmxlYWRpbmdDb21tZW50cz1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDpvLnRyYWlsaW5nQ29tbWVudHM9ZS5zdHJpbmcoKTticmVhaztjYXNlIDY6by5sZWFkaW5nRGV0YWNoZWRDb21tZW50cyYmby5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGh8fChvLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzPVtdKSxvLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzLnB1c2goZS5zdHJpbmcoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxSLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxSLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnBhdGgmJmUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnBhdGgpKXJldHVyblwicGF0aDogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUucGF0aC5sZW5ndGg7Kyt0KWlmKCFpLmlzSW50ZWdlcihlLnBhdGhbdF0pKXJldHVyblwicGF0aDogaW50ZWdlcltdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5zcGFuJiZlLmhhc093blByb3BlcnR5KFwic3BhblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5zcGFuKSlyZXR1cm5cInNwYW46IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGUuc3Bhbi5sZW5ndGg7Kyt0KWlmKCFpLmlzSW50ZWdlcihlLnNwYW5bdF0pKXJldHVyblwic3BhbjogaW50ZWdlcltdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5sZWFkaW5nQ29tbWVudHMmJmUuaGFzT3duUHJvcGVydHkoXCJsZWFkaW5nQ29tbWVudHNcIikmJiFpLmlzU3RyaW5nKGUubGVhZGluZ0NvbW1lbnRzKSlyZXR1cm5cImxlYWRpbmdDb21tZW50czogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS50cmFpbGluZ0NvbW1lbnRzJiZlLmhhc093blByb3BlcnR5KFwidHJhaWxpbmdDb21tZW50c1wiKSYmIWkuaXNTdHJpbmcoZS50cmFpbGluZ0NvbW1lbnRzKSlyZXR1cm5cInRyYWlsaW5nQ29tbWVudHM6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUubGVhZGluZ0RldGFjaGVkQ29tbWVudHMmJmUuaGFzT3duUHJvcGVydHkoXCJsZWFkaW5nRGV0YWNoZWRDb21tZW50c1wiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cykpcmV0dXJuXCJsZWFkaW5nRGV0YWNoZWRDb21tZW50czogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGg7Kyt0KWlmKCFpLmlzU3RyaW5nKGUubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbdF0pKXJldHVyblwibGVhZGluZ0RldGFjaGVkQ29tbWVudHM6IHN0cmluZ1tdIGV4cGVjdGVkXCJ9cmV0dXJuIG51bGx9LFIuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24pcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uO2lmKGUucGF0aCl7aWYoIUFycmF5LmlzQXJyYXkoZS5wYXRoKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLnBhdGg6IGFycmF5IGV4cGVjdGVkXCIpO3QucGF0aD1bXTtmb3IodmFyIG49MDtuPGUucGF0aC5sZW5ndGg7KytuKXQucGF0aFtuXT0wfGUucGF0aFtuXX1pZihlLnNwYW4pe2lmKCFBcnJheS5pc0FycmF5KGUuc3BhbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5Mb2NhdGlvbi5zcGFuOiBhcnJheSBleHBlY3RlZFwiKTt0LnNwYW49W107Zm9yKG49MDtuPGUuc3Bhbi5sZW5ndGg7KytuKXQuc3BhbltuXT0wfGUuc3BhbltuXX1pZihudWxsIT1lLmxlYWRpbmdDb21tZW50cyYmKHQubGVhZGluZ0NvbW1lbnRzPVN0cmluZyhlLmxlYWRpbmdDb21tZW50cykpLG51bGwhPWUudHJhaWxpbmdDb21tZW50cyYmKHQudHJhaWxpbmdDb21tZW50cz1TdHJpbmcoZS50cmFpbGluZ0NvbW1lbnRzKSksZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cyl7aWYoIUFycmF5LmlzQXJyYXkoZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cykpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5Mb2NhdGlvbi5sZWFkaW5nRGV0YWNoZWRDb21tZW50czogYXJyYXkgZXhwZWN0ZWRcIik7dC5sZWFkaW5nRGV0YWNoZWRDb21tZW50cz1bXTtmb3Iobj0wO248ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGg7KytuKXQubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbbl09U3RyaW5nKGUubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbbl0pfXJldHVybiB0fSxSLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5wYXRoPVtdLG4uc3Bhbj1bXSxuLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzPVtdKSx0LmRlZmF1bHRzJiYobi5sZWFkaW5nQ29tbWVudHM9XCJcIixuLnRyYWlsaW5nQ29tbWVudHM9XCJcIiksZS5wYXRoJiZlLnBhdGgubGVuZ3RoKXtuLnBhdGg9W107Zm9yKHZhciBvPTA7bzxlLnBhdGgubGVuZ3RoOysrbyluLnBhdGhbb109ZS5wYXRoW29dfWlmKGUuc3BhbiYmZS5zcGFuLmxlbmd0aCl7bi5zcGFuPVtdO2ZvcihvPTA7bzxlLnNwYW4ubGVuZ3RoOysrbyluLnNwYW5bb109ZS5zcGFuW29dfWlmKG51bGwhPWUubGVhZGluZ0NvbW1lbnRzJiZlLmhhc093blByb3BlcnR5KFwibGVhZGluZ0NvbW1lbnRzXCIpJiYobi5sZWFkaW5nQ29tbWVudHM9ZS5sZWFkaW5nQ29tbWVudHMpLG51bGwhPWUudHJhaWxpbmdDb21tZW50cyYmZS5oYXNPd25Qcm9wZXJ0eShcInRyYWlsaW5nQ29tbWVudHNcIikmJihuLnRyYWlsaW5nQ29tbWVudHM9ZS50cmFpbGluZ0NvbW1lbnRzKSxlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzJiZlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzLmxlbmd0aCl7bi5sZWFkaW5nRGV0YWNoZWRDb21tZW50cz1bXTtmb3Iobz0wO288ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGg7KytvKW4ubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbb109ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50c1tvXX1yZXR1cm4gbn0sUi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFIpLFkpLHQuR2VuZXJhdGVkQ29kZUluZm89KFcucHJvdG90eXBlLmFubm90YXRpb249aS5lbXB0eUFycmF5LFcuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgVyhlKX0sVy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5hbm5vdGF0aW9uJiZlLmFubm90YXRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5hbm5vdGF0aW9uLmxlbmd0aDsrK24pcC5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5lbmNvZGUoZS5hbm5vdGF0aW9uW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxXLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxXLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mbztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09MT8oby5hbm5vdGF0aW9uJiZvLmFubm90YXRpb24ubGVuZ3RofHwoby5hbm5vdGF0aW9uPVtdKSxvLmFubm90YXRpb24ucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLmRlY29kZShlLGUudWludDMyKCkpKSk6ZS5za2lwVHlwZSg3JnIpfXJldHVybiBvfSxXLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxXLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmFubm90YXRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJhbm5vdGF0aW9uXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmFubm90YXRpb24pKXJldHVyblwiYW5ub3RhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUuYW5ub3RhdGlvbi5sZW5ndGg7Kyt0KXt2YXIgbj1wLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLnZlcmlmeShlLmFubm90YXRpb25bdF0pO2lmKG4pcmV0dXJuXCJhbm5vdGF0aW9uLlwiK259fXJldHVybiBudWxsfSxXLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mbztpZihlLmFubm90YXRpb24pe2lmKCFBcnJheS5pc0FycmF5KGUuYW5ub3RhdGlvbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5hbm5vdGF0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LmFubm90YXRpb249W107Zm9yKHZhciBuPTA7bjxlLmFubm90YXRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuYW5ub3RhdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLmFubm90YXRpb246IG9iamVjdCBleHBlY3RlZFwiKTt0LmFubm90YXRpb25bbl09cC5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5mcm9tT2JqZWN0KGUuYW5ub3RhdGlvbltuXSl9fXJldHVybiB0fSxXLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5hbm5vdGF0aW9uPVtdKSxlLmFubm90YXRpb24mJmUuYW5ub3RhdGlvbi5sZW5ndGgpe24uYW5ub3RhdGlvbj1bXTtmb3IodmFyIG89MDtvPGUuYW5ub3RhdGlvbi5sZW5ndGg7KytvKW4uYW5ub3RhdGlvbltvXT1wLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLnRvT2JqZWN0KGUuYW5ub3RhdGlvbltvXSx0KX1yZXR1cm4gbn0sVy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFcuQW5ub3RhdGlvbj0oQy5wcm90b3R5cGUucGF0aD1pLmVtcHR5QXJyYXksQy5wcm90b3R5cGUuc291cmNlRmlsZT1cIlwiLEMucHJvdG90eXBlLmJlZ2luPTAsQy5wcm90b3R5cGUuZW5kPTAsQy5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBDKGUpfSxDLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLnBhdGgmJmUucGF0aC5sZW5ndGgpe3QudWludDMyKDEwKS5mb3JrKCk7Zm9yKHZhciBuPTA7bjxlLnBhdGgubGVuZ3RoOysrbil0LmludDMyKGUucGF0aFtuXSk7dC5sZGVsaW0oKX1yZXR1cm4gbnVsbCE9ZS5zb3VyY2VGaWxlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic291cmNlRmlsZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnNvdXJjZUZpbGUpLG51bGwhPWUuYmVnaW4mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJiZWdpblwiKSYmdC51aW50MzIoMjQpLmludDMyKGUuYmVnaW4pLG51bGwhPWUuZW5kJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZW5kXCIpJiZ0LnVpbnQzMigzMikuaW50MzIoZS5lbmQpLHR9LEMuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEMuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIGF8fChlPWEuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb247ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6aWYoby5wYXRoJiZvLnBhdGgubGVuZ3RofHwoby5wYXRoPVtdKSwyPT0oNyZyKSlmb3IodmFyIGk9ZS51aW50MzIoKStlLnBvcztlLnBvczxpOylvLnBhdGgucHVzaChlLmludDMyKCkpO2Vsc2Ugby5wYXRoLnB1c2goZS5pbnQzMigpKTticmVhaztjYXNlIDI6by5zb3VyY2VGaWxlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOm8uYmVnaW49ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNDpvLmVuZD1lLmludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxDLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxDLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnBhdGgmJmUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnBhdGgpKXJldHVyblwicGF0aDogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUucGF0aC5sZW5ndGg7Kyt0KWlmKCFpLmlzSW50ZWdlcihlLnBhdGhbdF0pKXJldHVyblwicGF0aDogaW50ZWdlcltdIGV4cGVjdGVkXCJ9cmV0dXJuIG51bGwhPWUuc291cmNlRmlsZSYmZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZUZpbGVcIikmJiFpLmlzU3RyaW5nKGUuc291cmNlRmlsZSk/XCJzb3VyY2VGaWxlOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLmJlZ2luJiZlLmhhc093blByb3BlcnR5KFwiYmVnaW5cIikmJiFpLmlzSW50ZWdlcihlLmJlZ2luKT9cImJlZ2luOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbCE9ZS5lbmQmJmUuaGFzT3duUHJvcGVydHkoXCJlbmRcIikmJiFpLmlzSW50ZWdlcihlLmVuZCk/XCJlbmQ6IGludGVnZXIgZXhwZWN0ZWRcIjpudWxsfSxDLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIHAuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb24pcmV0dXJuIGU7dmFyIHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb247aWYoZS5wYXRoKXtpZighQXJyYXkuaXNBcnJheShlLnBhdGgpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5wYXRoOiBhcnJheSBleHBlY3RlZFwiKTt0LnBhdGg9W107Zm9yKHZhciBuPTA7bjxlLnBhdGgubGVuZ3RoOysrbil0LnBhdGhbbl09MHxlLnBhdGhbbl19cmV0dXJuIG51bGwhPWUuc291cmNlRmlsZSYmKHQuc291cmNlRmlsZT1TdHJpbmcoZS5zb3VyY2VGaWxlKSksbnVsbCE9ZS5iZWdpbiYmKHQuYmVnaW49MHxlLmJlZ2luKSxudWxsIT1lLmVuZCYmKHQuZW5kPTB8ZS5lbmQpLHR9LEMudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnBhdGg9W10pLHQuZGVmYXVsdHMmJihuLnNvdXJjZUZpbGU9XCJcIixuLmJlZ2luPTAsbi5lbmQ9MCksZS5wYXRoJiZlLnBhdGgubGVuZ3RoKXtuLnBhdGg9W107Zm9yKHZhciBvPTA7bzxlLnBhdGgubGVuZ3RoOysrbyluLnBhdGhbb109ZS5wYXRoW29dfXJldHVybiBudWxsIT1lLnNvdXJjZUZpbGUmJmUuaGFzT3duUHJvcGVydHkoXCJzb3VyY2VGaWxlXCIpJiYobi5zb3VyY2VGaWxlPWUuc291cmNlRmlsZSksbnVsbCE9ZS5iZWdpbiYmZS5oYXNPd25Qcm9wZXJ0eShcImJlZ2luXCIpJiYobi5iZWdpbj1lLmJlZ2luKSxudWxsIT1lLmVuZCYmZS5oYXNPd25Qcm9wZXJ0eShcImVuZFwiKSYmKG4uZW5kPWUuZW5kKSxufSxDLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sQyksVyksdC5Bbnk9KFgucHJvdG90eXBlLnR5cGVfdXJsPVwiXCIsWC5wcm90b3R5cGUudmFsdWU9aS5uZXdCdWZmZXIoW10pLFguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgWChlKX0sWC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUudHlwZV91cmwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eXBlX3VybFwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLnR5cGVfdXJsKSxudWxsIT1lLnZhbHVlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidmFsdWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnZhbHVlKSx0fSxYLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxYLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBhfHwoZT1hLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBwLmdvb2dsZS5wcm90b2J1Zi5Bbnk7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by50eXBlX3VybD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnZhbHVlPWUuYnl0ZXMoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LFguZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYXx8KGU9bmV3IGEoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFgudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOm51bGwhPWUudHlwZV91cmwmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlX3VybFwiKSYmIWkuaXNTdHJpbmcoZS50eXBlX3VybCk/XCJ0eXBlX3VybDogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbCE9ZS52YWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpJiYhKGUudmFsdWUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLnZhbHVlLmxlbmd0aHx8aS5pc1N0cmluZyhlLnZhbHVlKSk/XCJ2YWx1ZTogYnVmZmVyIGV4cGVjdGVkXCI6bnVsbH0sWC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuQW55P2U6KHQ9bmV3IHAuZ29vZ2xlLnByb3RvYnVmLkFueSxudWxsIT1lLnR5cGVfdXJsJiYodC50eXBlX3VybD1TdHJpbmcoZS50eXBlX3VybCkpLG51bGwhPWUudmFsdWUmJihcInN0cmluZ1wiPT10eXBlb2YgZS52YWx1ZT9pLmJhc2U2NC5kZWNvZGUoZS52YWx1ZSx0LnZhbHVlPWkubmV3QnVmZmVyKGkuYmFzZTY0Lmxlbmd0aChlLnZhbHVlKSksMCk6ZS52YWx1ZS5sZW5ndGgmJih0LnZhbHVlPWUudmFsdWUpKSx0KX0sWC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4udHlwZV91cmw9XCJcIix0LmJ5dGVzPT09U3RyaW5nP24udmFsdWU9XCJcIjoobi52YWx1ZT1bXSx0LmJ5dGVzIT09QXJyYXkmJihuLnZhbHVlPWkubmV3QnVmZmVyKG4udmFsdWUpKSkpLG51bGwhPWUudHlwZV91cmwmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlX3VybFwiKSYmKG4udHlwZV91cmw9ZS50eXBlX3VybCksbnVsbCE9ZS52YWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpJiYobi52YWx1ZT10LmJ5dGVzPT09U3RyaW5nP2kuYmFzZTY0LmVuY29kZShlLnZhbHVlLDAsZS52YWx1ZS5sZW5ndGgpOnQuYnl0ZXM9PT1BcnJheT9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLnZhbHVlKTplLnZhbHVlKSxufSxYLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sWCksdC5EdXJhdGlvbj0oSy5wcm90b3R5cGUuc2Vjb25kcz1pLkxvbmc/aS5Mb25nLmZyb21CaXRzKDAsMCwhMSk6MCxLLnByb3RvdHlwZS5uYW5vcz0wLEsuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSyhlKX0sSy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuc2Vjb25kcyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlY29uZHNcIikmJnQudWludDMyKDgpLmludDY0KGUuc2Vjb25kcyksbnVsbCE9ZS5uYW5vcyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbm9zXCIpJiZ0LnVpbnQzMigxNikuaW50MzIoZS5uYW5vcyksdH0sSy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sSy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucHJvdG9idWYuRHVyYXRpb247ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5zZWNvbmRzPWUuaW50NjQoKTticmVhaztjYXNlIDI6by5uYW5vcz1lLmludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxLLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxLLnZlcmlmeT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWU/XCJvYmplY3QgZXhwZWN0ZWRcIjpudWxsIT1lLnNlY29uZHMmJmUuaGFzT3duUHJvcGVydHkoXCJzZWNvbmRzXCIpJiYhKGkuaXNJbnRlZ2VyKGUuc2Vjb25kcyl8fGUuc2Vjb25kcyYmaS5pc0ludGVnZXIoZS5zZWNvbmRzLmxvdykmJmkuaXNJbnRlZ2VyKGUuc2Vjb25kcy5oaWdoKSk/XCJzZWNvbmRzOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjpudWxsIT1lLm5hbm9zJiZlLmhhc093blByb3BlcnR5KFwibmFub3NcIikmJiFpLmlzSW50ZWdlcihlLm5hbm9zKT9cIm5hbm9zOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbH0sSy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgcC5nb29nbGUucHJvdG9idWYuRHVyYXRpb24/ZToodD1uZXcgcC5nb29nbGUucHJvdG9idWYuRHVyYXRpb24sbnVsbCE9ZS5zZWNvbmRzJiYoaS5Mb25nPyh0LnNlY29uZHM9aS5Mb25nLmZyb21WYWx1ZShlLnNlY29uZHMpKS51bnNpZ25lZD0hMTpcInN0cmluZ1wiPT10eXBlb2YgZS5zZWNvbmRzP3Quc2Vjb25kcz1wYXJzZUludChlLnNlY29uZHMsMTApOlwibnVtYmVyXCI9PXR5cGVvZiBlLnNlY29uZHM/dC5zZWNvbmRzPWUuc2Vjb25kczpcIm9iamVjdFwiPT10eXBlb2YgZS5zZWNvbmRzJiYodC5zZWNvbmRzPW5ldyBpLkxvbmdCaXRzKGUuc2Vjb25kcy5sb3c+Pj4wLGUuc2Vjb25kcy5oaWdoPj4+MCkudG9OdW1iZXIoKSkpLG51bGwhPWUubmFub3MmJih0Lm5hbm9zPTB8ZS5uYW5vcyksdCl9LEsudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKGkuTG9uZz8obj1uZXcgaS5Mb25nKDAsMCwhMSksby5zZWNvbmRzPXQubG9uZ3M9PT1TdHJpbmc/bi50b1N0cmluZygpOnQubG9uZ3M9PT1OdW1iZXI/bi50b051bWJlcigpOm4pOm8uc2Vjb25kcz10LmxvbmdzPT09U3RyaW5nP1wiMFwiOjAsby5uYW5vcz0wKSxudWxsIT1lLnNlY29uZHMmJmUuaGFzT3duUHJvcGVydHkoXCJzZWNvbmRzXCIpJiYoXCJudW1iZXJcIj09dHlwZW9mIGUuc2Vjb25kcz9vLnNlY29uZHM9dC5sb25ncz09PVN0cmluZz9TdHJpbmcoZS5zZWNvbmRzKTplLnNlY29uZHM6by5zZWNvbmRzPXQubG9uZ3M9PT1TdHJpbmc/aS5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUuc2Vjb25kcyk6dC5sb25ncz09PU51bWJlcj9uZXcgaS5Mb25nQml0cyhlLnNlY29uZHMubG93Pj4+MCxlLnNlY29uZHMuaGlnaD4+PjApLnRvTnVtYmVyKCk6ZS5zZWNvbmRzKSxudWxsIT1lLm5hbm9zJiZlLmhhc093blByb3BlcnR5KFwibmFub3NcIikmJihvLm5hbm9zPWUubmFub3MpLG99LEsucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxLKSx0LkVtcHR5PShRLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFEoZSl9LFEuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKX0sUS5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sUS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3QsdD1uZXcgcC5nb29nbGUucHJvdG9idWYuRW1wdHk7ZS5wb3M8bjspe3ZhciBvPWUudWludDMyKCk7ZS5za2lwVHlwZSg3Jm8pfXJldHVybiB0fSxRLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGF8fChlPW5ldyBhKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxRLnZlcmlmeT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWU/XCJvYmplY3QgZXhwZWN0ZWRcIjpudWxsfSxRLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5wcm90b2J1Zi5FbXB0eT9lOm5ldyBwLmdvb2dsZS5wcm90b2J1Zi5FbXB0eX0sUS50b09iamVjdD1mdW5jdGlvbigpe3JldHVybnt9fSxRLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sUSksdCksRi5ycGM9KChuPXt9KS5TdGF0dXM9KFYucHJvdG90eXBlLmNvZGU9MCxWLnByb3RvdHlwZS5tZXNzYWdlPVwiXCIsVi5wcm90b3R5cGUuZGV0YWlscz1pLmVtcHR5QXJyYXksVi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBWKGUpfSxWLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmNvZGUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJjb2RlXCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLmNvZGUpLG51bGwhPWUubWVzc2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm1lc3NhZ2VcIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5tZXNzYWdlKSxudWxsIT1lLmRldGFpbHMmJmUuZGV0YWlscy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLmRldGFpbHMubGVuZ3RoOysrbilwLmdvb2dsZS5wcm90b2J1Zi5BbnkuZW5jb2RlKGUuZGV0YWlsc1tuXSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sVi5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sVi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2YgYXx8KGU9YS5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgcC5nb29nbGUucnBjLlN0YXR1cztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmNvZGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMjpvLm1lc3NhZ2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5kZXRhaWxzJiZvLmRldGFpbHMubGVuZ3RofHwoby5kZXRhaWxzPVtdKSxvLmRldGFpbHMucHVzaChwLmdvb2dsZS5wcm90b2J1Zi5BbnkuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sVi5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhfHwoZT1uZXcgYShlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sVi52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5jb2RlJiZlLmhhc093blByb3BlcnR5KFwiY29kZVwiKSYmIWkuaXNJbnRlZ2VyKGUuY29kZSkpcmV0dXJuXCJjb2RlOiBpbnRlZ2VyIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5tZXNzYWdlJiZlLmhhc093blByb3BlcnR5KFwibWVzc2FnZVwiKSYmIWkuaXNTdHJpbmcoZS5tZXNzYWdlKSlyZXR1cm5cIm1lc3NhZ2U6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGV0YWlscyYmZS5oYXNPd25Qcm9wZXJ0eShcImRldGFpbHNcIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZGV0YWlscykpcmV0dXJuXCJkZXRhaWxzOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS5kZXRhaWxzLmxlbmd0aDsrK3Qpe3ZhciBuPXAuZ29vZ2xlLnByb3RvYnVmLkFueS52ZXJpZnkoZS5kZXRhaWxzW3RdKTtpZihuKXJldHVyblwiZGV0YWlscy5cIitufX1yZXR1cm4gbnVsbH0sVi5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBwLmdvb2dsZS5ycGMuU3RhdHVzKXJldHVybiBlO3ZhciB0PW5ldyBwLmdvb2dsZS5ycGMuU3RhdHVzO2lmKG51bGwhPWUuY29kZSYmKHQuY29kZT0wfGUuY29kZSksbnVsbCE9ZS5tZXNzYWdlJiYodC5tZXNzYWdlPVN0cmluZyhlLm1lc3NhZ2UpKSxlLmRldGFpbHMpe2lmKCFBcnJheS5pc0FycmF5KGUuZGV0YWlscykpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5ycGMuU3RhdHVzLmRldGFpbHM6IGFycmF5IGV4cGVjdGVkXCIpO3QuZGV0YWlscz1bXTtmb3IodmFyIG49MDtuPGUuZGV0YWlscy5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5kZXRhaWxzW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucnBjLlN0YXR1cy5kZXRhaWxzOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5kZXRhaWxzW25dPXAuZ29vZ2xlLnByb3RvYnVmLkFueS5mcm9tT2JqZWN0KGUuZGV0YWlsc1tuXSl9fXJldHVybiB0fSxWLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5kZXRhaWxzPVtdKSx0LmRlZmF1bHRzJiYobi5jb2RlPTAsbi5tZXNzYWdlPVwiXCIpLG51bGwhPWUuY29kZSYmZS5oYXNPd25Qcm9wZXJ0eShcImNvZGVcIikmJihuLmNvZGU9ZS5jb2RlKSxudWxsIT1lLm1lc3NhZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJtZXNzYWdlXCIpJiYobi5tZXNzYWdlPWUubWVzc2FnZSksZS5kZXRhaWxzJiZlLmRldGFpbHMubGVuZ3RoKXtuLmRldGFpbHM9W107Zm9yKHZhciBvPTA7bzxlLmRldGFpbHMubGVuZ3RoOysrbyluLmRldGFpbHNbb109cC5nb29nbGUucHJvdG9idWYuQW55LnRvT2JqZWN0KGUuZGV0YWlsc1tvXSx0KX1yZXR1cm4gbn0sVi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFYpLG4pLEYpLHB9KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/operations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/apiCaller.js":
/*!********************************************************!*\
  !*** ./node_modules/google-gax/build/src/apiCaller.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAPICaller = createAPICaller;\nconst normalApiCaller_1 = __webpack_require__(/*! ./normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nfunction createAPICaller(settings, descriptor) {\n    if (!descriptor) {\n        return new normalApiCaller_1.NormalApiCaller();\n    }\n    return descriptor.getApiCaller(settings);\n}\n//# sourceMappingURL=apiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QiwwQkFBMEIsbUJBQU8sQ0FBQywrR0FBK0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFuaXNoLWxhbmd1YWdlLWxlYXJuaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9hcGlDYWxsZXIuanM/YjZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQVBJQ2FsbGVyID0gY3JlYXRlQVBJQ2FsbGVyO1xuY29uc3Qgbm9ybWFsQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi9ub3JtYWxDYWxscy9ub3JtYWxBcGlDYWxsZXJcIik7XG5mdW5jdGlvbiBjcmVhdGVBUElDYWxsZXIoc2V0dGluZ3MsIGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBub3JtYWxBcGlDYWxsZXJfMS5Ob3JtYWxBcGlDYWxsZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0QXBpQ2FsbGVyKHNldHRpbmdzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaUNhbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/apiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js":
/*!****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\n/**\n * An implementation of APICaller for bundled calls.\n * Uses BundleExecutor to do bundling.\n */\nclass BundleApiCaller {\n    bundler;\n    constructor(bundler) {\n        this.bundler = bundler;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, status) {\n        if (!settings.isBundling) {\n            throw new googleError_1.GoogleError('Bundling enabled with no isBundling!');\n        }\n        status.call((argument, callback) => {\n            this.bundler.schedule(apiCall, argument, callback);\n            return status;\n        }, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.BundleApiCaller = BundleApiCaller;\n//# sourceMappingURL=bundleApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVBcGlDYWxsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGVBQWUsbUJBQU8sQ0FBQyxrRUFBUztBQUNoQyxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2J1bmRsaW5nQ2FsbHMvYnVuZGxlQXBpQ2FsbGVyLmpzP2Y5MWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bmRsZUFwaUNhbGxlciA9IHZvaWQgMDtcbmNvbnN0IGNhbGxfMSA9IHJlcXVpcmUoXCIuLi9jYWxsXCIpO1xuY29uc3QgZ29vZ2xlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9nb29nbGVFcnJvclwiKTtcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgQVBJQ2FsbGVyIGZvciBidW5kbGVkIGNhbGxzLlxuICogVXNlcyBCdW5kbGVFeGVjdXRvciB0byBkbyBidW5kbGluZy5cbiAqL1xuY2xhc3MgQnVuZGxlQXBpQ2FsbGVyIHtcbiAgICBidW5kbGVyO1xuICAgIGNvbnN0cnVjdG9yKGJ1bmRsZXIpIHtcbiAgICAgICAgdGhpcy5idW5kbGVyID0gYnVuZGxlcjtcbiAgICB9XG4gICAgaW5pdChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbFByb21pc2UoKTtcbiAgICB9XG4gICAgd3JhcChmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBjYWxsKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncywgc3RhdHVzKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MuaXNCdW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ0J1bmRsaW5nIGVuYWJsZWQgd2l0aCBubyBpc0J1bmRsaW5nIScpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXR1cy5jYWxsKChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuYnVuZGxlci5zY2hlZHVsZShhcGlDYWxsLCBhcmd1bWVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgfSwgYXJndW1lbnQpO1xuICAgIH1cbiAgICBmYWlsKGNhbmNlbGxlciwgZXJyKSB7XG4gICAgICAgIGNhbmNlbGxlci5jYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgICByZXN1bHQoY2FuY2VsbGVyKSB7XG4gICAgICAgIHJldHVybiBjYW5jZWxsZXIucHJvbWlzZTtcbiAgICB9XG59XG5leHBvcnRzLkJ1bmRsZUFwaUNhbGxlciA9IEJ1bmRsZUFwaUNhbGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZUFwaUNhbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleDescriptor = void 0;\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nconst bundleApiCaller_1 = __webpack_require__(/*! ./bundleApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\");\nconst bundleExecutor_1 = __webpack_require__(/*! ./bundleExecutor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\n/**\n * A descriptor for calls that can be bundled into one call.\n */\nclass BundleDescriptor {\n    bundledField;\n    requestDiscriminatorFields;\n    subresponseField;\n    byteLengthFunction;\n    /**\n     * Describes the structure of bundled call.\n     *\n     * requestDiscriminatorFields may include '.' as a separator, which is used to\n     * indicate object traversal. This allows fields in nested objects to be used\n     * to determine what request to bundle.\n     *\n     * @property {String} bundledField\n     * @property {String} requestDiscriminatorFields\n     * @property {String} subresponseField\n     * @property {Function} byteLengthFunction\n     *\n     * @param {String} bundledField - the repeated field in the request message\n     *   that will have its elements aggregated by bundling.\n     * @param {String} requestDiscriminatorFields - a list of fields in the\n     *   target request message class that are used to detemrine which request\n     *   messages should be bundled together.\n     * @param {String} subresponseField - an optional field, when present it\n     *   indicates the field in the response message that should be used to\n     *   demultiplex the response into multiple response messages.\n     * @param {Function} byteLengthFunction - a function to obtain the byte\n     *   length to be consumed for the bundled field messages. Because Node.JS\n     *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n     *   internally they are encoded/decoded in protobuf manner, this function\n     *   is actually necessary to calculate the byte length.\n     * @constructor\n     */\n    constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {\n        if (!byteLengthFunction && typeof subresponseField === 'function') {\n            byteLengthFunction = subresponseField;\n            subresponseField = null;\n        }\n        this.bundledField = bundledField;\n        this.requestDiscriminatorFields =\n            requestDiscriminatorFields.map(util_1.toCamelCase);\n        this.subresponseField = subresponseField;\n        this.byteLengthFunction = byteLengthFunction;\n    }\n    getApiCaller(settings) {\n        if (settings.isBundling === false) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\n    }\n}\nexports.BundleDescriptor = BundleDescriptor;\n//# sourceMappingURL=bundleDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QiwwQkFBMEIsbUJBQU8sQ0FBQyxnSEFBZ0M7QUFDbEUsMEJBQTBCLG1CQUFPLENBQUMscUdBQW1CO0FBQ3JELHlCQUF5QixtQkFBTyxDQUFDLG1HQUFrQjtBQUNuRCxlQUFlLG1CQUFPLENBQUMsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFVBQVU7QUFDNUI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2J1bmRsaW5nQ2FsbHMvYnVuZGxlRGVzY3JpcHRvci5qcz9iN2JjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CdW5kbGVEZXNjcmlwdG9yID0gdm9pZCAwO1xuY29uc3Qgbm9ybWFsQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi4vbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyXCIpO1xuY29uc3QgYnVuZGxlQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi9idW5kbGVBcGlDYWxsZXJcIik7XG5jb25zdCBidW5kbGVFeGVjdXRvcl8xID0gcmVxdWlyZShcIi4vYnVuZGxlRXhlY3V0b3JcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbi8qKlxuICogQSBkZXNjcmlwdG9yIGZvciBjYWxscyB0aGF0IGNhbiBiZSBidW5kbGVkIGludG8gb25lIGNhbGwuXG4gKi9cbmNsYXNzIEJ1bmRsZURlc2NyaXB0b3Ige1xuICAgIGJ1bmRsZWRGaWVsZDtcbiAgICByZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcztcbiAgICBzdWJyZXNwb25zZUZpZWxkO1xuICAgIGJ5dGVMZW5ndGhGdW5jdGlvbjtcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgdGhlIHN0cnVjdHVyZSBvZiBidW5kbGVkIGNhbGwuXG4gICAgICpcbiAgICAgKiByZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcyBtYXkgaW5jbHVkZSAnLicgYXMgYSBzZXBhcmF0b3IsIHdoaWNoIGlzIHVzZWQgdG9cbiAgICAgKiBpbmRpY2F0ZSBvYmplY3QgdHJhdmVyc2FsLiBUaGlzIGFsbG93cyBmaWVsZHMgaW4gbmVzdGVkIG9iamVjdHMgdG8gYmUgdXNlZFxuICAgICAqIHRvIGRldGVybWluZSB3aGF0IHJlcXVlc3QgdG8gYnVuZGxlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGJ1bmRsZWRGaWVsZFxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSByZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkc1xuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBzdWJyZXNwb25zZUZpZWxkXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gYnl0ZUxlbmd0aEZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYnVuZGxlZEZpZWxkIC0gdGhlIHJlcGVhdGVkIGZpZWxkIGluIHRoZSByZXF1ZXN0IG1lc3NhZ2VcbiAgICAgKiAgIHRoYXQgd2lsbCBoYXZlIGl0cyBlbGVtZW50cyBhZ2dyZWdhdGVkIGJ5IGJ1bmRsaW5nLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcyAtIGEgbGlzdCBvZiBmaWVsZHMgaW4gdGhlXG4gICAgICogICB0YXJnZXQgcmVxdWVzdCBtZXNzYWdlIGNsYXNzIHRoYXQgYXJlIHVzZWQgdG8gZGV0ZW1yaW5lIHdoaWNoIHJlcXVlc3RcbiAgICAgKiAgIG1lc3NhZ2VzIHNob3VsZCBiZSBidW5kbGVkIHRvZ2V0aGVyLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJyZXNwb25zZUZpZWxkIC0gYW4gb3B0aW9uYWwgZmllbGQsIHdoZW4gcHJlc2VudCBpdFxuICAgICAqICAgaW5kaWNhdGVzIHRoZSBmaWVsZCBpbiB0aGUgcmVzcG9uc2UgbWVzc2FnZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvXG4gICAgICogICBkZW11bHRpcGxleCB0aGUgcmVzcG9uc2UgaW50byBtdWx0aXBsZSByZXNwb25zZSBtZXNzYWdlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBieXRlTGVuZ3RoRnVuY3Rpb24gLSBhIGZ1bmN0aW9uIHRvIG9idGFpbiB0aGUgYnl0ZVxuICAgICAqICAgbGVuZ3RoIHRvIGJlIGNvbnN1bWVkIGZvciB0aGUgYnVuZGxlZCBmaWVsZCBtZXNzYWdlcy4gQmVjYXVzZSBOb2RlLkpTXG4gICAgICogICBwcm90b2J1Zi5qcy9nUlBDIHVzZXMgYnVpbHRpbiBPYmplY3RzIGZvciB0aGUgdXNlci12aXNpYmxlIGRhdGEgYW5kXG4gICAgICogICBpbnRlcm5hbGx5IHRoZXkgYXJlIGVuY29kZWQvZGVjb2RlZCBpbiBwcm90b2J1ZiBtYW5uZXIsIHRoaXMgZnVuY3Rpb25cbiAgICAgKiAgIGlzIGFjdHVhbGx5IG5lY2Vzc2FyeSB0byBjYWxjdWxhdGUgdGhlIGJ5dGUgbGVuZ3RoLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJ1bmRsZWRGaWVsZCwgcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHMsIHN1YnJlc3BvbnNlRmllbGQsIGJ5dGVMZW5ndGhGdW5jdGlvbikge1xuICAgICAgICBpZiAoIWJ5dGVMZW5ndGhGdW5jdGlvbiAmJiB0eXBlb2Ygc3VicmVzcG9uc2VGaWVsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aEZ1bmN0aW9uID0gc3VicmVzcG9uc2VGaWVsZDtcbiAgICAgICAgICAgIHN1YnJlc3BvbnNlRmllbGQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVuZGxlZEZpZWxkID0gYnVuZGxlZEZpZWxkO1xuICAgICAgICB0aGlzLnJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzID1cbiAgICAgICAgICAgIHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzLm1hcCh1dGlsXzEudG9DYW1lbENhc2UpO1xuICAgICAgICB0aGlzLnN1YnJlc3BvbnNlRmllbGQgPSBzdWJyZXNwb25zZUZpZWxkO1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGhGdW5jdGlvbiA9IGJ5dGVMZW5ndGhGdW5jdGlvbjtcbiAgICB9XG4gICAgZ2V0QXBpQ2FsbGVyKHNldHRpbmdzKSB7XG4gICAgICAgIGlmIChzZXR0aW5ncy5pc0J1bmRsaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBub3JtYWxBcGlDYWxsZXJfMS5Ob3JtYWxBcGlDYWxsZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGJ1bmRsZUFwaUNhbGxlcl8xLkJ1bmRsZUFwaUNhbGxlcihuZXcgYnVuZGxlRXhlY3V0b3JfMS5CdW5kbGVFeGVjdXRvcihzZXR0aW5ncy5idW5kbGVPcHRpb25zLCB0aGlzKSk7XG4gICAgfVxufVxuZXhwb3J0cy5CdW5kbGVEZXNjcmlwdG9yID0gQnVuZGxlRGVzY3JpcHRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZURlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleExecutor = void 0;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst bundlingUtils_1 = __webpack_require__(/*! ./bundlingUtils */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\");\nconst task_1 = __webpack_require__(/*! ./task */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\");\nfunction noop() { }\n/**\n * BundleExecutor stores several timers for each bundle (calls are bundled based\n * on the options passed, each bundle has unique ID that is calculated based on\n * field values). Each timer fires and sends a call after certain amount of\n * time, and if a new request comes to the same bundle, the timer can be\n * restarted.\n */\nclass BundleExecutor {\n    _options;\n    _descriptor;\n    _tasks;\n    _timers;\n    _invocations;\n    _invocationId;\n    /**\n     * Organizes requests for an api service that requires to bundle them.\n     *\n     * @param {BundleOptions} bundleOptions - configures strategy this instance\n     *   uses when executing bundled functions.\n     * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.\n     * @constructor\n     */\n    constructor(bundleOptions, bundleDescriptor) {\n        this._options = bundleOptions;\n        this._descriptor = bundleDescriptor;\n        this._tasks = {};\n        this._timers = {};\n        this._invocations = {};\n        this._invocationId = 0;\n    }\n    /**\n     * Schedule a method call.\n     *\n     * @param {function} apiCall - the function for an API call.\n     * @param {Object} request - the request object to be bundled with others.\n     * @param {APICallback} callback - the callback to be called when the method finished.\n     * @return {function()} - the function to cancel the scheduled invocation.\n     */\n    schedule(apiCall, request, callback) {\n        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);\n        callback = (callback || noop);\n        if (bundleId === undefined) {\n            (0, warnings_1.warn)('bundling_schedule_bundleid_undefined', 'The request does not have enough information for request bundling. ' +\n                `Invoking immediately. Request: ${JSON.stringify(request)} ` +\n                `discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);\n            return apiCall(request, callback);\n        }\n        if (request[this._descriptor.bundledField] === undefined) {\n            (0, warnings_1.warn)('bundling_no_bundled_field', `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. ` +\n                `Invoking immediately. Request: ${JSON.stringify(request)}`);\n            return apiCall(request, callback);\n        }\n        if (!(bundleId in this._tasks)) {\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\n        }\n        let task = this._tasks[bundleId];\n        callback.id = String(this._invocationId++);\n        this._invocations[callback.id] = bundleId;\n        const bundledField = request[this._descriptor.bundledField];\n        const elementCount = bundledField.length;\n        let requestBytes = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        bundledField.forEach(obj => {\n            requestBytes += this._descriptor.byteLengthFunction(obj);\n        });\n        const countLimit = this._options.elementCountLimit || 0;\n        const byteLimit = this._options.requestByteLimit || 0;\n        if ((countLimit > 0 && elementCount > countLimit) ||\n            (byteLimit > 0 && requestBytes >= byteLimit)) {\n            let message;\n            if (countLimit > 0 && elementCount > countLimit) {\n                message =\n                    'The number of elements ' +\n                        elementCount +\n                        ' exceeds the limit ' +\n                        this._options.elementCountLimit;\n            }\n            else {\n                message =\n                    'The required bytes ' +\n                        requestBytes +\n                        ' exceeds the limit ' +\n                        this._options.requestByteLimit;\n            }\n            const error = new googleError_1.GoogleError(message);\n            error.code = status_1.Status.INVALID_ARGUMENT;\n            callback(error);\n            return {\n                cancel: noop,\n            };\n        }\n        const existingCount = task.getElementCount();\n        const existingBytes = task.getRequestByteSize();\n        if ((countLimit > 0 && elementCount + existingCount >= countLimit) ||\n            (byteLimit > 0 && requestBytes + existingBytes >= byteLimit)) {\n            this._runNow(bundleId);\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\n            task = this._tasks[bundleId];\n        }\n        task.extend(bundledField, requestBytes, callback);\n        const ret = {\n            cancel() {\n                self._cancel(callback.id);\n            },\n        };\n        const countThreshold = this._options.elementCountThreshold || 0;\n        const sizeThreshold = this._options.requestByteThreshold || 0;\n        if ((countThreshold > 0 && task.getElementCount() >= countThreshold) ||\n            (sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold)) {\n            this._runNow(bundleId);\n            return ret;\n        }\n        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {\n            this._timers[bundleId] = setTimeout(() => {\n                delete this._timers[bundleId];\n                this._runNow(bundleId);\n            }, this._options.delayThreshold);\n        }\n        return ret;\n    }\n    /**\n     * Clears scheduled timeout if it exists.\n     *\n     * @param {String} bundleId - the id for the task whose timeout needs to be\n     *   cleared.\n     * @private\n     */\n    _maybeClearTimeout(bundleId) {\n        if (bundleId in this._timers) {\n            const timerId = this._timers[bundleId];\n            delete this._timers[bundleId];\n            clearTimeout(timerId);\n        }\n    }\n    /**\n     * Cancels an event.\n     *\n     * @param {String} id - The id for the event in the task.\n     * @private\n     */\n    _cancel(id) {\n        if (!(id in this._invocations)) {\n            return;\n        }\n        const bundleId = this._invocations[id];\n        if (!(bundleId in this._tasks)) {\n            return;\n        }\n        const task = this._tasks[bundleId];\n        delete this._invocations[id];\n        if (task.cancel(id)) {\n            this._maybeClearTimeout(bundleId);\n            delete this._tasks[bundleId];\n        }\n    }\n    /**\n     * Invokes a task.\n     *\n     * @param {String} bundleId - The id for the task.\n     * @private\n     */\n    _runNow(bundleId) {\n        if (!(bundleId in this._tasks)) {\n            (0, warnings_1.warn)('bundle_runnow_bundleid_unknown', `No such bundleid: ${bundleId}`);\n            return;\n        }\n        this._maybeClearTimeout(bundleId);\n        const task = this._tasks[bundleId];\n        delete this._tasks[bundleId];\n        task.run().forEach(id => {\n            delete this._invocations[id];\n        });\n    }\n}\nexports.BundleExecutor = BundleExecutor;\n//# sourceMappingURL=bundleExecutor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.computeBundleId = computeBundleId;\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */\nfunction computeBundleId(obj, discriminatorFields) {\n    const ids = [];\n    let hasIds = false;\n    for (const field of discriminatorFields) {\n        const id = at(obj, field);\n        if (id === undefined) {\n            ids.push(null);\n        }\n        else {\n            hasIds = true;\n            ids.push(id);\n        }\n    }\n    if (!hasIds) {\n        return undefined;\n    }\n    return JSON.stringify(ids);\n}\n/**\n * Given an object field path that may contain dots, dig into the obj and find\n * the value at the given path.\n * @example\n * const obj = {\n *   a: {\n *     b: 5\n *   }\n * }\n * const id = at(obj, 'a.b');\n * // id = 5\n * @param field Path to the property with `.` notation\n * @param obj The object to traverse\n * @returns the value at the given path\n */\nfunction at(obj, field) {\n    const pathParts = field.split('.');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let currentObj = obj;\n    for (const pathPart of pathParts) {\n        currentObj = currentObj?.[pathPart];\n    }\n    return currentObj;\n}\n//# sourceMappingURL=bundlingUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGluZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2J1bmRsaW5nQ2FsbHMvYnVuZGxpbmdVdGlscy5qcz83NzU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21wdXRlQnVuZGxlSWQgPSBjb21wdXRlQnVuZGxlSWQ7XG4vKipcbiAqIENvbXB1dGUgdGhlIGlkZW50aWZpZXIgb2YgdGhlIGBvYmpgLiBUaGUgb2JqZWN0cyBvZiB0aGUgc2FtZSBJRFxuICogd2lsbCBiZSBidW5kbGVkIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7UmVxdWVzdFR5cGV9IG9iaiAtIFRoZSByZXF1ZXN0IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nW119IGRpc2NyaW1pbmF0b3JGaWVsZHMgLSBUaGUgYXJyYXkgb2YgZmllbGQgbmFtZXMuXG4gKiAgIEEgZmllbGQgbmFtZSBtYXkgaW5jbHVkZSAnLicgYXMgYSBzZXBhcmF0b3IsIHdoaWNoIGlzIHVzZWQgdG9cbiAqICAgaW5kaWNhdGUgb2JqZWN0IHRyYXZlcnNhbC5cbiAqIEByZXR1cm4ge1N0cmluZ3x1bmRlZmluZWR9IC0gdGhlIGlkZW50aWZpZXIgc3RyaW5nLCBvciB1bmRlZmluZWQgaWYgYW55XG4gKiAgIGRpc2NyaW1pbmF0b3IgZmllbGRzIGRvIG5vdCBleGlzdC5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUJ1bmRsZUlkKG9iaiwgZGlzY3JpbWluYXRvckZpZWxkcykge1xuICAgIGNvbnN0IGlkcyA9IFtdO1xuICAgIGxldCBoYXNJZHMgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGRpc2NyaW1pbmF0b3JGaWVsZHMpIHtcbiAgICAgICAgY29uc3QgaWQgPSBhdChvYmosIGZpZWxkKTtcbiAgICAgICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlkcy5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFzSWRzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWhhc0lkcykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaWRzKTtcbn1cbi8qKlxuICogR2l2ZW4gYW4gb2JqZWN0IGZpZWxkIHBhdGggdGhhdCBtYXkgY29udGFpbiBkb3RzLCBkaWcgaW50byB0aGUgb2JqIGFuZCBmaW5kXG4gKiB0aGUgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGguXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb2JqID0ge1xuICogICBhOiB7XG4gKiAgICAgYjogNVxuICogICB9XG4gKiB9XG4gKiBjb25zdCBpZCA9IGF0KG9iaiwgJ2EuYicpO1xuICogLy8gaWQgPSA1XG4gKiBAcGFyYW0gZmllbGQgUGF0aCB0byB0aGUgcHJvcGVydHkgd2l0aCBgLmAgbm90YXRpb25cbiAqIEBwYXJhbSBvYmogVGhlIG9iamVjdCB0byB0cmF2ZXJzZVxuICogQHJldHVybnMgdGhlIHZhbHVlIGF0IHRoZSBnaXZlbiBwYXRoXG4gKi9cbmZ1bmN0aW9uIGF0KG9iaiwgZmllbGQpIHtcbiAgICBjb25zdCBwYXRoUGFydHMgPSBmaWVsZC5zcGxpdCgnLicpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbGV0IGN1cnJlbnRPYmogPSBvYmo7XG4gICAgZm9yIChjb25zdCBwYXRoUGFydCBvZiBwYXRoUGFydHMpIHtcbiAgICAgICAgY3VycmVudE9iaiA9IGN1cnJlbnRPYmo/LltwYXRoUGFydF07XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50T2JqO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVuZGxpbmdVdGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js":
/*!*****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/task.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Task = void 0;\nexports.deepCopyForResponse = deepCopyForResponse;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nfunction deepCopyForResponse(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result;\n    if (obj === null) {\n        return null;\n    }\n    if (obj === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(obj)) {\n        result = [];\n        obj.forEach(element => {\n            result.push(deepCopyForResponse(element, null));\n        });\n        return result;\n    }\n    // Some objects (such as ByteBuffer) have copy method.\n    if (obj.copy !== undefined) {\n        return obj.copy();\n    }\n    // ArrayBuffer should be copied through slice().\n    if (obj instanceof ArrayBuffer) {\n        return obj.slice(0);\n    }\n    if (typeof obj === 'object') {\n        result = {};\n        Object.keys(obj).forEach(key => {\n            if (subresponseInfo &&\n                key === subresponseInfo.field &&\n                Array.isArray(obj[key])) {\n                // Note that subresponses are not deep-copied. This is safe because\n                // those subresponses are not shared among callbacks.\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n            }\n            else {\n                result[key] = deepCopyForResponse(obj[key], null);\n            }\n        });\n        return result;\n    }\n    return obj;\n}\nclass Task {\n    _apiCall;\n    _request;\n    _bundledField;\n    _subresponseField;\n    _data;\n    callCanceller;\n    /**\n     * A task coordinates the execution of a single bundle.\n     *\n     * @param {function} apiCall - The function to conduct calling API.\n     * @param {Object} bundlingRequest - The base request object to be used\n     *   for the actual API call.\n     * @param {string} bundledField - The name of the field in bundlingRequest\n     *   to be bundled.\n     * @param {string=} subresponseField - The name of the field in the response\n     *   to be passed to the callback.\n     * @constructor\n     * @private\n     */\n    constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n        this._apiCall = apiCall;\n        this._request = bundlingRequest;\n        this._bundledField = bundledField;\n        this._subresponseField = subresponseField;\n        this._data = [];\n    }\n    /**\n     * Returns the number of elements in a task.\n     * @return {number} The number of elements.\n     */\n    getElementCount() {\n        let count = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            count += this._data[i].elements.length;\n        }\n        return count;\n    }\n    /**\n     * Returns the total byte size of the elements in a task.\n     * @return {number} The byte size.\n     */\n    getRequestByteSize() {\n        let size = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            size += this._data[i].bytes;\n        }\n        return size;\n    }\n    /**\n     * Invokes the actual API call with current elements.\n     * @return {string[]} - the list of ids for invocations to be run.\n     */\n    run() {\n        if (this._data.length === 0) {\n            return [];\n        }\n        const request = this._request;\n        const elements = [];\n        const ids = [];\n        for (let i = 0; i < this._data.length; ++i) {\n            elements.push(...this._data[i].elements);\n            ids.push(this._data[i].callback.id);\n        }\n        request[this._bundledField] = elements;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.callCanceller = this._apiCall(request, (err, response) => {\n            const responses = [];\n            if (err) {\n                self._data.forEach(() => {\n                    responses.push(undefined);\n                });\n            }\n            else {\n                let subresponseInfo = null;\n                if (self._subresponseField) {\n                    subresponseInfo = {\n                        field: self._subresponseField,\n                        start: 0,\n                    };\n                }\n                self._data.forEach(data => {\n                    if (subresponseInfo) {\n                        subresponseInfo.end =\n                            subresponseInfo.start + data.elements.length;\n                    }\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\n                    if (subresponseInfo) {\n                        subresponseInfo.start = subresponseInfo.end;\n                    }\n                });\n            }\n            for (let i = 0; i < self._data.length; ++i) {\n                if (self._data[i].cancelled) {\n                    const error = new googleError_1.GoogleError('cancelled');\n                    error.code = status_1.Status.CANCELLED;\n                    self._data[i].callback(error);\n                }\n                else {\n                    self._data[i].callback(err, responses[i]);\n                }\n            }\n        });\n        return ids;\n    }\n    /**\n     * Appends the list of elements into the task.\n     * @param {Object[]} elements - the new list of elements.\n     * @param {number} bytes - the byte size required to encode elements in the API.\n     * @param {APICallback} callback - the callback of the method call.\n     */\n    extend(elements, bytes, callback) {\n        this._data.push({\n            elements,\n            bytes,\n            callback,\n        });\n    }\n    /**\n     * Cancels a part of elements.\n     * @param {string} id - The identifier of the part of elements.\n     * @return {boolean} Whether the entire task will be canceled or not.\n     */\n    cancel(id) {\n        if (this.callCanceller) {\n            let allCancelled = true;\n            this._data.forEach(d => {\n                if (d.callback.id === id) {\n                    d.cancelled = true;\n                }\n                if (!d.cancelled) {\n                    allCancelled = false;\n                }\n            });\n            if (allCancelled) {\n                this.callCanceller.cancel();\n            }\n            return allCancelled;\n        }\n        for (let i = 0; i < this._data.length; ++i) {\n            if (this._data[i].callback.id === id) {\n                const error = new googleError_1.GoogleError('cancelled');\n                error.code = status_1.Status.CANCELLED;\n                this._data[i].callback(error);\n                this._data.splice(i, 1);\n                break;\n            }\n        }\n        return this._data.length === 0;\n    }\n}\nexports.Task = Task;\n//# sourceMappingURL=task.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/call.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/call.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nclass OngoingCall {\n    callback;\n    cancelFunc;\n    completed;\n    /**\n     * OngoingCall manages callback, API calls, and cancellation\n     * of the API calls.\n     * @param {APICallback=} callback\n     *   The callback to be called asynchronously when the API call\n     *   finishes.\n     * @constructor\n     * @property {APICallback} callback\n     *   The callback function to be called.\n     * @private\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this.completed = false;\n    }\n    /**\n     * Cancels the ongoing promise.\n     */\n    cancel() {\n        if (this.completed) {\n            return;\n        }\n        this.completed = true;\n        if (this.cancelFunc) {\n            this.cancelFunc();\n        }\n        else {\n            const error = new googleError_1.GoogleError('cancelled');\n            error.code = status_1.Status.CANCELLED;\n            this.callback(error);\n        }\n    }\n    /**\n     * Call calls the specified function. Result will be used to fulfill\n     * the promise.\n     *\n     * @param {SimpleCallbackFunction} func\n     *   A function for an API call.\n     * @param {Object} argument\n     *   A request object.\n     */\n    call(func, argument) {\n        if (this.completed) {\n            return;\n        }\n        const canceller = func(argument, (err, response, next, rawResponse) => {\n            this.completed = true;\n            setImmediate(this.callback, err, response, next, rawResponse);\n        });\n        if (canceller instanceof Promise) {\n            canceller.catch(err => {\n                setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\n            });\n        }\n        this.cancelFunc = () => canceller.cancel();\n    }\n}\nexports.OngoingCall = OngoingCall;\nclass OngoingCallPromise extends OngoingCall {\n    promise;\n    /**\n     * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n     * the API call finishes.\n     * @constructor\n     * @private\n     */\n    constructor() {\n        let resolveCallback;\n        let rejectCallback;\n        const callback = (err, response, next, rawResponse) => {\n            if (err) {\n                // If gRPC metadata exist, parsed google.rpc.status details.\n                if (err.metadata) {\n                    rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\n                }\n                else {\n                    rejectCallback(err);\n                }\n            }\n            else if (response !== undefined) {\n                resolveCallback([response, next || null, rawResponse || null]);\n            }\n            else {\n                throw new googleError_1.GoogleError('Neither error nor response are defined');\n            }\n        };\n        const promise = new Promise((resolve, reject) => {\n            resolveCallback = resolve;\n            rejectCallback = reject;\n        });\n        super(callback);\n        this.promise = promise;\n        this.promise.cancel = () => {\n            this.cancel();\n        };\n    }\n}\nexports.OngoingCallPromise = OngoingCallPromise;\n//# sourceMappingURL=call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY2FsbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxtQkFBbUI7QUFDaEQsaUJBQWlCLG1CQUFPLENBQUMscUVBQVU7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsK0VBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdCQUF3QjtBQUN2QztBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhbmlzaC1sYW5ndWFnZS1sZWFybmluZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY2FsbC5qcz9hYTdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PbmdvaW5nQ2FsbFByb21pc2UgPSBleHBvcnRzLk9uZ29pbmdDYWxsID0gdm9pZCAwO1xuY29uc3Qgc3RhdHVzXzEgPSByZXF1aXJlKFwiLi9zdGF0dXNcIik7XG5jb25zdCBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4vZ29vZ2xlRXJyb3JcIik7XG5jbGFzcyBPbmdvaW5nQ2FsbCB7XG4gICAgY2FsbGJhY2s7XG4gICAgY2FuY2VsRnVuYztcbiAgICBjb21wbGV0ZWQ7XG4gICAgLyoqXG4gICAgICogT25nb2luZ0NhbGwgbWFuYWdlcyBjYWxsYmFjaywgQVBJIGNhbGxzLCBhbmQgY2FuY2VsbGF0aW9uXG4gICAgICogb2YgdGhlIEFQSSBjYWxscy5cbiAgICAgKiBAcGFyYW0ge0FQSUNhbGxiYWNrPX0gY2FsbGJhY2tcbiAgICAgKiAgIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkgd2hlbiB0aGUgQVBJIGNhbGxcbiAgICAgKiAgIGZpbmlzaGVzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwcm9wZXJ0eSB7QVBJQ2FsbGJhY2t9IGNhbGxiYWNrXG4gICAgICogICBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIHRoZSBvbmdvaW5nIHByb21pc2UuXG4gICAgICovXG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmNhbmNlbEZ1bmMpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsRnVuYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcignY2FuY2VsbGVkJyk7XG4gICAgICAgICAgICBlcnJvci5jb2RlID0gc3RhdHVzXzEuU3RhdHVzLkNBTkNFTExFRDtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgY2FsbHMgdGhlIHNwZWNpZmllZCBmdW5jdGlvbi4gUmVzdWx0IHdpbGwgYmUgdXNlZCB0byBmdWxmaWxsXG4gICAgICogdGhlIHByb21pc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1NpbXBsZUNhbGxiYWNrRnVuY3Rpb259IGZ1bmNcbiAgICAgKiAgIEEgZnVuY3Rpb24gZm9yIGFuIEFQSSBjYWxsLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhcmd1bWVudFxuICAgICAqICAgQSByZXF1ZXN0IG9iamVjdC5cbiAgICAgKi9cbiAgICBjYWxsKGZ1bmMsIGFyZ3VtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbmNlbGxlciA9IGZ1bmMoYXJndW1lbnQsIChlcnIsIHJlc3BvbnNlLCBuZXh0LCByYXdSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMuY2FsbGJhY2ssIGVyciwgcmVzcG9uc2UsIG5leHQsIHJhd1Jlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYW5jZWxsZXIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBjYW5jZWxsZXIuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5jYWxsYmFjaywgbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoZXJyKSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbEZ1bmMgPSAoKSA9PiBjYW5jZWxsZXIuY2FuY2VsKCk7XG4gICAgfVxufVxuZXhwb3J0cy5PbmdvaW5nQ2FsbCA9IE9uZ29pbmdDYWxsO1xuY2xhc3MgT25nb2luZ0NhbGxQcm9taXNlIGV4dGVuZHMgT25nb2luZ0NhbGwge1xuICAgIHByb21pc2U7XG4gICAgLyoqXG4gICAgICogR2F4UHJvbWlzZSBpcyBHUlBDQ2FsbGJhY2tXcmFwcGVyLCBidXQgaXQgaG9sZHMgYSBwcm9taXNlIHdoZW5cbiAgICAgKiB0aGUgQVBJIGNhbGwgZmluaXNoZXMuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbGV0IHJlc29sdmVDYWxsYmFjaztcbiAgICAgICAgbGV0IHJlamVjdENhbGxiYWNrO1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IChlcnIsIHJlc3BvbnNlLCBuZXh0LCByYXdSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIC8vIElmIGdSUEMgbWV0YWRhdGEgZXhpc3QsIHBhcnNlZCBnb29nbGUucnBjLnN0YXR1cyBkZXRhaWxzLlxuICAgICAgICAgICAgICAgIGlmIChlcnIubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2soZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvci5wYXJzZUdSUENTdGF0dXNEZXRhaWxzKGVycikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxiYWNrKFtyZXNwb25zZSwgbmV4dCB8fCBudWxsLCByYXdSZXNwb25zZSB8fCBudWxsXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcignTmVpdGhlciBlcnJvciBub3IgcmVzcG9uc2UgYXJlIGRlZmluZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVDYWxsYmFjayA9IHJlc29sdmU7XG4gICAgICAgICAgICByZWplY3RDYWxsYmFjayA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1cGVyKGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICAgICAgdGhpcy5wcm9taXNlLmNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5PbmdvaW5nQ2FsbFByb21pc2UgPSBPbmdvaW5nQ2FsbFByb21pc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/createApiCall.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/createApiCall.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createApiCall = createApiCall;\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\nconst apiCaller_1 = __webpack_require__(/*! ./apiCaller */ \"(rsc)/./node_modules/google-gax/build/src/apiCaller.js\");\nconst gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst retries_1 = __webpack_require__(/*! ./normalCalls/retries */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\");\nconst timeout_1 = __webpack_require__(/*! ./normalCalls/timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingCalls/streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback) {\n    // we want to be able to accept both promise resolving to a function and a\n    // function. Currently client librares are only calling this method with a\n    // promise, but it will change.\n    const funcPromise = typeof func === 'function' ? Promise.resolve(func) : func;\n    // the following apiCaller will be used for all calls of this function...\n    const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);\n    return (request, callOptions, callback) => {\n        let currentApiCaller = apiCaller;\n        let thisSettings;\n        if (currentApiCaller instanceof streamingApiCaller_1.StreamingApiCaller) {\n            const gaxStreamingRetries = currentApiCaller.descriptor?.gaxStreamingRetries ?? false;\n            // If Gax streaming retries are enabled, check settings passed at call time and convert parameters if needed\n            const convertedRetryOptions = (0, gax_1.convertRetryOptions)(callOptions, gaxStreamingRetries);\n            thisSettings = settings.merge(convertedRetryOptions);\n        }\n        else {\n            thisSettings = settings.merge(callOptions);\n        }\n        // special case: if bundling is disabled for this one call,\n        // use default API caller instead\n        if (settings.isBundling && !thisSettings.isBundling) {\n            currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, undefined);\n        }\n        const ongoingCall = currentApiCaller.init(callback);\n        funcPromise\n            .then((func) => {\n            // Initially, the function is just what gRPC server stub contains.\n            func = currentApiCaller.wrap(func);\n            const streaming = currentApiCaller.descriptor\n                ?.streaming;\n            const retry = thisSettings.retry;\n            if (streaming && retry) {\n                if (retry.retryCodes.length > 0 && retry.shouldRetryFn) {\n                    (0, warnings_1.warn)('either_retrycodes_or_shouldretryfn', 'Only one of retryCodes or shouldRetryFn may be defined. Ignoring retryCodes.');\n                    retry.retryCodes = [];\n                }\n                if (!currentApiCaller.descriptor\n                    .gaxStreamingRetries &&\n                    retry.getResumptionRequestFn) {\n                    throw new Error('getResumptionRequestFn can only be used when gaxStreamingRetries is set to true.');\n                }\n            }\n            if (!streaming && retry) {\n                if (retry.shouldRetryFn) {\n                    throw new Error('Using a function to determine retry eligibility is only supported with server streaming calls');\n                }\n                if (retry.getResumptionRequestFn) {\n                    throw new Error('Resumption strategy can only be used with server streaming retries');\n                }\n                if (retry.retryCodes && retry.retryCodes.length > 0) {\n                    retry.backoffSettings.initialRpcTimeoutMillis ??=\n                        thisSettings.timeout;\n                    return (0, retries_1.retryable)(func, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);\n                }\n            }\n            return (0, timeout_1.addTimeoutArg)(func, thisSettings.timeout, thisSettings.otherArgs);\n        })\n            .then((apiCall) => {\n            // After adding retries / timeouts, the call function becomes simpler:\n            // it only accepts request and callback.\n            currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n        })\n            .catch(err => {\n            currentApiCaller.fail(ongoingCall, err);\n        });\n        // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n        // or to cancel the ongoing call.\n        return currentApiCaller.result(ongoingCall);\n    };\n}\n//# sourceMappingURL=createApiCall.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY3JlYXRlQXBpQ2FsbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsMkVBQWE7QUFDekMsY0FBYyxtQkFBTyxDQUFDLCtEQUFPO0FBQzdCLGtCQUFrQixtQkFBTyxDQUFDLCtGQUF1QjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBdUI7QUFDakQsNkJBQTZCLG1CQUFPLENBQUMsMkhBQXFDO0FBQzFFLG1CQUFtQixtQkFBTyxDQUFDLHlFQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFuaXNoLWxhbmd1YWdlLWxlYXJuaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9jcmVhdGVBcGlDYWxsLmpzPzEwZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUFwaUNhbGwgPSBjcmVhdGVBcGlDYWxsO1xuLyoqXG4gKiBQcm92aWRlcyBmdW5jdGlvbiB3cmFwcGVycyB0aGF0IGltcGxlbWVudCBwYWdlIHN0cmVhbWluZyBhbmQgcmV0cnlpbmcuXG4gKi9cbmNvbnN0IGFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vYXBpQ2FsbGVyXCIpO1xuY29uc3QgZ2F4XzEgPSByZXF1aXJlKFwiLi9nYXhcIik7XG5jb25zdCByZXRyaWVzXzEgPSByZXF1aXJlKFwiLi9ub3JtYWxDYWxscy9yZXRyaWVzXCIpO1xuY29uc3QgdGltZW91dF8xID0gcmVxdWlyZShcIi4vbm9ybWFsQ2FsbHMvdGltZW91dFwiKTtcbmNvbnN0IHN0cmVhbWluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyXCIpO1xuY29uc3Qgd2FybmluZ3NfMSA9IHJlcXVpcmUoXCIuL3dhcm5pbmdzXCIpO1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBycGMgY2FsbCBpbnRvIGFuIEFQSSBjYWxsIGdvdmVybmVkIGJ5IHRoZSBzZXR0aW5ncy5cbiAqXG4gKiBJbiB0eXBpY2FsIHVzYWdlLCBgZnVuY2Agd2lsbCBiZSBhIHByb21pc2UgdG8gYSBjYWxsYWJsZSB1c2VkIHRvIG1ha2UgYW4gcnBjXG4gKiByZXF1ZXN0LiBUaGlzIHdpbGwgbW9zdGx5IGxpa2VseSBiZSBhIGJvdW5kIG1ldGhvZCBmcm9tIGEgcmVxdWVzdCBzdHViIHVzZWRcbiAqIHRvIG1ha2UgYW4gcnBjIGNhbGwuIEl0IGlzIG5vdCBhIGRpcmVjdCBmdW5jdGlvbiBidXQgYSBQcm9taXNlIGluc3RhbmNlLFxuICogYmVjYXVzZSBvZiBpdHMgYXN5bmNocm9uaXNtICh0eXBpY2FsbHksIG9idGFpbmluZyB0aGUgYXV0aCBpbmZvcm1hdGlvbikuXG4gKlxuICogVGhlIHJlc3VsdCBpcyBhIGZ1bmN0aW9uIHdoaWNoIG1hbmFnZXMgdGhlIEFQSSBjYWxsIHdpdGggdGhlIGdpdmVuIHNldHRpbmdzXG4gKiBhbmQgdGhlIG9wdGlvbnMgb24gdGhlIGludm9jYXRpb24uXG4gKlxuICogQHBhcmFtIHtQcm9taXNlPEdSUENDYWxsPnxHUlBDQ2FsbH0gZnVuYyAtIGlzIGVpdGhlciBhIHByb21pc2UgdG8gYmUgdXNlZCB0byBtYWtlXG4gKiAgIGEgYmFyZSBSUEMgY2FsbCwgb3IganVzdCBhIGJhcmUgUlBDIGNhbGwuXG4gKiBAcGFyYW0ge0NhbGxTZXR0aW5nc30gc2V0dGluZ3MgLSBwcm92aWRlcyB0aGUgc2V0dGluZ3MgZm9yIHRoaXMgY2FsbFxuICogQHBhcmFtIHtEZXNjcmlwdG9yfSBkZXNjcmlwdG9yIC0gb3B0aW9uYWxseSBzcGVjaWZ5IHRoZSBkZXNjcmlwdG9yIGZvclxuICogICB0aGUgbWV0aG9kIGNhbGwuXG4gKiBAcmV0dXJuIHtHYXhDYWxsfSBmdW5jIC0gYSBib3VuZCBtZXRob2Qgb24gYSByZXF1ZXN0IHN0dWIgdXNlZFxuICogICB0byBtYWtlIGFuIHJwYyBjYWxsLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBcGlDYWxsKGZ1bmMsIHNldHRpbmdzLCBkZXNjcmlwdG9yLCBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbl9mYWxsYmFjaykge1xuICAgIC8vIHdlIHdhbnQgdG8gYmUgYWJsZSB0byBhY2NlcHQgYm90aCBwcm9taXNlIHJlc29sdmluZyB0byBhIGZ1bmN0aW9uIGFuZCBhXG4gICAgLy8gZnVuY3Rpb24uIEN1cnJlbnRseSBjbGllbnQgbGlicmFyZXMgYXJlIG9ubHkgY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIGFcbiAgICAvLyBwcm9taXNlLCBidXQgaXQgd2lsbCBjaGFuZ2UuXG4gICAgY29uc3QgZnVuY1Byb21pc2UgPSB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UucmVzb2x2ZShmdW5jKSA6IGZ1bmM7XG4gICAgLy8gdGhlIGZvbGxvd2luZyBhcGlDYWxsZXIgd2lsbCBiZSB1c2VkIGZvciBhbGwgY2FsbHMgb2YgdGhpcyBmdW5jdGlvbi4uLlxuICAgIGNvbnN0IGFwaUNhbGxlciA9ICgwLCBhcGlDYWxsZXJfMS5jcmVhdGVBUElDYWxsZXIpKHNldHRpbmdzLCBkZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gKHJlcXVlc3QsIGNhbGxPcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBsZXQgY3VycmVudEFwaUNhbGxlciA9IGFwaUNhbGxlcjtcbiAgICAgICAgbGV0IHRoaXNTZXR0aW5ncztcbiAgICAgICAgaWYgKGN1cnJlbnRBcGlDYWxsZXIgaW5zdGFuY2VvZiBzdHJlYW1pbmdBcGlDYWxsZXJfMS5TdHJlYW1pbmdBcGlDYWxsZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGdheFN0cmVhbWluZ1JldHJpZXMgPSBjdXJyZW50QXBpQ2FsbGVyLmRlc2NyaXB0b3I/LmdheFN0cmVhbWluZ1JldHJpZXMgPz8gZmFsc2U7XG4gICAgICAgICAgICAvLyBJZiBHYXggc3RyZWFtaW5nIHJldHJpZXMgYXJlIGVuYWJsZWQsIGNoZWNrIHNldHRpbmdzIHBhc3NlZCBhdCBjYWxsIHRpbWUgYW5kIGNvbnZlcnQgcGFyYW1ldGVycyBpZiBuZWVkZWRcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZFJldHJ5T3B0aW9ucyA9ICgwLCBnYXhfMS5jb252ZXJ0UmV0cnlPcHRpb25zKShjYWxsT3B0aW9ucywgZ2F4U3RyZWFtaW5nUmV0cmllcyk7XG4gICAgICAgICAgICB0aGlzU2V0dGluZ3MgPSBzZXR0aW5ncy5tZXJnZShjb252ZXJ0ZWRSZXRyeU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpc1NldHRpbmdzID0gc2V0dGluZ3MubWVyZ2UoY2FsbE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogaWYgYnVuZGxpbmcgaXMgZGlzYWJsZWQgZm9yIHRoaXMgb25lIGNhbGwsXG4gICAgICAgIC8vIHVzZSBkZWZhdWx0IEFQSSBjYWxsZXIgaW5zdGVhZFxuICAgICAgICBpZiAoc2V0dGluZ3MuaXNCdW5kbGluZyAmJiAhdGhpc1NldHRpbmdzLmlzQnVuZGxpbmcpIHtcbiAgICAgICAgICAgIGN1cnJlbnRBcGlDYWxsZXIgPSAoMCwgYXBpQ2FsbGVyXzEuY3JlYXRlQVBJQ2FsbGVyKShzZXR0aW5ncywgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbmdvaW5nQ2FsbCA9IGN1cnJlbnRBcGlDYWxsZXIuaW5pdChjYWxsYmFjayk7XG4gICAgICAgIGZ1bmNQcm9taXNlXG4gICAgICAgICAgICAudGhlbigoZnVuYykgPT4ge1xuICAgICAgICAgICAgLy8gSW5pdGlhbGx5LCB0aGUgZnVuY3Rpb24gaXMganVzdCB3aGF0IGdSUEMgc2VydmVyIHN0dWIgY29udGFpbnMuXG4gICAgICAgICAgICBmdW5jID0gY3VycmVudEFwaUNhbGxlci53cmFwKGZ1bmMpO1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtaW5nID0gY3VycmVudEFwaUNhbGxlci5kZXNjcmlwdG9yXG4gICAgICAgICAgICAgICAgPy5zdHJlYW1pbmc7XG4gICAgICAgICAgICBjb25zdCByZXRyeSA9IHRoaXNTZXR0aW5ncy5yZXRyeTtcbiAgICAgICAgICAgIGlmIChzdHJlYW1pbmcgJiYgcmV0cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0cnkucmV0cnlDb2Rlcy5sZW5ndGggPiAwICYmIHJldHJ5LnNob3VsZFJldHJ5Rm4pIHtcbiAgICAgICAgICAgICAgICAgICAgKDAsIHdhcm5pbmdzXzEud2FybikoJ2VpdGhlcl9yZXRyeWNvZGVzX29yX3Nob3VsZHJldHJ5Zm4nLCAnT25seSBvbmUgb2YgcmV0cnlDb2RlcyBvciBzaG91bGRSZXRyeUZuIG1heSBiZSBkZWZpbmVkLiBJZ25vcmluZyByZXRyeUNvZGVzLicpO1xuICAgICAgICAgICAgICAgICAgICByZXRyeS5yZXRyeUNvZGVzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudEFwaUNhbGxlci5kZXNjcmlwdG9yXG4gICAgICAgICAgICAgICAgICAgIC5nYXhTdHJlYW1pbmdSZXRyaWVzICYmXG4gICAgICAgICAgICAgICAgICAgIHJldHJ5LmdldFJlc3VtcHRpb25SZXF1ZXN0Rm4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRSZXN1bXB0aW9uUmVxdWVzdEZuIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiBnYXhTdHJlYW1pbmdSZXRyaWVzIGlzIHNldCB0byB0cnVlLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyZWFtaW5nICYmIHJldHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldHJ5LnNob3VsZFJldHJ5Rm4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2luZyBhIGZ1bmN0aW9uIHRvIGRldGVybWluZSByZXRyeSBlbGlnaWJpbGl0eSBpcyBvbmx5IHN1cHBvcnRlZCB3aXRoIHNlcnZlciBzdHJlYW1pbmcgY2FsbHMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJldHJ5LmdldFJlc3VtcHRpb25SZXF1ZXN0Rm4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXN1bXB0aW9uIHN0cmF0ZWd5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBzZXJ2ZXIgc3RyZWFtaW5nIHJldHJpZXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJldHJ5LnJldHJ5Q29kZXMgJiYgcmV0cnkucmV0cnlDb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5pbml0aWFsUnBjVGltZW91dE1pbGxpcyA/Pz1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZXR0aW5ncy50aW1lb3V0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIHJldHJpZXNfMS5yZXRyeWFibGUpKGZ1bmMsIHRoaXNTZXR0aW5ncy5yZXRyeSwgdGhpc1NldHRpbmdzLm90aGVyQXJncywgdGhpc1NldHRpbmdzLmFwaU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoMCwgdGltZW91dF8xLmFkZFRpbWVvdXRBcmcpKGZ1bmMsIHRoaXNTZXR0aW5ncy50aW1lb3V0LCB0aGlzU2V0dGluZ3Mub3RoZXJBcmdzKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChhcGlDYWxsKSA9PiB7XG4gICAgICAgICAgICAvLyBBZnRlciBhZGRpbmcgcmV0cmllcyAvIHRpbWVvdXRzLCB0aGUgY2FsbCBmdW5jdGlvbiBiZWNvbWVzIHNpbXBsZXI6XG4gICAgICAgICAgICAvLyBpdCBvbmx5IGFjY2VwdHMgcmVxdWVzdCBhbmQgY2FsbGJhY2suXG4gICAgICAgICAgICBjdXJyZW50QXBpQ2FsbGVyLmNhbGwoYXBpQ2FsbCwgcmVxdWVzdCwgdGhpc1NldHRpbmdzLCBvbmdvaW5nQ2FsbCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRBcGlDYWxsZXIuZmFpbChvbmdvaW5nQ2FsbCwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENhbGxzIG5vcm1hbGx5IHJldHVybiBhIFwiY2FuY2VsbGFibGUgcHJvbWlzZVwiIHRoYXQgY2FuIGJlIHVzZWQgdG8gYGF3YWl0YCBmb3IgdGhlIGFjdHVhbCByZXN1bHQsXG4gICAgICAgIC8vIG9yIHRvIGNhbmNlbCB0aGUgb25nb2luZyBjYWxsLlxuICAgICAgICByZXR1cm4gY3VycmVudEFwaUNhbGxlci5yZXN1bHQob25nb2luZ0NhbGwpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVBcGlDYWxsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/createApiCall.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/descriptor.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/descriptor.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleDescriptor = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = void 0;\nvar longRunningDescriptor_1 = __webpack_require__(/*! ./longRunningCalls/longRunningDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\");\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return longRunningDescriptor_1.LongRunningDescriptor; } }));\nvar pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return pageDescriptor_1.PageDescriptor; } }));\nvar streamDescriptor_1 = __webpack_require__(/*! ./streamingCalls/streamDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\");\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return streamDescriptor_1.StreamDescriptor; } }));\nvar bundleDescriptor_1 = __webpack_require__(/*! ./bundlingCalls/bundleDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return bundleDescriptor_1.BundleDescriptor; } }));\n//# sourceMappingURL=descriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyx3QkFBd0IsR0FBRyxzQkFBc0IsR0FBRyw2QkFBNkI7QUFDNUcsOEJBQThCLG1CQUFPLENBQUMscUlBQTBDO0FBQ2hGLHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6Six1QkFBdUIsbUJBQU8sQ0FBQyxxSEFBa0M7QUFDakUsa0RBQWlELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3BJLHlCQUF5QixtQkFBTyxDQUFDLHVIQUFtQztBQUNwRSxvREFBbUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDMUkseUJBQXlCLG1CQUFPLENBQUMscUhBQWtDO0FBQ25FLG9EQUFtRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUMxSSIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2Rlc2NyaXB0b3IuanM/MjA2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IGV4cG9ydHMuU3RyZWFtRGVzY3JpcHRvciA9IGV4cG9ydHMuUGFnZURlc2NyaXB0b3IgPSBleHBvcnRzLkxvbmdydW5uaW5nRGVzY3JpcHRvciA9IHZvaWQgMDtcbnZhciBsb25nUnVubmluZ0Rlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ1J1bm5pbmdEZXNjcmlwdG9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9uZ3J1bm5pbmdEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsb25nUnVubmluZ0Rlc2NyaXB0b3JfMS5Mb25nUnVubmluZ0Rlc2NyaXB0b3I7IH0gfSk7XG52YXIgcGFnZURlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL3BhZ2luYXRpb25DYWxscy9wYWdlRGVzY3JpcHRvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhZ2VEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWdlRGVzY3JpcHRvcl8xLlBhZ2VEZXNjcmlwdG9yOyB9IH0pO1xudmFyIHN0cmVhbURlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbWluZ0NhbGxzL3N0cmVhbURlc2NyaXB0b3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJlYW1EZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJlYW1EZXNjcmlwdG9yXzEuU3RyZWFtRGVzY3JpcHRvcjsgfSB9KTtcbnZhciBidW5kbGVEZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9idW5kbGluZ0NhbGxzL2J1bmRsZURlc2NyaXB0b3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdW5kbGVEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidW5kbGVEZXNjcmlwdG9yXzEuQnVuZGxlRGVzY3JpcHRvcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/descriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallback.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallback.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.protobufFromJSON = exports.GrpcClient = exports.defaultToObjectOptions = exports.makeUUID = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\nexports.lro = lro;\nexports.createApiCall = createApiCall;\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nexports.protobuf = protobuf;\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nexports.routingHeader = routingHeader;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst fallbackRest = __importStar(__webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\"));\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst fallbackServiceStub_1 = __webpack_require__(/*! ./fallbackServiceStub */ \"(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\");\nconst streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst IamProtos = __importStar(__webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\"));\nexports.IamProtos = IamProtos;\nconst LocationProtos = __importStar(__webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\"));\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = __importStar(__webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\nexports.operationsProtos = operationsProtos;\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\nObject.defineProperty(exports, \"PathTemplate\", ({ enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } }));\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nObject.defineProperty(exports, \"CallSettings\", ({ enumerable: true, get: function () { return gax_1.CallSettings; } }));\nObject.defineProperty(exports, \"constructSettings\", ({ enumerable: true, get: function () { return gax_1.constructSettings; } }));\nObject.defineProperty(exports, \"RetryOptions\", ({ enumerable: true, get: function () { return gax_1.RetryOptions; } }));\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } }));\nexports.version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version) + '-fallback';\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } }));\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } }));\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.PageDescriptor; } }));\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } }));\nvar streaming_2 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nObject.defineProperty(exports, \"StreamType\", ({ enumerable: true, get: function () { return streaming_2.StreamType; } }));\nvar operationsClient_2 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nObject.defineProperty(exports, \"OperationsClient\", ({ enumerable: true, get: function () { return operationsClient_2.OperationsClient; } }));\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\nObject.defineProperty(exports, \"IamClient\", ({ enumerable: true, get: function () { return iamService_1.IamClient; } }));\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\nObject.defineProperty(exports, \"LocationsClient\", ({ enumerable: true, get: function () { return locationService_1.LocationsClient; } }));\nvar util_2 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nObject.defineProperty(exports, \"makeUUID\", ({ enumerable: true, get: function () { return util_2.makeUUID; } }));\nexports.defaultToObjectOptions = {\n    keepCase: false,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n    auth;\n    /**\n     * @deprecated use {@link GrpcClient.auth} instead\n     */\n    authClient;\n    fallback;\n    grpcVersion;\n    static protoCache = new Map();\n    httpRules;\n    numericEnums;\n    minifyJson;\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * gRPC-fallback version of GrpcClient\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n     *\n     * @param options {@link GrpcClientOptions}\n     */\n    constructor(options = {}) {\n        if (options.auth) {\n            this.auth = options.auth;\n        }\n        else if ('authClient' in options) {\n            this.auth = options.authClient;\n        }\n        else {\n            this.auth = new google_auth_library_1.GoogleAuth({\n                authClient: options.auth,\n                ...options,\n            });\n        }\n        this.fallback = options.fallback ? true : false;\n        this.grpcVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\n        this.httpRules = options.httpRules;\n        this.numericEnums = options.numericEnums ?? false;\n        this.minifyJson = options.minifyJson ?? false;\n    }\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    loadProto(jsonObject) {\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\n        return rootObject;\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        return GrpcClient.protobufFromJSON(json, ignoreCache);\n    }\n    /**\n     * Loads the protobuf root object from a JSON object created from a proto file.\n     * By default, this is cached in a global cache and the results should not be mutated.\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    static protobufFromJSON(json, ignoreCache = false) {\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const root = protobuf.Root.fromJSON(json);\n        GrpcClient.protoCache.set(hash, root);\n        return root;\n    }\n    static getServiceMethods(service) {\n        const methods = {};\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\n            const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\n            methods[methodNameLowerCamelCase] = methodObject;\n        }\n        return methods;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        function buildMetadata(abTests, moreHeaders) {\n            const metadata = {};\n            if (!headers) {\n                headers = {};\n            }\n            // Since gRPC expects each header to be an array,\n            // we are doing the same for fallback here.\n            for (const key in headers) {\n                metadata[key] = Array.isArray(headers[key])\n                    ? headers[key]\n                    : [headers[key]];\n            }\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n            const clientVersions = [];\n            if (metadata[CLIENT_VERSION_HEADER] &&\n                metadata[CLIENT_VERSION_HEADER][0]) {\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n            }\n            clientVersions.push(`grpc-web/${exports.version}`);\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n            if (!moreHeaders) {\n                return metadata;\n            }\n            for (const key in moreHeaders) {\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n                    const value = moreHeaders[key];\n                    if (Array.isArray(value)) {\n                        if (metadata[key] === undefined) {\n                            metadata[key] = value;\n                        }\n                        else {\n                            if (Array.isArray(metadata[key])) {\n                                metadata[key].push(...value);\n                            }\n                            else {\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\n                            }\n                        }\n                    }\n                    else {\n                        metadata[key] = [value];\n                    }\n                }\n            }\n            return metadata;\n        }\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied `AuthClient` instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n    async createStub(service, opts, \n    // For consistency with createStub in grpc.ts, customServicePath is defined:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    customServicePath) {\n        if (!this.authClient) {\n            if (this.auth && 'getClient' in this.auth) {\n                this.authClient = await this.auth.getClient();\n            }\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\n                this.authClient = this.auth;\n            }\n        }\n        if (!this.authClient) {\n            throw new Error('No authentication was provided');\n        }\n        if (!opts.universeDomain) {\n            opts.universeDomain = 'googleapis.com';\n        }\n        if (opts.universeDomain) {\n            const universeFromAuth = this.authClient.universeDomain;\n            if (universeFromAuth && opts.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${opts.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        service.resolveAll();\n        const methods = GrpcClient.getServiceMethods(service);\n        const protocol = opts.protocol || 'https';\n        let servicePath = opts.servicePath;\n        if (!servicePath &&\n            service.options &&\n            service.options['(google.api.default_host)']) {\n            servicePath = service.options['(google.api.default_host)'];\n        }\n        if (!servicePath) {\n            throw new Error(`Cannot determine service API path for service ${service.name}.`);\n        }\n        let servicePort;\n        const match = servicePath.match(/^(.*):(\\d+)$/);\n        if (match) {\n            servicePath = match[1];\n            servicePort = parseInt(match[2]);\n        }\n        if (opts.port) {\n            servicePort = opts.port;\n        }\n        else if (!servicePort) {\n            servicePort = 443;\n        }\n        const encoder = fallbackRest.encodeRequest;\n        const decoder = fallbackRest.decodeResponse;\n        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.auth || this.authClient, encoder, decoder, this.numericEnums, this.minifyJson);\n        return serviceStub;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */\n    static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nexports.protobufFromJSON = GrpcClient.protobufFromJSON;\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n    options = Object.assign({ scopes: [] }, options);\n    if (options.protoJson) {\n        options = Object.assign(options, { fallback: true });\n    }\n    const gaxGrpc = new GrpcClient(options);\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\n}\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback) {\n    if (descriptor &&\n        'streaming' in descriptor &&\n        descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\n        return () => {\n            throw new Error('The REST transport currently does not support client-streaming or bidi-stream calls.');\n        };\n    }\n    if (descriptor && 'streaming' in descriptor && !(0, featureDetection_1.isNodeJS)()) {\n        // TODO: with `fetch` this functionality is available in the browser...\n        return () => {\n            throw new Error('Server streaming over the REST transport is only supported in Node.js.');\n        };\n    }\n    return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\n}\nexports.protobufMinimal = __importStar(__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\"));\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nObject.defineProperty(exports, \"warn\", ({ enumerable: true, get: function () { return warnings_1.warn; } }));\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return longrunning_1.Operation; } }));\nObject.defineProperty(exports, \"operation\", ({ enumerable: true, get: function () { return longrunning_1.operation; } }));\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nObject.defineProperty(exports, \"GoogleError\", ({ enumerable: true, get: function () { return googleError_1.GoogleError; } }));\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;\n//# sourceMappingURL=fallback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackRest.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackRest.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeRequest = encodeRequest;\nexports.decodeResponse = decodeResponse;\n// proto-over-HTTP request encoding and decoding\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums, minifyJson) {\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n    const message = rpc.resolvedRequestType.fromObject(request);\n    const json = serializer.toProto3JSON(message, {\n        numericEnums,\n    });\n    if (!json) {\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n    }\n    if (typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n    }\n    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n    if (!transcoded) {\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n    }\n    // If numeric enums feature is requested, add extra parameter to the query string\n    if (numericEnums) {\n        transcoded.queryString =\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\n                '$alt=json%3Benum-encoding=int';\n    }\n    // If minifyJson feature is requested, disable pretty-print JSON responses\n    if (minifyJson) {\n        transcoded.queryString =\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\n                '$prettyPrint=0';\n    }\n    // Converts httpMethod to method that permitted in standard Fetch API spec\n    // https://fetch.spec.whatwg.org/#methods\n    const method = transcoded.httpMethod.toUpperCase();\n    const body = JSON.stringify(transcoded.data);\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n    return {\n        method,\n        url,\n        headers,\n        body,\n    };\n}\nfunction decodeResponse(rpc, ok, response) {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    const decodedString = new TextDecoder().decode(response);\n    if (!decodedString) {\n        throw new Error(`Received null response from RPC ${rpc.name}`);\n    }\n    const json = JSON.parse(decodedString);\n    if (!ok) {\n        const error = googleError_1.GoogleError.parseHttpError(json);\n        throw error;\n    }\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n    if (!message) {\n        throw new Error(`Received null or malformed response from JSON serializer from RPC ${rpc.name}`);\n    }\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n//# sourceMappingURL=fallbackRest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackServiceStub.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateServiceStub = generateServiceStub;\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst streamArrayParser_1 = __webpack_require__(/*! ./streamArrayParser */ \"(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\");\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n// Node.js before v19 does not enable keepalive by default.\n// We'll try to enable it very carefully to make sure we don't break possible non-Node use cases.\n// TODO: remove this after Node 18 is EOL.\n// More info:\n// - https://github.com/node-fetch/node-fetch#custom-agent\n// - https://github.com/googleapis/gax-nodejs/pull/1534\nlet agentOption = null;\nif ((0, featureDetection_1.isNodeJS)()) {\n    const http = __webpack_require__(/*! http */ \"http\");\n    const https = __webpack_require__(/*! https */ \"https\");\n    const httpAgent = new http.Agent({ keepAlive: true });\n    const httpsAgent = new https.Agent({ keepAlive: true });\n    agentOption = (parsedUrl) => {\n        if (parsedUrl.protocol === 'http:') {\n            return httpAgent;\n        }\n        return httpsAgent;\n    };\n}\n// helper function used to properly format empty responses\n// when the response code is 204\nfunction _formatEmptyResponse(rpc) {\n    // format the empty response the same way we format non-empty responses in fallbackRest.ts\n    const emptyMessage = serializer.fromProto3JSON(rpc.resolvedResponseType, JSON.parse('{}'));\n    const resp = rpc.resolvedResponseType.toObject(emptyMessage, fallback_1.defaultToObjectOptions);\n    return resp;\n}\nfunction generateServiceStub(rpcs, protocol, servicePath, servicePort, auth, requestEncoder, responseDecoder, numericEnums, minifyJson) {\n    const serviceStub = {\n        // close method should close all cancel controllers. If this feature request in the future, we can have a cancelControllerFactory that tracks created cancel controllers, and abort them all in close method.\n        close: () => {\n            return { cancel: () => { } };\n        },\n    };\n    for (const [rpcName, rpc] of Object.entries(rpcs)) {\n        serviceStub[rpcName] = (request, options, _metadata, callback) => {\n            options ??= {};\n            // We cannot use async-await in this function because we need to return the canceller object as soon as possible.\n            // Using plain old promises instead.\n            let fetchParameters;\n            try {\n                fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums, minifyJson);\n            }\n            catch (err) {\n                // we could not encode parameters; pass error to the callback\n                // and return a no-op canceler object.\n                if (callback) {\n                    callback(err);\n                }\n                return {\n                    cancel() { },\n                };\n            }\n            const cancelController = (0, featureDetection_1.hasAbortController)()\n                ? new AbortController()\n                : new abort_controller_1.AbortController();\n            const cancelSignal = cancelController.signal;\n            let cancelRequested = false;\n            const url = fetchParameters.url;\n            const headers = new Headers(fetchParameters.headers);\n            for (const key of Object.keys(options)) {\n                headers.set(key, options[key][0]);\n            }\n            const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);\n            let response204Ok = false;\n            const fetchRequest = {\n                headers: headers,\n                body: fetchParameters.body,\n                method: fetchParameters.method,\n                signal: cancelSignal,\n                responseType: 'stream', // ensure gaxios returns the data directly so that it handle data/streams itself\n                agent: agentOption || undefined,\n            };\n            if (fetchParameters.method === 'GET' ||\n                fetchParameters.method === 'DELETE') {\n                delete fetchRequest['body'];\n            }\n            auth\n                .fetch(url, fetchRequest)\n                .then((response) => {\n                // There is a legacy Apiary configuration that some services\n                // use which allows 204 empty responses on success instead of\n                // a 200 OK. This most commonly is seen in delete RPCs,\n                // but does occasionally show up in other endpoints. We\n                // need to allow this behavior so that these clients do not throw an error\n                // when the call actually succeeded\n                // See b/411675301 for more context\n                if (response.status === 204 && response.ok) {\n                    response204Ok = true;\n                }\n                if (response.ok && rpc.responseStream) {\n                    (0, stream_1.pipeline)(response.body, streamArrayParser, (err) => {\n                        if (err &&\n                            (!cancelRequested ||\n                                (err instanceof Error && err.name !== 'AbortError'))) {\n                            if (callback) {\n                                callback(err);\n                            }\n                            streamArrayParser.emit('error', err);\n                        }\n                    });\n                    return;\n                }\n                else {\n                    return Promise.all([\n                        Promise.resolve(response.ok),\n                        response.arrayBuffer(),\n                    ])\n                        .then(([ok, buffer]) => {\n                        const response = responseDecoder(rpc, ok, buffer);\n                        callback(null, response);\n                    })\n                        .catch((err) => {\n                        if (!cancelRequested || err.name !== 'AbortError') {\n                            if (rpc.responseStream) {\n                                if (callback) {\n                                    callback(err);\n                                }\n                                streamArrayParser.emit('error', err);\n                            }\n                            else {\n                                // This supports a legacy Apiary behavior that allows\n                                // empty 204 responses. If we do not intercept this potential error\n                                // from decodeResponse in fallbackRest\n                                // it will cause libraries to erroneously throw an\n                                // error when the call succeeded. This error cannot be checked in\n                                // fallbackRest.ts because decodeResponse does not have the necessary\n                                // context about the response to validate the status code + ok-ness\n                                if (!response204Ok) {\n                                    // by this point, we're guaranteed to have added a callback\n                                    // it is added in the library before calling this.innerApiCalls\n                                    callback(err);\n                                }\n                                else {\n                                    const resp = _formatEmptyResponse(rpc);\n                                    // by this point, we're guaranteed to have added a callback\n                                    // it is added in the library before calling this.innerApiCalls\n                                    callback(null, resp);\n                                }\n                            }\n                        }\n                    });\n                }\n            })\n                .catch((err) => {\n                if (rpc.responseStream) {\n                    if (callback) {\n                        callback(err);\n                    }\n                    streamArrayParser.emit('error', err);\n                }\n                else if (callback) {\n                    callback(err);\n                }\n                else {\n                    throw err;\n                }\n            });\n            if (rpc.responseStream) {\n                return streamArrayParser;\n            }\n            return {\n                cancel: () => {\n                    cancelRequested = true;\n                    cancelController.abort();\n                },\n            };\n        };\n    }\n    return serviceStub;\n}\n//# sourceMappingURL=fallbackServiceStub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmFsbGJhY2tTZXJ2aWNlU3R1Yi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsMkJBQTJCLG1CQUFPLENBQUMsd0ZBQWtCO0FBQ3JELGdDQUFnQyxtQkFBTyxDQUFDLDhGQUF3QjtBQUNoRSwyQkFBMkIsbUJBQU8sQ0FBQyx5RkFBb0I7QUFDdkQsNEJBQTRCLG1CQUFPLENBQUMsMkZBQXFCO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHlFQUFZO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyxrQkFBTTtBQUMvQixrQkFBa0IsbUJBQU8sQ0FBQyxvQkFBTztBQUNqQyx1Q0FBdUMsaUJBQWlCO0FBQ3hELHlDQUF5QyxpQkFBaUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhbmlzaC1sYW5ndWFnZS1sZWFybmluZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmFsbGJhY2tTZXJ2aWNlU3R1Yi5qcz9jOTEzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICAgICAgICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHZhciBhciA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBvKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspKSBhclthci5sZW5ndGhdID0gaztcbiAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG93bktleXMobyk7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gICAgICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlU2VydmljZVN0dWIgPSBnZW5lcmF0ZVNlcnZpY2VTdHViO1xuY29uc3QgYWJvcnRfY29udHJvbGxlcl8xID0gcmVxdWlyZShcImFib3J0LWNvbnRyb2xsZXJcIik7XG5jb25zdCBzZXJpYWxpemVyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJwcm90bzMtanNvbi1zZXJpYWxpemVyXCIpKTtcbmNvbnN0IGZlYXR1cmVEZXRlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2ZlYXR1cmVEZXRlY3Rpb25cIik7XG5jb25zdCBzdHJlYW1BcnJheVBhcnNlcl8xID0gcmVxdWlyZShcIi4vc3RyZWFtQXJyYXlQYXJzZXJcIik7XG5jb25zdCBmYWxsYmFja18xID0gcmVxdWlyZShcIi4vZmFsbGJhY2tcIik7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG4vLyBOb2RlLmpzIGJlZm9yZSB2MTkgZG9lcyBub3QgZW5hYmxlIGtlZXBhbGl2ZSBieSBkZWZhdWx0LlxuLy8gV2UnbGwgdHJ5IHRvIGVuYWJsZSBpdCB2ZXJ5IGNhcmVmdWxseSB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgYnJlYWsgcG9zc2libGUgbm9uLU5vZGUgdXNlIGNhc2VzLlxuLy8gVE9ETzogcmVtb3ZlIHRoaXMgYWZ0ZXIgTm9kZSAxOCBpcyBFT0wuXG4vLyBNb3JlIGluZm86XG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWZldGNoL25vZGUtZmV0Y2gjY3VzdG9tLWFnZW50XG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dheC1ub2RlanMvcHVsbC8xNTM0XG5sZXQgYWdlbnRPcHRpb24gPSBudWxsO1xuaWYgKCgwLCBmZWF0dXJlRGV0ZWN0aW9uXzEuaXNOb2RlSlMpKCkpIHtcbiAgICBjb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuICAgIGNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbiAgICBjb25zdCBodHRwQWdlbnQgPSBuZXcgaHR0cC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KTtcbiAgICBjb25zdCBodHRwc0FnZW50ID0gbmV3IGh0dHBzLkFnZW50KHsga2VlcEFsaXZlOiB0cnVlIH0pO1xuICAgIGFnZW50T3B0aW9uID0gKHBhcnNlZFVybCkgPT4ge1xuICAgICAgICBpZiAocGFyc2VkVXJsLnByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgICAgICAgICByZXR1cm4gaHR0cEFnZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodHRwc0FnZW50O1xuICAgIH07XG59XG4vLyBoZWxwZXIgZnVuY3Rpb24gdXNlZCB0byBwcm9wZXJseSBmb3JtYXQgZW1wdHkgcmVzcG9uc2VzXG4vLyB3aGVuIHRoZSByZXNwb25zZSBjb2RlIGlzIDIwNFxuZnVuY3Rpb24gX2Zvcm1hdEVtcHR5UmVzcG9uc2UocnBjKSB7XG4gICAgLy8gZm9ybWF0IHRoZSBlbXB0eSByZXNwb25zZSB0aGUgc2FtZSB3YXkgd2UgZm9ybWF0IG5vbi1lbXB0eSByZXNwb25zZXMgaW4gZmFsbGJhY2tSZXN0LnRzXG4gICAgY29uc3QgZW1wdHlNZXNzYWdlID0gc2VyaWFsaXplci5mcm9tUHJvdG8zSlNPTihycGMucmVzb2x2ZWRSZXNwb25zZVR5cGUsIEpTT04ucGFyc2UoJ3t9JykpO1xuICAgIGNvbnN0IHJlc3AgPSBycGMucmVzb2x2ZWRSZXNwb25zZVR5cGUudG9PYmplY3QoZW1wdHlNZXNzYWdlLCBmYWxsYmFja18xLmRlZmF1bHRUb09iamVjdE9wdGlvbnMpO1xuICAgIHJldHVybiByZXNwO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVTZXJ2aWNlU3R1YihycGNzLCBwcm90b2NvbCwgc2VydmljZVBhdGgsIHNlcnZpY2VQb3J0LCBhdXRoLCByZXF1ZXN0RW5jb2RlciwgcmVzcG9uc2VEZWNvZGVyLCBudW1lcmljRW51bXMsIG1pbmlmeUpzb24pIHtcbiAgICBjb25zdCBzZXJ2aWNlU3R1YiA9IHtcbiAgICAgICAgLy8gY2xvc2UgbWV0aG9kIHNob3VsZCBjbG9zZSBhbGwgY2FuY2VsIGNvbnRyb2xsZXJzLiBJZiB0aGlzIGZlYXR1cmUgcmVxdWVzdCBpbiB0aGUgZnV0dXJlLCB3ZSBjYW4gaGF2ZSBhIGNhbmNlbENvbnRyb2xsZXJGYWN0b3J5IHRoYXQgdHJhY2tzIGNyZWF0ZWQgY2FuY2VsIGNvbnRyb2xsZXJzLCBhbmQgYWJvcnQgdGhlbSBhbGwgaW4gY2xvc2UgbWV0aG9kLlxuICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgY2FuY2VsOiAoKSA9PiB7IH0gfTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGZvciAoY29uc3QgW3JwY05hbWUsIHJwY10gb2YgT2JqZWN0LmVudHJpZXMocnBjcykpIHtcbiAgICAgICAgc2VydmljZVN0dWJbcnBjTmFtZV0gPSAocmVxdWVzdCwgb3B0aW9ucywgX21ldGFkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgb3B0aW9ucyA/Pz0ge307XG4gICAgICAgICAgICAvLyBXZSBjYW5ub3QgdXNlIGFzeW5jLWF3YWl0IGluIHRoaXMgZnVuY3Rpb24gYmVjYXVzZSB3ZSBuZWVkIHRvIHJldHVybiB0aGUgY2FuY2VsbGVyIG9iamVjdCBhcyBzb29uIGFzIHBvc3NpYmxlLlxuICAgICAgICAgICAgLy8gVXNpbmcgcGxhaW4gb2xkIHByb21pc2VzIGluc3RlYWQuXG4gICAgICAgICAgICBsZXQgZmV0Y2hQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmZXRjaFBhcmFtZXRlcnMgPSByZXF1ZXN0RW5jb2RlcihycGMsIHByb3RvY29sLCBzZXJ2aWNlUGF0aCwgc2VydmljZVBvcnQsIHJlcXVlc3QsIG51bWVyaWNFbnVtcywgbWluaWZ5SnNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgY291bGQgbm90IGVuY29kZSBwYXJhbWV0ZXJzOyBwYXNzIGVycm9yIHRvIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIC8vIGFuZCByZXR1cm4gYSBuby1vcCBjYW5jZWxlciBvYmplY3QuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpIHsgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2FuY2VsQ29udHJvbGxlciA9ICgwLCBmZWF0dXJlRGV0ZWN0aW9uXzEuaGFzQWJvcnRDb250cm9sbGVyKSgpXG4gICAgICAgICAgICAgICAgPyBuZXcgQWJvcnRDb250cm9sbGVyKClcbiAgICAgICAgICAgICAgICA6IG5ldyBhYm9ydF9jb250cm9sbGVyXzEuQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxTaWduYWwgPSBjYW5jZWxDb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgICAgIGxldCBjYW5jZWxSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGZldGNoUGFyYW1ldGVycy51cmw7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoZmV0Y2hQYXJhbWV0ZXJzLmhlYWRlcnMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnNldChrZXksIG9wdGlvbnNba2V5XVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdHJlYW1BcnJheVBhcnNlciA9IG5ldyBzdHJlYW1BcnJheVBhcnNlcl8xLlN0cmVhbUFycmF5UGFyc2VyKHJwYyk7XG4gICAgICAgICAgICBsZXQgcmVzcG9uc2UyMDRPayA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZmV0Y2hSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgYm9keTogZmV0Y2hQYXJhbWV0ZXJzLmJvZHksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBmZXRjaFBhcmFtZXRlcnMubWV0aG9kLFxuICAgICAgICAgICAgICAgIHNpZ25hbDogY2FuY2VsU2lnbmFsLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ3N0cmVhbScsIC8vIGVuc3VyZSBnYXhpb3MgcmV0dXJucyB0aGUgZGF0YSBkaXJlY3RseSBzbyB0aGF0IGl0IGhhbmRsZSBkYXRhL3N0cmVhbXMgaXRzZWxmXG4gICAgICAgICAgICAgICAgYWdlbnQ6IGFnZW50T3B0aW9uIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZmV0Y2hQYXJhbWV0ZXJzLm1ldGhvZCA9PT0gJ0dFVCcgfHxcbiAgICAgICAgICAgICAgICBmZXRjaFBhcmFtZXRlcnMubWV0aG9kID09PSAnREVMRVRFJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBmZXRjaFJlcXVlc3RbJ2JvZHknXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF1dGhcbiAgICAgICAgICAgICAgICAuZmV0Y2godXJsLCBmZXRjaFJlcXVlc3QpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgYSBsZWdhY3kgQXBpYXJ5IGNvbmZpZ3VyYXRpb24gdGhhdCBzb21lIHNlcnZpY2VzXG4gICAgICAgICAgICAgICAgLy8gdXNlIHdoaWNoIGFsbG93cyAyMDQgZW1wdHkgcmVzcG9uc2VzIG9uIHN1Y2Nlc3MgaW5zdGVhZCBvZlxuICAgICAgICAgICAgICAgIC8vIGEgMjAwIE9LLiBUaGlzIG1vc3QgY29tbW9ubHkgaXMgc2VlbiBpbiBkZWxldGUgUlBDcyxcbiAgICAgICAgICAgICAgICAvLyBidXQgZG9lcyBvY2Nhc2lvbmFsbHkgc2hvdyB1cCBpbiBvdGhlciBlbmRwb2ludHMuIFdlXG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byBhbGxvdyB0aGlzIGJlaGF2aW9yIHNvIHRoYXQgdGhlc2UgY2xpZW50cyBkbyBub3QgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBjYWxsIGFjdHVhbGx5IHN1Y2NlZWRlZFxuICAgICAgICAgICAgICAgIC8vIFNlZSBiLzQxMTY3NTMwMSBmb3IgbW9yZSBjb250ZXh0XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA0ICYmIHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlMjA0T2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2sgJiYgcnBjLnJlc3BvbnNlU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBzdHJlYW1fMS5waXBlbGluZSkocmVzcG9uc2UuYm9keSwgc3RyZWFtQXJyYXlQYXJzZXIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWNhbmNlbFJlcXVlc3RlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZXJyIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyLm5hbWUgIT09ICdBYm9ydEVycm9yJykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUFycmF5UGFyc2VyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmVzcG9uc2Uub2spLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChbb2ssIGJ1ZmZlcl0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzcG9uc2VEZWNvZGVyKHJwYywgb2ssIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxSZXF1ZXN0ZWQgfHwgZXJyLm5hbWUgIT09ICdBYm9ydEVycm9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChycGMucmVzcG9uc2VTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUFycmF5UGFyc2VyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc3VwcG9ydHMgYSBsZWdhY3kgQXBpYXJ5IGJlaGF2aW9yIHRoYXQgYWxsb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5IDIwNCByZXNwb25zZXMuIElmIHdlIGRvIG5vdCBpbnRlcmNlcHQgdGhpcyBwb3RlbnRpYWwgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSBkZWNvZGVSZXNwb25zZSBpbiBmYWxsYmFja1Jlc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQgd2lsbCBjYXVzZSBsaWJyYXJpZXMgdG8gZXJyb25lb3VzbHkgdGhyb3cgYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3Igd2hlbiB0aGUgY2FsbCBzdWNjZWVkZWQuIFRoaXMgZXJyb3IgY2Fubm90IGJlIGNoZWNrZWQgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsbGJhY2tSZXN0LnRzIGJlY2F1c2UgZGVjb2RlUmVzcG9uc2UgZG9lcyBub3QgaGF2ZSB0aGUgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRleHQgYWJvdXQgdGhlIHJlc3BvbnNlIHRvIHZhbGlkYXRlIHRoZSBzdGF0dXMgY29kZSArIG9rLW5lc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZTIwNE9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSB0aGlzIHBvaW50LCB3ZSdyZSBndWFyYW50ZWVkIHRvIGhhdmUgYWRkZWQgYSBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQgaXMgYWRkZWQgaW4gdGhlIGxpYnJhcnkgYmVmb3JlIGNhbGxpbmcgdGhpcy5pbm5lckFwaUNhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcCA9IF9mb3JtYXRFbXB0eVJlc3BvbnNlKHJwYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSB0aGlzIHBvaW50LCB3ZSdyZSBndWFyYW50ZWVkIHRvIGhhdmUgYWRkZWQgYSBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQgaXMgYWRkZWQgaW4gdGhlIGxpYnJhcnkgYmVmb3JlIGNhbGxpbmcgdGhpcy5pbm5lckFwaUNhbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChycGMucmVzcG9uc2VTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbUFycmF5UGFyc2VyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChycGMucmVzcG9uc2VTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtQXJyYXlQYXJzZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzZXJ2aWNlU3R1Yjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhbGxiYWNrU2VydmljZVN0dWIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/featureDetection.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/featureDetection.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasWindowFetch = hasWindowFetch;\nexports.isNodeJS = isNodeJS;\nexports.hasAbortController = hasAbortController;\n/* global window */\nconst features = {\n    windowFetch: typeof window !== 'undefined' &&\n        window?.fetch &&\n        typeof window?.fetch === 'function',\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    textEncoder: typeof TextEncoder !== 'undefined',\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    textDecoder: typeof TextDecoder !== 'undefined',\n    nodeJS: typeof process !== 'undefined' && process?.versions?.node,\n    abortController: typeof AbortController !== 'undefined',\n};\nfunction hasWindowFetch() {\n    return features.windowFetch;\n}\nfunction isNodeJS() {\n    return features.nodeJS;\n}\nfunction hasAbortController() {\n    return features.abortController;\n}\n//# sourceMappingURL=featureDetection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmVhdHVyZURldGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsZ0JBQWdCO0FBQ2hCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2ZlYXR1cmVEZXRlY3Rpb24uanM/OGY5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzV2luZG93RmV0Y2ggPSBoYXNXaW5kb3dGZXRjaDtcbmV4cG9ydHMuaXNOb2RlSlMgPSBpc05vZGVKUztcbmV4cG9ydHMuaGFzQWJvcnRDb250cm9sbGVyID0gaGFzQWJvcnRDb250cm9sbGVyO1xuLyogZ2xvYmFsIHdpbmRvdyAqL1xuY29uc3QgZmVhdHVyZXMgPSB7XG4gICAgd2luZG93RmV0Y2g6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdz8uZmV0Y2ggJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdz8uZmV0Y2ggPT09ICdmdW5jdGlvbicsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG4vbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgIHRleHRFbmNvZGVyOiB0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICB0ZXh0RGVjb2RlcjogdHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyxcbiAgICBub2RlSlM6IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzPy52ZXJzaW9ucz8ubm9kZSxcbiAgICBhYm9ydENvbnRyb2xsZXI6IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09ICd1bmRlZmluZWQnLFxufTtcbmZ1bmN0aW9uIGhhc1dpbmRvd0ZldGNoKCkge1xuICAgIHJldHVybiBmZWF0dXJlcy53aW5kb3dGZXRjaDtcbn1cbmZ1bmN0aW9uIGlzTm9kZUpTKCkge1xuICAgIHJldHVybiBmZWF0dXJlcy5ub2RlSlM7XG59XG5mdW5jdGlvbiBoYXNBYm9ydENvbnRyb2xsZXIoKSB7XG4gICAgcmV0dXJuIGZlYXR1cmVzLmFib3J0Q29udHJvbGxlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlYXR1cmVEZXRlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/featureDetection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/gax.js":
/*!**************************************************!*\
  !*** ./node_modules/google-gax/build/src/gax.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallSettings = exports.RetryOptions = void 0;\nexports.convertRetryOptions = convertRetryOptions;\nexports.createRetryOptions = createRetryOptions;\nexports.createBackoffSettings = createBackoffSettings;\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\nexports.createBundleOptions = createBundleOptions;\nexports.constructSettings = constructSettings;\nexports.createByteLengthFunction = createByteLengthFunction;\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @implements {RetryOptionsType}\n * @typedef {Object} RetryOptions\n * @property {number[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n * @property {(function)} shouldRetryFn\n * @property {(function)} getResumptionRequestFn\n */\nclass RetryOptions {\n    retryCodes;\n    backoffSettings;\n    shouldRetryFn;\n    getResumptionRequestFn;\n    constructor(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\n        this.retryCodes = retryCodes;\n        this.backoffSettings = backoffSettings;\n        this.shouldRetryFn = shouldRetryFn;\n        this.getResumptionRequestFn = getResumptionRequestFn;\n    }\n}\nexports.RetryOptions = RetryOptions;\nclass CallSettings {\n    timeout;\n    retry;\n    autoPaginate;\n    pageToken;\n    pageSize;\n    maxResults;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    otherArgs;\n    bundleOptions;\n    isBundling;\n    longrunning;\n    apiName;\n    retryRequestOptions;\n    /**\n     * @param {Object} settings - An object containing parameters of this settings.\n     * @param {number} settings.timeout - The client-side timeout for API calls.\n     *   This parameter is ignored for retrying calls.\n     * @param {RetryOptions} settings.retry - The configuration for retrying upon\n     *   transient error. If set to null, this call will not retry.\n     * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n     *   this attrbute has no meaning. Otherwise, determines whether a page\n     * streamed response should make the page structure transparent to the user by\n     *   flattening the repeated field in the returned generator.\n     * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n     *   this attribute has no meaning. Otherwise, determines the page token used\n     * in the page streaming request.\n     * @param {Object} settings.otherArgs - Additional arguments to be passed to\n     *   the API calls.\n     *\n     * @constructor\n     */\n    constructor(settings) {\n        settings = settings || {};\n        this.timeout = settings.timeout || 30 * 1000;\n        this.retry = settings.retry;\n        this.autoPaginate =\n            'autoPaginate' in settings ? settings.autoPaginate : true;\n        this.maxResults = settings.maxResults;\n        this.otherArgs = settings.otherArgs || {};\n        this.bundleOptions = settings.bundleOptions;\n        this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n        this.longrunning =\n            'longrunning' in settings ? settings.longrunning : undefined;\n        this.apiName = settings.apiName ?? undefined;\n        this.retryRequestOptions = settings.retryRequestOptions;\n    }\n    /**\n     * Returns a new CallSettings merged from this and a CallOptions object.\n     *\n     * @param {CallOptions} options - an instance whose values override\n     *   those in this object. If null, ``merge`` returns a copy of this\n     *   object\n     * @return {CallSettings} The merged CallSettings instance.\n     */\n    merge(options) {\n        if (!options) {\n            return new CallSettings(this);\n        }\n        let timeout = this.timeout;\n        let retry = this.retry;\n        let autoPaginate = this.autoPaginate;\n        let maxResults = this.maxResults;\n        let otherArgs = this.otherArgs;\n        let isBundling = this.isBundling;\n        let longrunning = this.longrunning;\n        let apiName = this.apiName;\n        let retryRequestOptions = this.retryRequestOptions;\n        // If the user provides a timeout to the method, that timeout value will be used\n        // to override the backoff settings.\n        if ('timeout' in options) {\n            timeout = options.timeout;\n        }\n        // If a method-specific timeout is set in the service config, and the retry codes for that\n        // method are non-null, then that timeout value will be used to\n        // override backoff settings.\n        if (retry?.retryCodes) {\n            retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n            retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n            retry.backoffSettings.totalTimeoutMillis = timeout;\n        }\n        if ('retry' in options) {\n            retry = mergeRetryOptions(retry || {}, options.retry);\n        }\n        if ('autoPaginate' in options && !options.autoPaginate) {\n            autoPaginate = false;\n        }\n        if ('maxResults' in options) {\n            maxResults = options.maxResults;\n        }\n        if ('otherArgs' in options) {\n            otherArgs = {};\n            for (const key in this.otherArgs) {\n                otherArgs[key] = this.otherArgs[key];\n            }\n            for (const optionsKey in options.otherArgs) {\n                otherArgs[optionsKey] = options.otherArgs[optionsKey];\n            }\n        }\n        if ('isBundling' in options) {\n            isBundling = options.isBundling;\n        }\n        if ('maxRetries' in options && options.maxRetries !== undefined) {\n            retry.backoffSettings.maxRetries = options.maxRetries;\n            delete retry.backoffSettings.totalTimeoutMillis;\n        }\n        if ('longrunning' in options) {\n            longrunning = options.longrunning;\n        }\n        if ('apiName' in options) {\n            apiName = options.apiName;\n        }\n        if ('retryRequestOptions' in options) {\n            retryRequestOptions = options.retryRequestOptions;\n        }\n        return new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: this.bundleOptions,\n            longrunning,\n            autoPaginate,\n            maxResults,\n            otherArgs,\n            isBundling,\n            apiName,\n            retryRequestOptions,\n        });\n    }\n}\nexports.CallSettings = CallSettings;\n/**\n * Validates passed retry options in preparation for eventual parameter deprecation\n * converts retryRequestOptions to retryOptions\n * then sets retryRequestOptions to null\n *\n * @param {CallOptions} options - a list of passed retry option\n * @return {CallOptions} A new CallOptions object.\n *\n */\nfunction convertRetryOptions(options, gaxStreamingRetries) {\n    // options will be undefined if no CallOptions object is passed at call time\n    if (!options) {\n        return options;\n    }\n    // if a user provided retry AND retryRequestOptions at call time, throw an error\n    // otherwise, convert supported parameters\n    if (!gaxStreamingRetries) {\n        return options;\n    }\n    if (options.retry && options.retryRequestOptions) {\n        throw new Error('Only one of retry or retryRequestOptions may be set');\n    } // handles parameter conversion from retryRequestOptions to retryOptions\n    if (options.retryRequestOptions) {\n        if (options.retryRequestOptions.objectMode !== undefined) {\n            (0, warnings_1.warn)('retry_request_options', 'objectMode override is not supported. It is set to true internally by default in gax.', 'UnsupportedParameterWarning');\n        }\n        if (options.retryRequestOptions.noResponseRetries !== undefined) {\n            (0, warnings_1.warn)('retry_request_options', 'noResponseRetries override is not supported. Please specify retry codes or a function to determine retry eligibility.', 'UnsupportedParameterWarning');\n        }\n        if (options.retryRequestOptions.currentRetryAttempt !== undefined) {\n            (0, warnings_1.warn)('retry_request_options', 'currentRetryAttempt override is not supported. Retry attempts are tracked internally.', 'UnsupportedParameterWarning');\n        }\n        let retryCodes = [status_1.Status.UNAVAILABLE];\n        let shouldRetryFn;\n        if (options.retryRequestOptions.shouldRetryFn) {\n            retryCodes = [];\n            shouldRetryFn = options.retryRequestOptions.shouldRetryFn;\n        }\n        //Backoff settings\n        options.maxRetries =\n            options?.retryRequestOptions?.retries ?? options.maxRetries;\n        // create a default backoff settings object in case the user didn't provide overrides for everything\n        const backoffSettings = createDefaultBackoffSettings();\n        let maxRetryDelayMillis;\n        let totalTimeoutMillis;\n        // maxRetryDelay - this is in seconds, need to convert to milliseconds\n        if (options.retryRequestOptions.maxRetryDelay !== undefined) {\n            maxRetryDelayMillis = options.retryRequestOptions.maxRetryDelay * 1000;\n        }\n        // retryDelayMultiplier - should be a one to one mapping to retryDelayMultiplier\n        const retryDelayMultiplier = options?.retryRequestOptions?.retryDelayMultiplier ??\n            backoffSettings.retryDelayMultiplier;\n        // this is in seconds and needs to be converted to milliseconds and the totalTimeoutMillis parameter\n        if (options.retryRequestOptions.totalTimeout !== undefined) {\n            totalTimeoutMillis = options.retryRequestOptions.totalTimeout * 1000;\n        }\n        else {\n            if (options.maxRetries === undefined) {\n                totalTimeoutMillis = 30000;\n                (0, warnings_1.warn)('retry_request_options_no_max_retries_timeout', 'Neither maxRetries nor totalTimeout were passed. Defaulting to totalTimeout of 30000ms.', 'MissingParameterWarning');\n            }\n        }\n        // for the variables the user wants to override, override in the backoff settings object we made\n        backoffSettings.maxRetryDelayMillis =\n            maxRetryDelayMillis ?? backoffSettings.maxRetryDelayMillis;\n        backoffSettings.retryDelayMultiplier =\n            retryDelayMultiplier ?? backoffSettings.retryDelayMultiplier;\n        backoffSettings.totalTimeoutMillis =\n            totalTimeoutMillis ?? backoffSettings.totalTimeoutMillis;\n        const convertedRetryOptions = createRetryOptions(retryCodes, backoffSettings, shouldRetryFn);\n        options.retry = convertedRetryOptions;\n        delete options.retryRequestOptions; // completely remove them to avoid any further confusion\n        (0, warnings_1.warn)('retry_request_options', 'retryRequestOptions will be deprecated in a future release. Please use retryOptions to pass retry options at call time', 'DeprecationWarning');\n    }\n    return options;\n}\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @param {number[]} retryCodes - a list of Google API canonical error codes OR a function that returns a boolean to determine retry behavior\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @param {function} shouldRetryFn - a function that determines whether a call should retry. If this is defined retryCodes must be empty\n * @param {function} getResumptionRequestFn - a function with a resumption strategy - only used with server streaming retries\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nfunction createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\n    return {\n        retryCodes,\n        backoffSettings,\n        shouldRetryFn,\n        getResumptionRequestFn,\n    };\n}\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        totalTimeoutMillis,\n    };\n}\nfunction createDefaultBackoffSettings() {\n    return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        maxRetries,\n    };\n}\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nfunction createBundleOptions(options) {\n    const params = [\n        'element_count_threshold',\n        'element_count_limit',\n        'request_byte_threshold',\n        'request_byte_limit',\n        'delay_threshold_millis',\n    ];\n    params.forEach(param => {\n        if (param in options && typeof options[param] !== 'number') {\n            throw new Error(`${param} should be a number`);\n        }\n    });\n    const elementCountThreshold = options.element_count_threshold || 0;\n    const elementCountLimit = options.element_count_limit || 0;\n    const requestByteThreshold = options.request_byte_threshold || 0;\n    const requestByteLimit = options.request_byte_limit || 0;\n    const delayThreshold = options.delay_threshold_millis || 0;\n    if (elementCountThreshold === 0 &&\n        requestByteThreshold === 0 &&\n        delayThreshold === 0) {\n        throw new Error('one threshold should be > 0');\n    }\n    return {\n        elementCountThreshold,\n        elementCountLimit,\n        requestByteThreshold,\n        requestByteLimit,\n        delayThreshold,\n    };\n}\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n    if (!methodConfig) {\n        return null;\n    }\n    let codes = null; // this is one instance where it will NOT be an array OR a function because we do not allow shouldRetryFn in the client\n    if (retryCodes && 'retry_codes_name' in methodConfig) {\n        const retryCodesName = methodConfig['retry_codes_name'];\n        codes = (retryCodes[retryCodesName] || []).map(name => {\n            return Number(retryNames[name]);\n        });\n    }\n    let backoffSettings = null;\n    if (retryParams && 'retry_params_name' in methodConfig) {\n        const params = retryParams[methodConfig.retry_params_name];\n        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n    }\n    return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(retry, overrides) {\n    if (!overrides) {\n        return null;\n    }\n    if (!overrides.retryCodes &&\n        !overrides.backoffSettings &&\n        !overrides.shouldRetryFn &&\n        !overrides.getResumptionRequestFn) {\n        return retry;\n    }\n    const retryCodes = overrides.retryCodes\n        ? overrides.retryCodes\n        : retry.retryCodes;\n    const backoffSettings = overrides.backoffSettings\n        ? overrides.backoffSettings\n        : retry.backoffSettings;\n    const shouldRetryFn = overrides.shouldRetryFn\n        ? overrides.shouldRetryFn\n        : retry.shouldRetryFn;\n    const getResumptionRequestFn = overrides.getResumptionRequestFn\n        ? overrides.getResumptionRequestFn\n        : retry.getResumptionRequestFn;\n    return createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\n    otherArgs = otherArgs || {};\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const defaults = {};\n    const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n    if (!serviceConfig) {\n        return null;\n    }\n    // users can override the config from client side, like bundling options.\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/main/src/gax.ts#L546\n    // The way to override bundling options:\n    //\n    // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\n    // const client = new Client({ projectId, customConfig });\n    const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n    const methods = serviceConfig.methods;\n    const overridingMethods = overrides.methods || {};\n    for (const methodName in methods) {\n        const methodConfig = methods[methodName];\n        const jsName = (0, util_1.toLowerCamelCase)(methodName);\n        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n        let bundlingConfig = methodConfig.bundling;\n        let timeout = methodConfig.timeout_millis;\n        if (methodName in overridingMethods) {\n            const overridingMethod = overridingMethods[methodName];\n            if (overridingMethod) {\n                if ('bundling' in overridingMethod) {\n                    bundlingConfig = overridingMethod.bundling;\n                }\n                if ('timeout_millis' in overridingMethod) {\n                    timeout = overridingMethod.timeout_millis;\n                }\n            }\n            retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n        }\n        const apiName = serviceName;\n        defaults[jsName] = new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: bundlingConfig\n                ? createBundleOptions(bundlingConfig)\n                : null,\n            otherArgs,\n            apiName,\n        });\n    }\n    return defaults;\n}\nfunction createByteLengthFunction(message) {\n    return function getByteLength(obj) {\n        try {\n            return message.encode(obj).finish().length;\n        }\n        catch (err) {\n            const stringified = JSON.stringify(obj);\n            (0, warnings_1.warn)('error_encoding_protobufjs_object', `Cannot encode protobuf.js object: ${stringified}: ${err}`);\n            // We failed to encode the object properly, let's just return an upper boundary of its length.\n            // It's only needed for calculating the size of the batch, so it's safe if it's bigger than needed.\n            return stringified.length;\n        }\n    };\n}\n//# sourceMappingURL=gax.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/gax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/googleError.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/googleError.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nconst PROTO_TYPE_PREFIX = 'type.googleapis.com/';\nconst RESOURCE_INFO_TYPE = 'type.googleapis.com/google.rpc.ResourceInfo';\nconst DEFAULT_RESOURCE_TYPE_NAME_FOR_UNKNOWN_TYPES = 'Unknown type';\nconst ANY_PROTO_TYPE_NAME = 'google.protobuf.Any';\nconst UNKNOWN_TYPE_ENCONDED_ERROR_PREFIX = 'Unknown type encoded in';\nconst UNKNOWN_TYPE_NO_SUCH_TYPE = 'no such type';\nconst NUM_OF_PARTS_IN_PROTO_TYPE_NAME = 2;\nclass GoogleError extends Error {\n    code;\n    note;\n    metadata;\n    statusDetails;\n    reason;\n    domain;\n    errorInfoMetadata;\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\n    // Promote google.rpc.ErrorInfo if exist.\n    static parseGRPCStatusDetails(err) {\n        const decoder = new GoogleErrorDecoder();\n        try {\n            if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    err.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    err.reason = statusDetailsObj.errorInfo.reason;\n                    err.domain = statusDetailsObj.errorInfo.domain;\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n        }\n        catch (decodeErr) {\n            // ignoring the error\n        }\n        return err;\n    }\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static parseHttpError(json) {\n        if (Array.isArray(json)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            json = json.find((obj) => {\n                return 'error' in obj;\n            });\n        }\n        // fallback logic.\n        // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n        // google error mapping: https://cloud.google.com/apis/design/errors\n        // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n        if (!json['error']) {\n            json['error'] = {};\n            Object.keys(json)\n                .filter(key => key !== 'error')\n                .forEach(key => {\n                json['error'][key] = json[key];\n                delete json[key];\n            });\n        }\n        const decoder = new GoogleErrorDecoder();\n        const proto3Error = decoder.decodeHTTPError(json['error']);\n        const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\n        // Get gRPC Status Code\n        if (json['error']['status'] &&\n            status_1.Status[json['error']['status']]) {\n            error.code = status_1.Status[json['error']['status']];\n        }\n        else if (json['error']['code']) {\n            // Map Http Status Code to gRPC Status Code\n            error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n        }\n        else {\n            // If error code is absent, proto3 message default value is 0. We should\n            // keep error code as undefined.\n            delete error.code;\n        }\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n        // Rename \"details\" to \"statusDetails\".\n        if (error.details) {\n            try {\n                const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    error.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    error.reason = statusDetailsObj.errorInfo.reason;\n                    error.domain = statusDetailsObj.errorInfo.domain;\n                    // error.metadata has been occupied for gRPC metadata, so we use\n                    // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n                    // consistency with gRPC ErrorInfo metadata field name.\n                    error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n            catch (decodeErr) {\n                // ignoring the error\n            }\n        }\n        return error;\n    }\n}\nexports.GoogleError = GoogleError;\n// Get proto type name removing the prefix. For example full type name: type.googleapis.com/google.rpc.Help, the function returns google.rpc.Help.\nconst getProtoTypeNameFromFullNameType = (fullTypeName) => {\n    const parts = fullTypeName.split(PROTO_TYPE_PREFIX);\n    if (parts.length !== NUM_OF_PARTS_IN_PROTO_TYPE_NAME) {\n        throw Error(\"Can't convert full type name\");\n    }\n    return parts[1];\n};\n// Return true if proto is known in protobuf.\nconst isDetailKnownProto = (protobuf, detail) => {\n    try {\n        const typeName = getProtoTypeNameFromFullNameType(detail['@type']);\n        if (typeName === ANY_PROTO_TYPE_NAME) {\n            return isDetailKnownProto(protobuf, detail.value);\n        }\n        const proto = protobuf.lookup(typeName);\n        if (!proto) {\n            return false;\n        }\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n// Check if error is unknown type encoded.\nconst isUnknownTypeEncodedError = (error) => {\n    if (typeof error === 'object' && error && 'message' in error) {\n        return (error.message.includes(UNKNOWN_TYPE_ENCONDED_ERROR_PREFIX) ||\n            error.message.includes(UNKNOWN_TYPE_NO_SUCH_TYPE));\n    }\n    return false;\n};\n// Build unknown proto as protobuf.Message<{}>.\nconst buildUnknownProtoAsAny = (unknownProto, anyProto) => {\n    return anyProto.create({\n        type_url: unknownProto.type_url,\n        value: unknownProto.value,\n    });\n};\n// Given a protobuf with rpc status protos and a json response value, generate ErrorDetails.\n// Function will traverse trough all the details of the json value and split them based on ErrorDetails.\nconst getErrorDetails = (protobuf, json) => {\n    const error_details = {\n        knownDetails: [],\n        unknownDetails: [],\n    };\n    if (typeof json === 'object' && json !== null && 'details' in json) {\n        const details = json['details'];\n        for (const detail of details) {\n            if (isDetailKnownProto(protobuf, detail)) {\n                error_details.knownDetails.push(detail);\n            }\n            else {\n                error_details.unknownDetails.push(detail);\n            }\n        }\n    }\n    return error_details;\n};\nconst makeResourceInfoError = (resourceType, description) => {\n    return {\n        '@type': RESOURCE_INFO_TYPE,\n        resourceType,\n        description,\n    };\n};\n// Convert unknownDetails to rpc.ResourceInfo. The JSONValue is converted to string and returned as description.\nconst convertUnknownDetailsToResourceInfoError = (unknownDetails) => {\n    const unknownDetailsAsResourceInfoError = [];\n    for (const unknownDetail of unknownDetails) {\n        try {\n            let resourceType = DEFAULT_RESOURCE_TYPE_NAME_FOR_UNKNOWN_TYPES;\n            if (typeof unknownDetail === 'object' &&\n                unknownDetail !== null &&\n                '@type' in unknownDetail) {\n                const unknownType = unknownDetail['@type'];\n                resourceType = unknownType;\n            }\n            // We don't know the proto, so we convert the object to string and assign it as description.\n            const description = JSON.stringify(unknownDetail);\n            unknownDetailsAsResourceInfoError.push(makeResourceInfoError(resourceType, description));\n        }\n        catch (e) {\n            // Failed convert to string, ignore it.\n        }\n    }\n    return unknownDetailsAsResourceInfoError;\n};\nclass GoogleErrorDecoder {\n    root;\n    anyType;\n    statusType;\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = __webpack_require__(/*! ../../build/protos/status.json */ \"(rsc)/./node_modules/google-gax/build/protos/status.json\");\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        let errorInfo;\n        for (const detail of status.details) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            statusDetails: details,\n            reason: errorInfo?.reason,\n            domain: errorInfo?.domain,\n            errorInfoMetadata: errorInfo?.metadata,\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new GoogleError(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n    decodeGRPCStatusDetails(bufferArr) {\n        const details = [];\n        let errorInfo;\n        bufferArr.forEach(buffer => {\n            const uint8array = new Uint8Array(buffer);\n            const rpcStatus = this.statusType.decode(uint8array);\n            for (const detail of rpcStatus.details) {\n                try {\n                    const decodedDetail = this.decodeProtobufAny(detail);\n                    details.push(decodedDetail);\n                    if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                        errorInfo = decodedDetail;\n                    }\n                }\n                catch (error) {\n                    if (isUnknownTypeEncodedError(error)) {\n                        const customErrorAsAny = buildUnknownProtoAsAny(detail, this.anyType);\n                        details.push(customErrorAsAny);\n                    }\n                    // cannot decode detail - just skip it\n                }\n            }\n        });\n        const result = {\n            details,\n            errorInfo,\n        };\n        return result;\n    }\n    // Decodes http error which is an instance of google.rpc.Status.\n    decodeHTTPError(json) {\n        const errorDetails = getErrorDetails(this.root, json);\n        let details = [];\n        if (typeof json === 'object' && json !== null && 'details' in json) {\n            if (errorDetails.knownDetails.length) {\n                details = errorDetails.knownDetails;\n            }\n            if (errorDetails.unknownDetails.length) {\n                const unknowDetailsAsResourceInfo = convertUnknownDetailsToResourceInfoError(errorDetails.unknownDetails);\n                details = [...details, ...unknowDetailsAsResourceInfo];\n            }\n            if (details.length) {\n                json.details = details;\n            }\n        }\n        const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n        if (!errorMessage) {\n            throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n        }\n        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n    }\n    // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n    decodeHttpStatusDetails(rawDetails) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const details = [];\n        let errorInfo;\n        for (const detail of rawDetails) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        return { details, errorInfo };\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\n//# sourceMappingURL=googleError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/googleError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/grpc.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/grpc.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\nconst grpcProtoLoader = __importStar(__webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\"));\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst grpc = __importStar(__webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\"));\nconst os = __importStar(__webpack_require__(/*! os */ \"os\"));\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'build', 'protos');\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst protosList_json_1 = __importDefault(__webpack_require__(/*! ./protosList.json */ \"(rsc)/./node_modules/google-gax/build/src/protosList.json\"));\n// use the correct path separator for the OS we are running on\nconst COMMON_PROTO_FILES = protosList_json_1.default.map(file => file.replace(/[/\\\\]/g, path.sep));\n/*\n * Async version of readFile.\n *\n * @returns {Promise} Contents of file at path.\n */\nasync function readFileAsync(path) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, content) => {\n            if (err)\n                return reject(err);\n            else\n                resolve(content);\n        });\n    });\n}\n/*\n * Async version of execFile.\n *\n * @returns {Promise} stdout from command execution.\n */\nasync function execFileAsync(command, args) {\n    return new Promise((resolve, reject) => {\n        (0, child_process_1.execFile)(command, args, (err, stdout) => {\n            if (err)\n                return reject(err);\n            else\n                resolve(stdout);\n        });\n    });\n}\nclass ClientStub extends grpc.Client {\n}\nexports.ClientStub = ClientStub;\nclass GrpcClient {\n    auth;\n    grpc;\n    grpcVersion;\n    fallback;\n    static protoCache = new Map();\n    httpRules;\n    /**\n     * Base directory for resolving client certificates.\n     *\n     * @internal\n     */\n    baseDirectory;\n    /**\n     * Key for proto cache map. We are doing our best to make sure we respect\n     * the options, so if the same proto file is loaded with different set of\n     * options, the cache won't be used.  Since some of the options are\n     * Functions (e.g. `enums: String` - see below in `loadProto()`),\n     * they will be omitted from the cache key.  If the cache breaks anything\n     * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\n     */\n    static protoCacheKey(filename, options) {\n        if (!filename ||\n            (Array.isArray(filename) && (filename.length === 0 || !filename[0]))) {\n            return undefined;\n        }\n        return JSON.stringify(filename) + ' ' + JSON.stringify(options);\n    }\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * A class which keeps the context of gRPC and auth for the gRPC.\n     *\n     * @param {Object=} options - The optional parameters. It will be directly\n     *   passed to google-auth-library library, so parameters like keyFile or\n     *   credentials will be valid.\n     * @param {Object=} options.auth - An instance of google-auth-library.\n     *   When specified, this auth instance will be used instead of creating\n     *   a new one.\n     * @param {Object=} options.grpc - When specified, this will be used\n     *   for the 'grpc' module in this context. By default, it will load the grpc\n     *   module in the standard way.\n     * @constructor\n     */\n    constructor(options = {}) {\n        this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n        this.fallback = false;\n        const minimumVersion = 10;\n        const major = Number(process.version.match(/^v(\\d+)/)?.[1]);\n        if (Number.isNaN(major) || major < minimumVersion) {\n            const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` +\n                'https://github.com/googleapis/google-cloud-node#supported-nodejs-versions';\n            throw new Error(errorMessage);\n        }\n        if ('grpc' in options) {\n            this.grpc = options.grpc;\n            this.grpcVersion = '';\n        }\n        else {\n            this.grpc = grpc;\n            this.grpcVersion = (__webpack_require__(/*! @grpc/grpc-js/package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\n        }\n    }\n    /**\n     * Creates a gRPC credentials. It asks the auth data if necessary.\n     * @private\n     * @param {Object} opts - options values for configuring credentials.\n     * @param {Object=} opts.sslCreds - when specified, this is used instead\n     *   of default channel credentials.\n     * @return {Promise} The promise which will be resolved to the gRPC credential.\n     */\n    async _getCredentials(opts) {\n        if (opts.sslCreds) {\n            return opts.sslCreds;\n        }\n        const grpc = this.grpc;\n        const sslCreds = opts.cert && opts.key\n            ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert))\n            : grpc.credentials.createSsl();\n        const client = await this.auth.getClient();\n        const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential({\n            // the `grpc` package does not support the `Headers` object yet\n            getRequestHeaders: async (url) => {\n                const headers = await client.getRequestHeaders(url);\n                const genericHeadersObject = {};\n                headers.forEach((value, key) => (genericHeadersObject[key] = value));\n                return genericHeadersObject;\n            },\n        }));\n        return credentials;\n    }\n    static defaultOptions() {\n        // This set of @grpc/proto-loader options\n        // 'closely approximates the existing behavior of grpc.load'\n        const includeDirs = INCLUDE_DIRS.slice();\n        const options = {\n            keepCase: false,\n            longs: String,\n            enums: String,\n            defaults: true,\n            oneofs: true,\n            includeDirs,\n        };\n        return options;\n    }\n    /**\n     * Loads the gRPC service from the proto file(s) at the given path and with the\n     * given options. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param filename The path to the proto file(s).\n     * @param options Options for loading the proto file.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     */\n    loadFromProto(filename, options, ignoreCache = false) {\n        const cacheKey = GrpcClient.protoCacheKey(filename, options);\n        let grpcPackage = cacheKey\n            ? GrpcClient.protoCache.get(cacheKey)\n            : undefined;\n        if (ignoreCache || !grpcPackage) {\n            const packageDef = grpcProtoLoader.loadSync(filename, options);\n            grpcPackage = this.grpc.loadPackageDefinition(packageDef);\n            if (cacheKey) {\n                GrpcClient.protoCache.set(cacheKey, grpcPackage);\n            }\n        }\n        return grpcPackage;\n    }\n    /**\n     * Load gRPC proto service from a filename looking in googleapis common protos\n     * when necessary. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param {String} protoPath - The directory to search for the protofile.\n     * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\n     *   If omitted, protoPath will be treated as a file path to load.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n     *   object).\n     */\n    loadProto(protoPath, filename, ignoreCache = false) {\n        if (!filename) {\n            filename = path.basename(protoPath);\n            protoPath = path.dirname(protoPath);\n        }\n        if (Array.isArray(filename) && filename.length === 0) {\n            return {};\n        }\n        const options = GrpcClient.defaultOptions();\n        options.includeDirs.unshift(protoPath);\n        return this.loadFromProto(filename, options, ignoreCache);\n    }\n    static _resolveFile(protoPath, filename) {\n        if (fs.existsSync(path.join(protoPath, filename))) {\n            return path.join(protoPath, filename);\n        }\n        else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n            return path.join(googleProtoFilesDir, filename);\n        }\n        throw new Error(filename + ' could not be found in ' + protoPath);\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const options = GrpcClient.defaultOptions();\n        const packageDefinition = grpcProtoLoader.fromJSON(json, options);\n        const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\n        GrpcClient.protoCache.set(hash, grpcPackage);\n        return grpcPackage;\n    }\n    metadataBuilder(headers) {\n        const Metadata = this.grpc.Metadata;\n        const baseMetadata = new Metadata();\n        for (const key in headers) {\n            const value = headers[key];\n            if (Array.isArray(value)) {\n                value.forEach(v => baseMetadata.add(key, v));\n            }\n            else {\n                baseMetadata.set(key, `${value}`);\n            }\n        }\n        return function buildMetadata(abTests, moreHeaders) {\n            // TODO: bring the A/B testing info into the metadata.\n            let copied = false;\n            let metadata = baseMetadata;\n            if (moreHeaders) {\n                for (const key in moreHeaders) {\n                    if (key.toLowerCase() !== 'x-goog-api-client') {\n                        if (!copied) {\n                            copied = true;\n                            metadata = metadata.clone();\n                        }\n                        const value = moreHeaders[key];\n                        if (Array.isArray(value)) {\n                            value.forEach(v => metadata.add(key, v));\n                        }\n                        else {\n                            metadata.set(key, `${value}`);\n                        }\n                    }\n                }\n            }\n            return metadata;\n        };\n    }\n    /**\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, { metadataBuilder: this.metadataBuilder(headers) });\n    }\n    /**\n     * Creates a gRPC stub with current gRPC and auth.\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} options - The optional arguments to customize\n     *   gRPC connection. This options will be passed to the constructor of\n     *   gRPC client too.\n     * @param {string} options.servicePath - The name of the server of the service.\n     * @param {number} options.port - The port of the service.\n     * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n     *   to set up gRPC connection.\n     * @param {string} defaultServicePath - The default service path.\n     * @return {Promise} A promise which resolves to a gRPC stub instance.\n     */\n    async createStub(CreateStub, options, customServicePath) {\n        // The following options are understood by grpc-gcp and need a special treatment\n        // (should be passed without a `grpc.` prefix)\n        const grpcGcpOptions = [\n            'grpc.callInvocationTransformer',\n            'grpc.channelFactoryOverride',\n            'grpc.gcpApiConfig',\n        ];\n        const [cert, key] = await this._detectClientCertificate(options, options.universeDomain);\n        const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\n        const opts = Object.assign({}, options, { cert, key, servicePath });\n        const serviceAddress = servicePath + ':' + opts.port;\n        if (!options.universeDomain) {\n            options.universeDomain = 'googleapis.com';\n        }\n        if (options.universeDomain) {\n            const universeFromAuth = await this.auth.getUniverseDomain();\n            if (universeFromAuth && options.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${options.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        const creds = await this._getCredentials(opts);\n        const grpcOptions = {};\n        // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\n        // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\n        // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\n        grpcOptions['grpc.max_receive_message_length'] = -1;\n        grpcOptions['grpc.max_send_message_length'] = -1;\n        grpcOptions['grpc.initial_reconnect_backoff_ms'] = 1000;\n        Object.keys(opts).forEach(key => {\n            const value = options[key];\n            // the older versions had a bug which required users to call an option\n            // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\n            // this here until the next major release\n            if (key.startsWith('grpc.grpc.')) {\n                key = key.replace(/^grpc\\./, '');\n            }\n            if (key.startsWith('grpc.')) {\n                if (grpcGcpOptions.includes(key)) {\n                    key = key.replace(/^grpc\\./, '');\n                }\n                grpcOptions[key] = value;\n            }\n            if (key.startsWith('grpc-node.')) {\n                grpcOptions[key] = value;\n            }\n        });\n        const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n        return stub;\n    }\n    /**\n     * Detect mTLS client certificate based on logic described in\n     * https://google.aip.dev/auth/4114.\n     *\n     * @param {object} [options] - The configuration object.\n     * @returns {Promise} Resolves array of strings representing cert and key.\n     */\n    async _detectClientCertificate(opts, universeDomain) {\n        const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\n        const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\n        if (typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_CLIENT_CERTIFICATE === 'true') {\n            if (universeDomain && universeDomain !== 'googleapis.com') {\n                throw new Error('mTLS is not supported outside of googleapis.com universe domain.');\n            }\n            if (opts?.cert && opts?.key) {\n                return [opts.cert, opts.key];\n            }\n            // If context aware metadata exists, run the cert provider command,\n            // parse the output to extract cert and key, and use this cert/key.\n            const metadataPath = (0, path_1.join)(this.baseDirectory || os.homedir(), '.secureConnect', 'context_aware_metadata.json');\n            const metadata = JSON.parse(await readFileAsync(metadataPath));\n            if (!metadata.cert_provider_command) {\n                throw Error('no cert_provider_command found');\n            }\n            const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\n            const matchCert = stdout.toString().match(certRegex);\n            const matchKey = stdout.toString().match(keyRegex);\n            if (!(matchCert?.groups && matchKey?.groups)) {\n                throw Error('unable to parse certificate and key');\n            }\n            else {\n                return [matchCert.groups.cert, matchKey.groups.key];\n            }\n        }\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\n        // use no cert or key:\n        return [undefined, undefined];\n    }\n    /**\n     * Return service path, taking into account mTLS logic.\n     * See: https://google.aip.dev/auth/4114\n     *\n     * @param {string|undefined} servicePath - The path of the service.\n     * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\n     * @param {boolean} hasCertificate - Was a certificate found.\n     * @returns {string} The DNS address for this service.\n     */\n    _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\n        // If user provides a custom service path, return the current service\n        // path and do not attempt to add mtls subdomain:\n        if (customServicePath || !servicePath)\n            return servicePath;\n        if (typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'never') {\n            // It was explicitly asked that mtls endpoint not be used:\n            return servicePath;\n        }\n        else if ((typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'always') ||\n            hasCertificate) {\n            // Either auto-detect or explicit setting of endpoint:\n            return servicePath.replace('googleapis.com', 'mtls.googleapis.com');\n        }\n        return servicePath;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */\n    static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nclass GoogleProtoFilesRoot extends protobuf.Root {\n    constructor(...args) {\n        super(...args);\n    }\n    // Causes the loading of an included proto to check if it is a common\n    // proto. If it is a common proto, use the bundled proto.\n    resolvePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        // Fully qualified paths don't need to be resolved.\n        if (path.isAbsolute(includePath)) {\n            if (!fs.existsSync(includePath)) {\n                throw new Error('The include `' + includePath + '` was not found.');\n            }\n            return includePath;\n        }\n        if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n            return path.join(googleProtoFilesDir, includePath);\n        }\n        return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n    }\n    static _findIncludePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        let current = originPath;\n        let found = fs.existsSync(path.join(current, includePath));\n        while (!found && current.length > 0) {\n            current = current.substring(0, current.lastIndexOf(path.sep));\n            found = fs.existsSync(path.join(current, includePath));\n        }\n        if (!found) {\n            throw new Error('The include `' + includePath + '` was not found.');\n        }\n        return path.join(current, includePath);\n    }\n}\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;\n//# sourceMappingURL=grpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/grpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iamService.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/iamService.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IamClient = void 0;\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nconst gapicConfig = __importStar(__webpack_require__(/*! ./iam_policy_service_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json\"));\nconst fallback = __importStar(__webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\"));\nlet version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\nconst jsonProtos = __webpack_require__(/*! ../protos/iam_service.json */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\nclass IamClient {\n    _terminated = false;\n    _opts;\n    _defaults;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _protos;\n    auth;\n    descriptors = { page: {}, stream: {}, longrunning: {} };\n    innerApiCalls = {};\n    iamPolicyStub;\n    gaxGrpc;\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        this.gaxGrpc = gaxGrpc;\n        // Ensure that options include the service address and port.\n        const opts = Object.assign({\n            servicePath: options.servicePath,\n            port: options.port,\n            clientConfig: options.clientConfig,\n            apiEndpoint: options.apiEndpoint,\n            fallback: options.fallback,\n        }, options);\n        version = opts.fallback ? fallback.version : version;\n        opts.scopes = this.constructor.scopes;\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.iamPolicyStub) {\n            return this.iamPolicyStub;\n        }\n        // Put together the \"service stub\" for\n        // google.iam.v1.IAMPolicy.\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.iam.v1.IAMPolicy')\n            : this._protos.google.iam.v1.IAMPolicy, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const iamPolicyStubMethods = [\n            'getIamPolicy',\n            'setIamPolicy',\n            'testIamPermissions',\n        ];\n        for (const methodName of iamPolicyStubMethods) {\n            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n        }\n        return this.iamPolicyStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloudkms',\n        ];\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    getIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\n    }\n    setIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\n    }\n    testIamPermissions(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize().catch(console.error);\n        if (!this._terminated) {\n            return this.iamPolicyStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.IamClient = IamClient;\n//# sourceMappingURL=iamService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/iamService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/google-gax/build/src/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializer = exports.warn = exports.ChannelCredentials = exports.decodeProtobufAny = exports.decodeAnyProtosInArray = exports.makeUUID = exports.protobufFromJSON = exports.fallback = exports.protobufMinimal = exports.protobuf = exports.version = exports.createByteLengthFunction = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.routingHeader = exports.StreamType = exports.Status = exports.PathTemplate = exports.operation = exports.Operation = exports.GrpcClient = exports.GoogleProtoFilesRoot = exports.ClientStub = exports.GoogleError = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createBundleOptions = exports.createRetryOptions = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.createApiCall = exports.OngoingCall = exports.grpc = exports.loggingUtils = exports.googleAuthLibrary = exports.GoogleAuth = void 0;\nexports.lro = lro;\nconst grpc = __importStar(__webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\"));\nexports.grpc = grpc;\nconst grpc_1 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\nconst IamProtos = __importStar(__webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\"));\nexports.IamProtos = IamProtos;\nconst LocationProtos = __importStar(__webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\"));\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = __importStar(__webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\nexports.operationsProtos = operationsProtos;\nconst operationsClient = __importStar(__webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\"));\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nexports.routingHeader = routingHeader;\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nObject.defineProperty(exports, \"GoogleAuth\", ({ enumerable: true, get: function () { return google_auth_library_1.GoogleAuth; } }));\nexports.googleAuthLibrary = __importStar(__webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\"));\nexports.loggingUtils = __importStar(__webpack_require__(/*! google-logging-utils */ \"(rsc)/./node_modules/google-logging-utils/build/src/index.js\"));\nvar call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nObject.defineProperty(exports, \"OngoingCall\", ({ enumerable: true, get: function () { return call_1.OngoingCall; } }));\nvar createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nObject.defineProperty(exports, \"createApiCall\", ({ enumerable: true, get: function () { return createApiCall_1.createApiCall; } }));\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } }));\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } }));\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.PageDescriptor; } }));\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } }));\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nObject.defineProperty(exports, \"CallSettings\", ({ enumerable: true, get: function () { return gax_1.CallSettings; } }));\nObject.defineProperty(exports, \"constructSettings\", ({ enumerable: true, get: function () { return gax_1.constructSettings; } }));\nObject.defineProperty(exports, \"RetryOptions\", ({ enumerable: true, get: function () { return gax_1.RetryOptions; } }));\nObject.defineProperty(exports, \"createRetryOptions\", ({ enumerable: true, get: function () { return gax_1.createRetryOptions; } }));\nObject.defineProperty(exports, \"createBundleOptions\", ({ enumerable: true, get: function () { return gax_1.createBundleOptions; } }));\nObject.defineProperty(exports, \"createBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createBackoffSettings; } }));\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } }));\nObject.defineProperty(exports, \"createMaxRetriesBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createMaxRetriesBackoffSettings; } }));\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nObject.defineProperty(exports, \"GoogleError\", ({ enumerable: true, get: function () { return googleError_1.GoogleError; } }));\nvar grpc_2 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\nObject.defineProperty(exports, \"ClientStub\", ({ enumerable: true, get: function () { return grpc_2.ClientStub; } }));\nObject.defineProperty(exports, \"GoogleProtoFilesRoot\", ({ enumerable: true, get: function () { return grpc_2.GoogleProtoFilesRoot; } }));\nObject.defineProperty(exports, \"GrpcClient\", ({ enumerable: true, get: function () { return grpc_2.GrpcClient; } }));\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return longrunning_1.Operation; } }));\nObject.defineProperty(exports, \"operation\", ({ enumerable: true, get: function () { return longrunning_1.operation; } }));\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\nObject.defineProperty(exports, \"PathTemplate\", ({ enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } }));\nvar status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nObject.defineProperty(exports, \"Status\", ({ enumerable: true, get: function () { return status_1.Status; } }));\nvar streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nObject.defineProperty(exports, \"StreamType\", ({ enumerable: true, get: function () { return streaming_1.StreamType; } }));\nfunction lro(options) {\n    options = Object.assign({ scopes: lro.ALL_SCOPES }, options);\n    const gaxGrpc = new grpc_1.GrpcClient(options);\n    return new operationsClient.OperationsClientBuilder(gaxGrpc);\n}\nlro.SERVICE_ADDRESS = operationsClient.SERVICE_ADDRESS;\nlro.ALL_SCOPES = operationsClient.ALL_SCOPES;\nvar operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nObject.defineProperty(exports, \"OperationsClient\", ({ enumerable: true, get: function () { return operationsClient_1.OperationsClient; } }));\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\nObject.defineProperty(exports, \"IamClient\", ({ enumerable: true, get: function () { return iamService_1.IamClient; } }));\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\nObject.defineProperty(exports, \"LocationsClient\", ({ enumerable: true, get: function () { return locationService_1.LocationsClient; } }));\nexports.createByteLengthFunction = grpc_1.GrpcClient?.createByteLengthFunction;\nexports.version = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version;\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nexports.protobuf = protobuf;\nexports.protobufMinimal = __importStar(__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\"));\nconst fallback = __importStar(__webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\"));\nexports.fallback = fallback;\nexports.protobufFromJSON = fallback.protobufFromJSON;\nvar util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nObject.defineProperty(exports, \"makeUUID\", ({ enumerable: true, get: function () { return util_1.makeUUID; } }));\nObject.defineProperty(exports, \"decodeAnyProtosInArray\", ({ enumerable: true, get: function () { return util_1.decodeAnyProtosInArray; } }));\nObject.defineProperty(exports, \"decodeProtobufAny\", ({ enumerable: true, get: function () { return util_1.decodeProtobufAny; } }));\nvar grpc_js_1 = __webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\");\nObject.defineProperty(exports, \"ChannelCredentials\", ({ enumerable: true, get: function () { return grpc_js_1.ChannelCredentials; } }));\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nObject.defineProperty(exports, \"warn\", ({ enumerable: true, get: function () { return warnings_1.warn; } }));\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nexports.serializer = serializer;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locationService.js":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locationService.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocationsClient = void 0;\n/* global window */\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nconst pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\nconst jsonProtos = __webpack_require__(/*! ../protos/locations.json */ \"(rsc)/./node_modules/google-gax/build/protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = __importStar(__webpack_require__(/*! ./locations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/locations_client_config.json\"));\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\nclass LocationsClient {\n    _terminated = false;\n    _opts;\n    _providedCustomServicePath;\n    _protos;\n    _defaults;\n    auth;\n    descriptors = {\n        page: {},\n        stream: {},\n        longrunning: {},\n        batching: {},\n    };\n    warn;\n    innerApiCalls;\n    locationsStub;\n    gaxGrpc;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    PageDescriptor;\n    /**\n     * Construct an instance of LocationsClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    opts) {\n        // Ensure that options include all the required fields.\n        this.gaxGrpc = gaxGrpc;\n        const staticMembers = this.constructor;\n        const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;\n        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);\n        const port = opts?.port || staticMembers.port;\n        const clientConfig = opts?.clientConfig ?? {};\n        const fallback = opts?.fallback ??\n            (typeof window !== 'undefined' && typeof window?.fetch === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = warnings_1.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.locationsStub) {\n            return this.locationsStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.location.Locations.\n        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.location.Locations')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const locationsStubMethods = ['listLocations', 'getLocation'];\n        for (const methodName of locationsStubMethods) {\n            const callPromise = this.locationsStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.locationsStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getLocation(request);\n     */\n    getLocation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listLocationsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listLocations(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.listLocations(request, options, callback);\n    }\n    /**\n     * Equivalent to `listLocations`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listLocationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize().catch(console.error);\n        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize().catch(console.error);\n        if (!this._terminated) {\n            return this.locationsStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.LocationsClient = LocationsClient;\n//# sourceMappingURL=locationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/locationService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LongrunningApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst longrunning_1 = __webpack_require__(/*! ./longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nclass LongrunningApiCaller {\n    longrunningDescriptor;\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */\n    constructor(longrunningDescriptor) {\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback) => {\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse) => {\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\n//# sourceMappingURL=longRunningApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0FwaUNhbGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZUFBZSxtQkFBTyxDQUFDLGtFQUFTO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQyxnRUFBUTtBQUM5QixzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFuaXNoLWxhbmd1YWdlLWxlYXJuaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9sb25nUnVubmluZ0NhbGxzL2xvbmdSdW5uaW5nQXBpQ2FsbGVyLmpzPzU5Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvbmdydW5uaW5nQXBpQ2FsbGVyID0gdm9pZCAwO1xuY29uc3QgY2FsbF8xID0gcmVxdWlyZShcIi4uL2NhbGxcIik7XG5jb25zdCBnYXhfMSA9IHJlcXVpcmUoXCIuLi9nYXhcIik7XG5jb25zdCBsb25ncnVubmluZ18xID0gcmVxdWlyZShcIi4vbG9uZ3J1bm5pbmdcIik7XG5jbGFzcyBMb25ncnVubmluZ0FwaUNhbGxlciB7XG4gICAgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gQVBJIGNhbGxlciB0aGF0IHBlcmZvcm1zIHBvbGxpbmcgb24gYSBsb25nIHJ1bm5pbmcgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0xvbmdSdW5uaW5nRGVzY3JpcHRvcn0gbG9uZ3J1bm5pbmdEZXNjcmlwdG9yIC0gSG9sZHMgdGhlXG4gICAgICogZGVjb2RlcnMgdXNlZCBmb3IgdW5wYWNraW5nIHJlc3BvbnNlcyBhbmQgdGhlIG9wZXJhdGlvbnNDbGllbnRcbiAgICAgKiB1c2VkIGZvciBwb2xsaW5nIHRoZSBvcGVyYXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobG9uZ3J1bm5pbmdEZXNjcmlwdG9yKSB7XG4gICAgICAgIHRoaXMubG9uZ3J1bm5pbmdEZXNjcmlwdG9yID0gbG9uZ3J1bm5pbmdEZXNjcmlwdG9yO1xuICAgIH1cbiAgICBpbml0KGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGwoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsUHJvbWlzZSgpO1xuICAgIH1cbiAgICB3cmFwKGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfVxuICAgIGNhbGwoYXBpQ2FsbCwgYXJndW1lbnQsIHNldHRpbmdzLCBjYW5jZWxsZXIpIHtcbiAgICAgICAgY2FuY2VsbGVyLmNhbGwoKGFyZ3VtZW50LCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBPcGVyYXRpb24oYXBpQ2FsbCwgc2V0dGluZ3MsIGFyZ3VtZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH0sIGFyZ3VtZW50KTtcbiAgICB9XG4gICAgX3dyYXBPcGVyYXRpb24oYXBpQ2FsbCwgc2V0dGluZ3MsIGFyZ3VtZW50LCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgYmFja29mZlNldHRpbmdzID0gc2V0dGluZ3MubG9uZ3J1bm5pbmc7XG4gICAgICAgIGlmICghYmFja29mZlNldHRpbmdzKSB7XG4gICAgICAgICAgICBiYWNrb2ZmU2V0dGluZ3MgPSAoMCwgZ2F4XzEuY3JlYXRlRGVmYXVsdEJhY2tvZmZTZXR0aW5ncykoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb25ncnVubmluZ0Rlc2NyaXB0b3IgPSB0aGlzLmxvbmdydW5uaW5nRGVzY3JpcHRvcjtcbiAgICAgICAgcmV0dXJuIGFwaUNhbGwoYXJndW1lbnQsIChlcnIsIHJhd1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsLCBudWxsLCByYXdSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGxvbmdydW5uaW5nXzEuT3BlcmF0aW9uKHJhd1Jlc3BvbnNlLCBsb25ncnVubmluZ0Rlc2NyaXB0b3IsIGJhY2tvZmZTZXR0aW5ncywgc2V0dGluZ3MpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgb3BlcmF0aW9uLCByYXdSZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmYWlsKGNhbmNlbGxlciwgZXJyKSB7XG4gICAgICAgIGNhbmNlbGxlci5jYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgICByZXN1bHQoY2FuY2VsbGVyKSB7XG4gICAgICAgIHJldHVybiBjYW5jZWxsZXIucHJvbWlzZTtcbiAgICB9XG59XG5leHBvcnRzLkxvbmdydW5uaW5nQXBpQ2FsbGVyID0gTG9uZ3J1bm5pbmdBcGlDYWxsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nUnVubmluZ0FwaUNhbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LongRunningDescriptor = void 0;\nconst longRunningApiCaller_1 = __webpack_require__(/*! ./longRunningApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\");\n/**\n * A descriptor for long-running operations.\n */\nclass LongRunningDescriptor {\n    operationsClient;\n    responseDecoder;\n    metadataDecoder;\n    constructor(operationsClient, responseDecoder, metadataDecoder) {\n        this.operationsClient = operationsClient;\n        this.responseDecoder = responseDecoder;\n        this.metadataDecoder = metadataDecoder;\n    }\n    getApiCaller() {\n        return new longRunningApiCaller_1.LongrunningApiCaller(this);\n    }\n}\nexports.LongRunningDescriptor = LongRunningDescriptor;\n//# sourceMappingURL=longRunningDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0Rlc2NyaXB0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLCtCQUErQixtQkFBTyxDQUFDLGtIQUF3QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ1J1bm5pbmdEZXNjcmlwdG9yLmpzPzUyYmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvbmdSdW5uaW5nRGVzY3JpcHRvciA9IHZvaWQgMDtcbmNvbnN0IGxvbmdSdW5uaW5nQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi9sb25nUnVubmluZ0FwaUNhbGxlclwiKTtcbi8qKlxuICogQSBkZXNjcmlwdG9yIGZvciBsb25nLXJ1bm5pbmcgb3BlcmF0aW9ucy5cbiAqL1xuY2xhc3MgTG9uZ1J1bm5pbmdEZXNjcmlwdG9yIHtcbiAgICBvcGVyYXRpb25zQ2xpZW50O1xuICAgIHJlc3BvbnNlRGVjb2RlcjtcbiAgICBtZXRhZGF0YURlY29kZXI7XG4gICAgY29uc3RydWN0b3Iob3BlcmF0aW9uc0NsaWVudCwgcmVzcG9uc2VEZWNvZGVyLCBtZXRhZGF0YURlY29kZXIpIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zQ2xpZW50ID0gb3BlcmF0aW9uc0NsaWVudDtcbiAgICAgICAgdGhpcy5yZXNwb25zZURlY29kZXIgPSByZXNwb25zZURlY29kZXI7XG4gICAgICAgIHRoaXMubWV0YWRhdGFEZWNvZGVyID0gbWV0YWRhdGFEZWNvZGVyO1xuICAgIH1cbiAgICBnZXRBcGlDYWxsZXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9uZ1J1bm5pbmdBcGlDYWxsZXJfMS5Mb25ncnVubmluZ0FwaUNhbGxlcih0aGlzKTtcbiAgICB9XG59XG5leHBvcnRzLkxvbmdSdW5uaW5nRGVzY3JpcHRvciA9IExvbmdSdW5uaW5nRGVzY3JpcHRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvbmdSdW5uaW5nRGVzY3JpcHRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longrunning.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Operation = void 0;\nexports.operation = operation;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst operationProtos = __importStar(__webpack_require__(/*! ../../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\nclass Operation extends events_1.EventEmitter {\n    completeListeners;\n    hasActiveListeners;\n    latestResponse;\n    longrunningDescriptor;\n    result;\n    metadata;\n    backoffSettings;\n    _callOptions;\n    currentCallPromise_;\n    name;\n    done;\n    error;\n    response;\n    /**\n     * Wrapper for a google.longrunnung.Operation.\n     *\n     * @constructor\n     *\n     * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n     * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n     * operations service client and unpacking mechanisms for the operation.\n     * @param {BackoffSettings} backoffSettings - The backoff settings used in\n     * in polling the operation.\n     * @param {CallOptions} callOptions - CallOptions used in making get operation\n     * requests.\n     */\n    constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n        super();\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.latestResponse = grpcOp;\n        this.name = this.latestResponse.name;\n        this.done = this.latestResponse.done;\n        this.error = this.latestResponse.error;\n        this.longrunningDescriptor = longrunningDescriptor;\n        this.result = null;\n        this.metadata = null;\n        this.backoffSettings = backoffSettings;\n        this._unpackResponse(grpcOp);\n        this._listenForEvents();\n        this._callOptions = callOptions;\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    _listenForEvents() {\n        this.on('newListener', event => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', event => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Cancels current polling api call and cancels the operation.\n     *\n     * @return {Promise} the promise of the OperationsClient#cancelOperation api\n     * request.\n     */\n    cancel() {\n        if (this.currentCallPromise_) {\n            this.currentCallPromise_.cancel();\n        }\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n        cancelRequest.name = this.latestResponse.name;\n        return operationsClient.cancelOperation(cancelRequest);\n    }\n    getOperation(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        function promisifyResponse() {\n            if (!callback) {\n                return new Promise((resolve, reject) => {\n                    if (self.latestResponse.error) {\n                        const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n                        error.code = self.latestResponse.error.code;\n                        reject(error);\n                    }\n                    else {\n                        resolve([self.result, self.metadata, self.latestResponse]);\n                    }\n                });\n            }\n            return;\n        }\n        if (this.latestResponse.done) {\n            this._unpackResponse(this.latestResponse, callback);\n            return promisifyResponse();\n        }\n        const request = new operationProtos.google.longrunning.GetOperationRequest();\n        request.name = this.latestResponse.name;\n        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n        const noCallbackPromise = this.currentCallPromise_.then(responses => {\n            self.latestResponse = responses[0];\n            self._unpackResponse(responses[0], callback);\n            return promisifyResponse();\n        }, (err) => {\n            if (callback) {\n                callback(err);\n                return;\n            }\n            return Promise.reject(err);\n        });\n        if (!callback) {\n            return noCallbackPromise;\n        }\n    }\n    _unpackResponse(op, callback) {\n        const responseDecoder = this.longrunningDescriptor.responseDecoder;\n        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n        let response;\n        let metadata;\n        if (op.done) {\n            if (op.result === 'error') {\n                const error = new googleError_1.GoogleError(op.error.message);\n                error.code = op.error.code;\n                this.error = error;\n                if (callback) {\n                    callback(error);\n                }\n                return;\n            }\n            if (responseDecoder && op.response) {\n                this.response = op.response;\n                response = responseDecoder(op.response.value);\n                this.result = response;\n                this.done = true;\n            }\n        }\n        if (metadataDecoder && op.metadata) {\n            metadata = metadataDecoder(op.metadata.value);\n            this.metadata = metadata;\n        }\n        if (callback) {\n            callback(null, response, metadata, op);\n        }\n    }\n    /**\n     * Poll `getOperation` to check the operation's status. This runs a loop to\n     * ping using the backoff strategy specified at initialization.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    startPolling_() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        let now = new Date();\n        const delayMult = this.backoffSettings.retryDelayMultiplier;\n        const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n        let delay = this.backoffSettings.initialRetryDelayMillis;\n        let deadline = Infinity;\n        if (this.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n        }\n        let previousMetadataBytes;\n        if (this.latestResponse.metadata) {\n            previousMetadataBytes = this.latestResponse.metadata.value;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function emit(event, ...args) {\n            self.emit(event, ...args);\n        }\n        // Helper function to replace nodejs buffer's equals()\n        function arrayEquals(a, b) {\n            if (a.byteLength !== b.byteLength) {\n                return false;\n            }\n            for (let i = 0; i < a.byteLength; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        }\n        function retry() {\n            if (!self.hasActiveListeners) {\n                return;\n            }\n            if (now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                setImmediate(emit, 'error', error);\n                return;\n            }\n            self.getOperation((err, result, metadata, rawResponse) => {\n                if (err) {\n                    setImmediate(emit, 'error', err);\n                    return;\n                }\n                if (!result) {\n                    if (rawResponse.metadata &&\n                        (!previousMetadataBytes ||\n                            (rawResponse &&\n                                !arrayEquals(rawResponse.metadata.value, previousMetadataBytes)))) {\n                        setImmediate(emit, 'progress', metadata, rawResponse);\n                        previousMetadataBytes = rawResponse.metadata.value;\n                    }\n                    // special case: some APIs fail to set either result or error\n                    // but set done = true (e.g. speech with silent file).\n                    // Some APIs just use this for the normal completion\n                    // (e.g. nodejs-contact-center-insights), so let's just return\n                    // an empty response in this case.\n                    if (rawResponse.done) {\n                        setImmediate(emit, 'complete', {}, metadata, rawResponse);\n                        return;\n                    }\n                    setTimeout(() => {\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        retry();\n                    }, delay);\n                    return;\n                }\n                setImmediate(emit, 'complete', result, metadata, rawResponse);\n            });\n        }\n        retry();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {promise} - Promise that resolves on operation completion and rejects\n     * on operation error.\n     */\n    promise() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n                resolve([result, metadata, rawResponse]);\n            });\n        });\n    }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n    return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n//# sourceMappingURL=longrunning.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NormalApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\n/**\n * Creates an API caller for regular unary methods.\n */\nclass NormalApiCaller {\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call(apiCall, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.NormalApiCaller = NormalApiCaller;\n//# sourceMappingURL=normalApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixlQUFlLG1CQUFPLENBQUMsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL25vcm1hbENhbGxzL25vcm1hbEFwaUNhbGxlci5qcz8zZmFlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob3JtYWxBcGlDYWxsZXIgPSB2b2lkIDA7XG5jb25zdCBjYWxsXzEgPSByZXF1aXJlKFwiLi4vY2FsbFwiKTtcbi8qKlxuICogQ3JlYXRlcyBhbiBBUEkgY2FsbGVyIGZvciByZWd1bGFyIHVuYXJ5IG1ldGhvZHMuXG4gKi9cbmNsYXNzIE5vcm1hbEFwaUNhbGxlciB7XG4gICAgaW5pdChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbFByb21pc2UoKTtcbiAgICB9XG4gICAgd3JhcChmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBjYWxsKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncywgY2FuY2VsbGVyKSB7XG4gICAgICAgIGNhbmNlbGxlci5jYWxsKGFwaUNhbGwsIGFyZ3VtZW50KTtcbiAgICB9XG4gICAgZmFpbChjYW5jZWxsZXIsIGVycikge1xuICAgICAgICBjYW5jZWxsZXIuY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgcmVzdWx0KGNhbmNlbGxlcikge1xuICAgICAgICByZXR1cm4gY2FuY2VsbGVyLnByb21pc2U7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3JtYWxBcGlDYWxsZXIgPSBOb3JtYWxBcGlDYWxsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/retries.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryable = retryable;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst timeout_1 = __webpack_require__(/*! ./timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\n/**\n * Creates a function equivalent to func, but that retries on certain\n * exceptions.\n *\n * @private\n *\n * @param {GRPCCall} func - A function.\n * @param {RetryOptions} retry - Configures the exceptions upon which the\n *   function eshould retry, and the parameters to the exponential backoff retry\n *   algorithm.\n * @param {GRPCCallOtherArgs} otherArgs - the additional arguments to be passed to func.\n * @return {SimpleCallbackFunction} A function that will retry.\n */\nfunction retryable(func, retry, otherArgs, apiName) {\n    const delayMult = retry.backoffSettings.retryDelayMultiplier;\n    const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\n    const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\n    const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\n    let delay = retry.backoffSettings.initialRetryDelayMillis;\n    let timeout = retry.backoffSettings.initialRpcTimeoutMillis;\n    /**\n     * Equivalent to ``func``, but retries upon transient failure.\n     *\n     * Retrying is done through an exponential backoff algorithm configured\n     * by the options in ``retry``.\n     * @param {RequestType} argument The request object.\n     * @param {APICallback} callback The callback.\n     * @return {GRPCCall}\n     */\n    return (argument, callback) => {\n        let canceller;\n        let timeoutId;\n        let now = new Date();\n        let deadline;\n        if (retry.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;\n        }\n        let retries = 0;\n        const maxRetries = retry.backoffSettings.maxRetries;\n        // For retries, errorsEncountered maintains a list of errors encountered so\n        // that they can be sent back to the user and the user can see ALL errors\n        // that were encountered during a series of retries.\n        const errorsEncountered = [];\n        // The errors that were encountered should be immediately visible to the\n        // user so we should concatenate them onto the details because details are\n        // immediately visible to the user. This method provideds a string we can\n        // concatenate onto the details.\n        function errorDetailsSuffix(errsEncountered) {\n            if (errsEncountered.length < 2) {\n                // If only one error has been encountered then this information will\n                // already be in the error message so no additional information is\n                // necessary. In this case, don't add anything to the details.\n                return '';\n            }\n            const errorsAsString = errsEncountered\n                .map(err => {\n                const statusDetailsString = err.statusDetails\n                    ? err.statusDetails.toString()\n                    : '';\n                const codeString = err.code && err.code.toString ? err.code.toString() : '';\n                const noteString = err.note && err.note.toString ? err.note.toString() : '';\n                const messageString = err.message && err.message.toString ? err.message.toString() : '';\n                return `{message: ${messageString}, code: ${codeString}, details: ${statusDetailsString}, note: ${noteString}}`;\n            })\n                .join(',');\n            return ` : Previous errors : [${errorsAsString}]`;\n        }\n        // TODO: define A/B testing values for retry behaviors.\n        /** Repeat the API call as long as necessary. */\n        function repeat(err) {\n            if (err) {\n                errorsEncountered.push(err);\n            }\n            timeoutId = null;\n            if (deadline && now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds ${err ? `retrying error ${err} ` : ''} before any response was received.${errorDetailsSuffix(errorsEncountered)}`);\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                callback(error);\n                return;\n            }\n            if (retries && retries >= maxRetries) {\n                const error = new googleError_1.GoogleError('Exceeded maximum number of retries ' +\n                    (err ? `retrying error ${err} ` : '') +\n                    'before any response was received' +\n                    errorDetailsSuffix(errorsEncountered));\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                callback(error);\n                return;\n            }\n            retries++;\n            let lastError = err;\n            const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);\n            canceller = toCall(argument, (err, response, next, rawResponse) => {\n                if (err) {\n                    lastError = err;\n                }\n                if (!err) {\n                    callback(null, response, next, rawResponse);\n                    return;\n                }\n                canceller = null;\n                if (retry.retryCodes.length > 0 &&\n                    retry.retryCodes.indexOf(err.code) < 0) {\n                    err.note =\n                        'Exception occurred in retry method that was ' +\n                            'not classified as transient';\n                    callback(err);\n                }\n                else {\n                    const toSleep = Math.random() * delay;\n                    timeoutId = setTimeout(() => {\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\n                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\n                        const newDeadline = deadline ? deadline - now.getTime() : Infinity;\n                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\n                        repeat(lastError);\n                    }, toSleep);\n                }\n            });\n            if (canceller instanceof Promise) {\n                canceller.catch(err => {\n                    callback(new googleError_1.GoogleError(err));\n                });\n            }\n        }\n        if (maxRetries && deadline) {\n            const error = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +\n                'in backoffSettings.');\n            error.code = status_1.Status.INVALID_ARGUMENT;\n            callback(error);\n        }\n        else {\n            repeat();\n        }\n        return {\n            cancel() {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n                if (canceller) {\n                    canceller.cancel();\n                }\n                else {\n                    const error = new googleError_1.GoogleError('cancelled' + errorDetailsSuffix(errorsEncountered));\n                    error.code = status_1.Status.CANCELLED;\n                    callback(error);\n                }\n            },\n        };\n    };\n}\n//# sourceMappingURL=retries.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/timeout.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addTimeoutArg = addTimeoutArg;\n/**\n * Updates func so that it gets called with the timeout as its final arg.\n *\n * This converts a function, func, into another function with updated deadline.\n *\n * @private\n *\n * @param {GRPCCall} func - a function to be updated.\n * @param {number} timeout - to be added to the original function as it final\n *   positional arg.\n * @param {Object} otherArgs - the additional arguments to be passed to func.\n * @param {Object=} abTests - the A/B testing key/value pairs.\n * @return {function(Object, APICallback)}\n *  the function with other arguments and the timeout.\n */\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\n    // TODO: this assumes the other arguments consist of metadata and options,\n    // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\n    return (argument, callback) => {\n        const now = new Date();\n        const options = otherArgs.options || {};\n        options.deadline = new Date(now.getTime() + timeout);\n        const metadata = otherArgs.metadataBuilder\n            ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {})\n            : null;\n        return func(argument, metadata, options, callback);\n    };\n}\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvdGltZW91dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL25vcm1hbENhbGxzL3RpbWVvdXQuanM/ZGViMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRkVGltZW91dEFyZyA9IGFkZFRpbWVvdXRBcmc7XG4vKipcbiAqIFVwZGF0ZXMgZnVuYyBzbyB0aGF0IGl0IGdldHMgY2FsbGVkIHdpdGggdGhlIHRpbWVvdXQgYXMgaXRzIGZpbmFsIGFyZy5cbiAqXG4gKiBUaGlzIGNvbnZlcnRzIGEgZnVuY3Rpb24sIGZ1bmMsIGludG8gYW5vdGhlciBmdW5jdGlvbiB3aXRoIHVwZGF0ZWQgZGVhZGxpbmUuXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge0dSUENDYWxsfSBmdW5jIC0gYSBmdW5jdGlvbiB0byBiZSB1cGRhdGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgLSB0byBiZSBhZGRlZCB0byB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYXMgaXQgZmluYWxcbiAqICAgcG9zaXRpb25hbCBhcmcuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXJBcmdzIC0gdGhlIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBmdW5jLlxuICogQHBhcmFtIHtPYmplY3Q9fSBhYlRlc3RzIC0gdGhlIEEvQiB0ZXN0aW5nIGtleS92YWx1ZSBwYWlycy5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKE9iamVjdCwgQVBJQ2FsbGJhY2spfVxuICogIHRoZSBmdW5jdGlvbiB3aXRoIG90aGVyIGFyZ3VtZW50cyBhbmQgdGhlIHRpbWVvdXQuXG4gKi9cbmZ1bmN0aW9uIGFkZFRpbWVvdXRBcmcoZnVuYywgdGltZW91dCwgb3RoZXJBcmdzLCBhYlRlc3RzKSB7XG4gICAgLy8gVE9ETzogdGhpcyBhc3N1bWVzIHRoZSBvdGhlciBhcmd1bWVudHMgY29uc2lzdCBvZiBtZXRhZGF0YSBhbmQgb3B0aW9ucyxcbiAgICAvLyB3aGljaCBpcyBzcGVjaWZpYyB0byBnUlBDIGNhbGxzLiBSZW1vdmUgdGhlIGhpZGRlbiBkZXBlbmRlbmN5IG9uIGdSUEMuXG4gICAgcmV0dXJuIChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG90aGVyQXJncy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmRlYWRsaW5lID0gbmV3IERhdGUobm93LmdldFRpbWUoKSArIHRpbWVvdXQpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG90aGVyQXJncy5tZXRhZGF0YUJ1aWxkZXJcbiAgICAgICAgICAgID8gb3RoZXJBcmdzLm1ldGFkYXRhQnVpbGRlcihhYlRlc3RzLCBvdGhlckFyZ3MuaGVhZGVycyB8fCB7fSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIGZ1bmMoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operationsClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operationsClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst configData = __webpack_require__(/*! ./operations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/operations_client_config.json\");\nconst operationProtoJson = __webpack_require__(/*! ../protos/operations.json */ \"(rsc)/./node_modules/google-gax/build/protos/operations.json\");\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n    auth;\n    innerApiCalls;\n    descriptor;\n    operationsStub;\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    operationsProtos, options) {\n        const opts = Object.assign({\n            servicePath: exports.SERVICE_ADDRESS,\n            port: DEFAULT_SERVICE_PORT,\n            clientConfig: {},\n        }, options);\n        const googleApiClient = ['gl-node/' + process.versions.node];\n        if (opts.libName && opts.libVersion) {\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\n        }\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n        if (opts.fallback) {\n            googleApiClient.push('gl-web/' + version);\n        }\n        else {\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n        }\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\n        this.auth = gaxGrpc.auth;\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        this.descriptor = {\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\n        };\n        // Put together the \"service stub\" for\n        // google.longrunning.Operations.\n        this.operationsStub = gaxGrpc.createStub(opts.fallback\n            ? operationsProtos.lookupService('google.longrunning.Operations')\n            : operationsProtos.google.longrunning.Operations, opts);\n        const operationsStubMethods = [\n            'getOperation',\n            'listOperations',\n            'cancelOperation',\n            'deleteOperation',\n        ];\n        for (const methodName of operationsStubMethods) {\n            const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, err => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n        }\n    }\n    /** Closes this operations client. */\n    close() {\n        this.operationsStub.then(stub => stub.close()).catch(console.error);\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    // Service calls\n    getOperationInternal(request, options, callback) {\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n    getOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n    listOperations(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n    listOperationsStream(request, options) {\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listOperationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n    cancelOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n    deleteOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n    operationsClient;\n    /**\n     * Builds a new Operations Client\n     * @param gaxGrpc {GrpcClient}\n     */\n    constructor(gaxGrpc, protoJson) {\n        if (protoJson && gaxGrpc.httpRules) {\n            // overwrite the http rules if provide in service yaml.\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n        }\n        const operationsProtos = protoJson ?? gaxGrpc.loadProtoJSON(operationProtoJson);\n        /**\n         * Build a new instance of {@link OperationsClient}.\n         *\n         * @param {Object=} opts - The optional parameters.\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\n         * @param {number=} opts.port - The port on which to connect to the remote host.\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n         */\n        this.operationsClient = opts => {\n            if (gaxGrpc.fallback) {\n                opts.fallback = gaxGrpc.fallback;\n            }\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\n        };\n        Object.assign(this.operationsClient, OperationsClient);\n    }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;\n//# sourceMappingURL=operationsClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/operationsClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageDescriptor = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nconst warnings_1 = __webpack_require__(/*! .././warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst pagedApiCaller_1 = __webpack_require__(/*! ./pagedApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\");\nconst maxAttemptsEmptyResponse = 10;\n/**\n * A descriptor for methods that support pagination.\n */\nclass PageDescriptor {\n    requestPageTokenField;\n    responsePageTokenField;\n    requestPageSizeField;\n    resourceField;\n    constructor(requestPageTokenField, responsePageTokenField, resourceField) {\n        this.requestPageTokenField = requestPageTokenField;\n        this.responsePageTokenField = responsePageTokenField;\n        this.resourceField = resourceField;\n    }\n    /**\n     * Creates a new object Stream which emits the resource on 'data' event.\n     */\n    createStream(apiCall, request, options) {\n        if (options?.autoPaginate) {\n            (0, warnings_1.warn)('autoPaginate true', 'Autopaginate will always be set to false in stream paging methods. See more info at https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure paging calls', 'AutopaginateTrueWarning');\n        }\n        const stream = new stream_1.PassThrough({ objectMode: true });\n        options = Object.assign({}, options, { autoPaginate: false });\n        const maxResults = 'maxResults' in options ? options.maxResults : -1;\n        let pushCount = 0;\n        let started = false;\n        function callback(err, resources, next, apiResp) {\n            if (err) {\n                stream.emit('error', err);\n                return;\n            }\n            // emit full api response with every page.\n            stream.emit('response', apiResp);\n            for (let i = 0; i < resources.length; ++i) {\n                // TODO: rewrite without accessing stream internals\n                if (stream\n                    ._readableState.ended) {\n                    return;\n                }\n                if (resources[i] === null) {\n                    continue;\n                }\n                stream.push(resources[i]);\n                pushCount++;\n                if (pushCount === maxResults) {\n                    stream.end();\n                }\n            }\n            // TODO: rewrite without accessing stream internals\n            if (stream._readableState\n                .ended) {\n                return;\n            }\n            if (!next) {\n                stream.end();\n                return;\n            }\n            // When pageToken is specified in the original options, it will overwrite\n            // the page token field in the next request. Therefore it must be cleared.\n            if ('pageToken' in options) {\n                delete options.pageToken;\n            }\n            if (stream.isPaused()) {\n                request = next;\n                started = false;\n            }\n            else {\n                setImmediate(apiCall, next, options, callback);\n            }\n        }\n        stream.on('resume', async () => {\n            if (!started) {\n                started = true;\n                await apiCall(request, options, callback);\n            }\n        });\n        return stream;\n    }\n    /**\n     * Create an async iterable which can be recursively called for data on-demand.\n     */\n    asyncIterate(apiCall, request, options) {\n        if (options?.autoPaginate) {\n            (0, warnings_1.warn)('autoPaginate true', 'Autopaginate will always be set to false in Async paging methods. See more info at https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure paging calls', 'AutopaginateTrueWarning');\n        }\n        options = Object.assign({}, options, { autoPaginate: false });\n        const iterable = this.createIterator(apiCall, request, options);\n        return iterable;\n    }\n    createIterator(apiCall, request, options) {\n        const asyncIterable = {\n            [Symbol.asyncIterator]() {\n                let nextPageRequest = request;\n                const cache = [];\n                return {\n                    async next() {\n                        if (cache.length > 0) {\n                            return Promise.resolve({\n                                done: false,\n                                value: cache.shift(),\n                            });\n                        }\n                        let attempts = 0;\n                        while (cache.length === 0 && nextPageRequest) {\n                            let result;\n                            [result, nextPageRequest] = (await apiCall(nextPageRequest, options));\n                            // For pagination response with protobuf map type, use tuple as representation.\n                            if (result && !Array.isArray(result)) {\n                                for (const [key, value] of Object.entries(result)) {\n                                    cache.push([key, value]);\n                                }\n                            }\n                            else {\n                                cache.push(...result);\n                            }\n                            if (cache.length === 0) {\n                                ++attempts;\n                                if (attempts > maxAttemptsEmptyResponse) {\n                                    break;\n                                }\n                            }\n                        }\n                        if (cache.length === 0) {\n                            return Promise.resolve({ done: true, value: undefined });\n                        }\n                        return Promise.resolve({ done: false, value: cache.shift() });\n                    },\n                };\n            },\n        };\n        return asyncIterable;\n    }\n    getApiCaller(settings) {\n        if (!settings.autoPaginate) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n}\nexports.PageDescriptor = PageDescriptor;\n//# sourceMappingURL=pageDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3BhZ2VEZXNjcmlwdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQywwQkFBMEIsbUJBQU8sQ0FBQyxnSEFBZ0M7QUFDbEUsbUJBQW1CLG1CQUFPLENBQUMsNEVBQWU7QUFDMUMseUJBQXlCLG1CQUFPLENBQUMscUdBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxrQkFBa0I7QUFDcEUsa0NBQWtDLGFBQWEscUJBQXFCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxhQUFhLHFCQUFxQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELDhCQUE4QjtBQUNuRjtBQUNBLGlEQUFpRCxtQ0FBbUM7QUFDcEYscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhbmlzaC1sYW5ndWFnZS1sZWFybmluZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3BhZ2VEZXNjcmlwdG9yLmpzPzA5ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhZ2VEZXNjcmlwdG9yID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3Qgbm9ybWFsQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi4vbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyXCIpO1xuY29uc3Qgd2FybmluZ3NfMSA9IHJlcXVpcmUoXCIuLi8uL3dhcm5pbmdzXCIpO1xuY29uc3QgcGFnZWRBcGlDYWxsZXJfMSA9IHJlcXVpcmUoXCIuL3BhZ2VkQXBpQ2FsbGVyXCIpO1xuY29uc3QgbWF4QXR0ZW1wdHNFbXB0eVJlc3BvbnNlID0gMTA7XG4vKipcbiAqIEEgZGVzY3JpcHRvciBmb3IgbWV0aG9kcyB0aGF0IHN1cHBvcnQgcGFnaW5hdGlvbi5cbiAqL1xuY2xhc3MgUGFnZURlc2NyaXB0b3Ige1xuICAgIHJlcXVlc3RQYWdlVG9rZW5GaWVsZDtcbiAgICByZXNwb25zZVBhZ2VUb2tlbkZpZWxkO1xuICAgIHJlcXVlc3RQYWdlU2l6ZUZpZWxkO1xuICAgIHJlc291cmNlRmllbGQ7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdFBhZ2VUb2tlbkZpZWxkLCByZXNwb25zZVBhZ2VUb2tlbkZpZWxkLCByZXNvdXJjZUZpZWxkKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdFBhZ2VUb2tlbkZpZWxkID0gcmVxdWVzdFBhZ2VUb2tlbkZpZWxkO1xuICAgICAgICB0aGlzLnJlc3BvbnNlUGFnZVRva2VuRmllbGQgPSByZXNwb25zZVBhZ2VUb2tlbkZpZWxkO1xuICAgICAgICB0aGlzLnJlc291cmNlRmllbGQgPSByZXNvdXJjZUZpZWxkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCBTdHJlYW0gd2hpY2ggZW1pdHMgdGhlIHJlc291cmNlIG9uICdkYXRhJyBldmVudC5cbiAgICAgKi9cbiAgICBjcmVhdGVTdHJlYW0oYXBpQ2FsbCwgcmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucz8uYXV0b1BhZ2luYXRlKSB7XG4gICAgICAgICAgICAoMCwgd2FybmluZ3NfMS53YXJuKSgnYXV0b1BhZ2luYXRlIHRydWUnLCAnQXV0b3BhZ2luYXRlIHdpbGwgYWx3YXlzIGJlIHNldCB0byBmYWxzZSBpbiBzdHJlYW0gcGFnaW5nIG1ldGhvZHMuIFNlZSBtb3JlIGluZm8gYXQgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvZ2F4LW5vZGVqcy9ibG9iL21haW4vY2xpZW50LWxpYnJhcmllcy5tZCNhdXRvLXBhZ2luYXRpb24gZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIGNvbmZpZ3VyZSBwYWdpbmcgY2FsbHMnLCAnQXV0b3BhZ2luYXRlVHJ1ZVdhcm5pbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJlYW0gPSBuZXcgc3RyZWFtXzEuUGFzc1Rocm91Z2goeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBhdXRvUGFnaW5hdGU6IGZhbHNlIH0pO1xuICAgICAgICBjb25zdCBtYXhSZXN1bHRzID0gJ21heFJlc3VsdHMnIGluIG9wdGlvbnMgPyBvcHRpb25zLm1heFJlc3VsdHMgOiAtMTtcbiAgICAgICAgbGV0IHB1c2hDb3VudCA9IDA7XG4gICAgICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzb3VyY2VzLCBuZXh0LCBhcGlSZXNwKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbWl0IGZ1bGwgYXBpIHJlc3BvbnNlIHdpdGggZXZlcnkgcGFnZS5cbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdyZXNwb25zZScsIGFwaVJlc3ApO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiByZXdyaXRlIHdpdGhvdXQgYWNjZXNzaW5nIHN0cmVhbSBpbnRlcm5hbHNcbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtXG4gICAgICAgICAgICAgICAgICAgIC5fcmVhZGFibGVTdGF0ZS5lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbaV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmVhbS5wdXNoKHJlc291cmNlc1tpXSk7XG4gICAgICAgICAgICAgICAgcHVzaENvdW50Kys7XG4gICAgICAgICAgICAgICAgaWYgKHB1c2hDb3VudCA9PT0gbWF4UmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogcmV3cml0ZSB3aXRob3V0IGFjY2Vzc2luZyBzdHJlYW0gaW50ZXJuYWxzXG4gICAgICAgICAgICBpZiAoc3RyZWFtLl9yZWFkYWJsZVN0YXRlXG4gICAgICAgICAgICAgICAgLmVuZGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmVuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdoZW4gcGFnZVRva2VuIGlzIHNwZWNpZmllZCBpbiB0aGUgb3JpZ2luYWwgb3B0aW9ucywgaXQgd2lsbCBvdmVyd3JpdGVcbiAgICAgICAgICAgIC8vIHRoZSBwYWdlIHRva2VuIGZpZWxkIGluIHRoZSBuZXh0IHJlcXVlc3QuIFRoZXJlZm9yZSBpdCBtdXN0IGJlIGNsZWFyZWQuXG4gICAgICAgICAgICBpZiAoJ3BhZ2VUb2tlbicgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLnBhZ2VUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0uaXNQYXVzZWQoKSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBuZXh0O1xuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShhcGlDYWxsLCBuZXh0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLm9uKCdyZXN1bWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhd2FpdCBhcGlDYWxsKHJlcXVlc3QsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBhc3luYyBpdGVyYWJsZSB3aGljaCBjYW4gYmUgcmVjdXJzaXZlbHkgY2FsbGVkIGZvciBkYXRhIG9uLWRlbWFuZC5cbiAgICAgKi9cbiAgICBhc3luY0l0ZXJhdGUoYXBpQ2FsbCwgcmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucz8uYXV0b1BhZ2luYXRlKSB7XG4gICAgICAgICAgICAoMCwgd2FybmluZ3NfMS53YXJuKSgnYXV0b1BhZ2luYXRlIHRydWUnLCAnQXV0b3BhZ2luYXRlIHdpbGwgYWx3YXlzIGJlIHNldCB0byBmYWxzZSBpbiBBc3luYyBwYWdpbmcgbWV0aG9kcy4gU2VlIG1vcmUgaW5mbyBhdCBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlYXBpcy9nYXgtbm9kZWpzL2Jsb2IvbWFpbi9jbGllbnQtbGlicmFyaWVzLm1kI2F1dG8tcGFnaW5hdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gY29uZmlndXJlIHBhZ2luZyBjYWxscycsICdBdXRvcGFnaW5hdGVUcnVlV2FybmluZycpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGF1dG9QYWdpbmF0ZTogZmFsc2UgfSk7XG4gICAgICAgIGNvbnN0IGl0ZXJhYmxlID0gdGhpcy5jcmVhdGVJdGVyYXRvcihhcGlDYWxsLCByZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cbiAgICBjcmVhdGVJdGVyYXRvcihhcGlDYWxsLCByZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFzeW5jSXRlcmFibGUgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0UGFnZVJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2FjaGUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRlbXB0cyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2FjaGUubGVuZ3RoID09PSAwICYmIG5leHRQYWdlUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3Jlc3VsdCwgbmV4dFBhZ2VSZXF1ZXN0XSA9IChhd2FpdCBhcGlDYWxsKG5leHRQYWdlUmVxdWVzdCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBwYWdpbmF0aW9uIHJlc3BvbnNlIHdpdGggcHJvdG9idWYgbWFwIHR5cGUsIHVzZSB0dXBsZSBhcyByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmICFBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5wdXNoKC4uLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKythdHRlbXB0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGVtcHRzID4gbWF4QXR0ZW1wdHNFbXB0eVJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBkb25lOiBmYWxzZSwgdmFsdWU6IGNhY2hlLnNoaWZ0KCkgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhc3luY0l0ZXJhYmxlO1xuICAgIH1cbiAgICBnZXRBcGlDYWxsZXIoc2V0dGluZ3MpIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5hdXRvUGFnaW5hdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbm9ybWFsQXBpQ2FsbGVyXzEuTm9ybWFsQXBpQ2FsbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBwYWdlZEFwaUNhbGxlcl8xLlBhZ2VkQXBpQ2FsbGVyKHRoaXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFnZURlc2NyaXB0b3IgPSBQYWdlRGVzY3JpcHRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VEZXNjcmlwdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PagedApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst resourceCollector_1 = __webpack_require__(/*! ./resourceCollector */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\");\nconst warnings_1 = __webpack_require__(/*! .././warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nclass PagedApiCaller {\n    pageDescriptor;\n    /**\n     * Creates an API caller that returns a stream to performs page-streaming.\n     *\n     * @private\n     * @constructor\n     * @param {PageDescriptor} pageDescriptor - indicates the structure\n     *   of page streaming to be performed.\n     */\n    constructor(pageDescriptor) {\n        this.pageDescriptor = pageDescriptor;\n    }\n    /**\n     * This function translates between regular gRPC calls (that accepts a request and returns a response,\n     * and does not know anything about pages and page tokens) and the users' callback (that expects\n     * to see resources from one page, a request to get the next page, and the raw response from the server).\n     *\n     * It generates a function that can be passed as a callback function to a gRPC call, will understand\n     * pagination-specific fields in the response, and call the users' callback after having those fields\n     * parsed.\n     *\n     * @param request Request object. It needs to be passed to all subsequent next page requests\n     * (the main content of the request object stays unchanged, only the next page token changes)\n     * @param callback The user's callback that expects the page content, next page request, and raw response.\n     */\n    generateParseResponseCallback(request, callback) {\n        const resourceFieldName = this.pageDescriptor.resourceField;\n        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;\n        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;\n        return (err, response) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            if (!request) {\n                callback(new googleError_1.GoogleError('Undefined request in pagination method callback.'));\n                return;\n            }\n            if (!response) {\n                callback(new googleError_1.GoogleError('Undefined response in pagination method callback.'));\n                return;\n            }\n            const resources = response[resourceFieldName] || [];\n            const pageToken = response[responsePageTokenFieldName];\n            let nextPageRequest = null;\n            if (pageToken) {\n                nextPageRequest = Object.assign({}, request);\n                nextPageRequest[requestPageTokenFieldName] = pageToken;\n            }\n            callback(err, resources, nextPageRequest, response);\n        };\n    }\n    /**\n     * Adds a special ability to understand pagination-specific fields to the existing gRPC call.\n     * The original gRPC call just calls callback(err, result).\n     * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.\n     *\n     * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:\n     * request, metadata, call options, and callback.\n     */\n    wrap(func) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        return function wrappedCall(argument, metadata, options, callback) {\n            return func(argument, metadata, options, self.generateParseResponseCallback(argument, callback));\n        };\n    }\n    /**\n     * Makes it possible to use both callback-based and promise-based calls.\n     * Returns an OngoingCall or OngoingCallPromise object.\n     * Regardless of which one is returned, it always has a `.callback` to call.\n     *\n     * @param settings Call settings. Can only be used to replace Promise with another promise implementation.\n     * @param [callback] Callback to be called, if any.\n     */\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    /**\n     * Implements auto-pagination logic.\n     *\n     * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.\n     * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it\n     * accept just two parameters: (request, callback).\n     * @param request A request object that came from the user.\n     * @param settings Call settings. We are interested in `maxResults` and `autoPaginate` (they are optional).\n     * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,\n     * and is used to return results to the user.\n     */\n    call(apiCall, request, settings, ongoingCall) {\n        request = Object.assign({}, request);\n        if (!settings.autoPaginate) {\n            // they don't want auto-pagination this time - okay, just call once\n            ongoingCall.call(apiCall, request);\n            return;\n        }\n        if (request.pageSize && settings.autoPaginate) {\n            (0, warnings_1.warn)('autoPaginate true', 'Providing a pageSize without setting autoPaginate to false will still return all results. See https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure manual paging', 'AutopaginateTrueWarning');\n        }\n        const maxResults = settings.maxResults || -1;\n        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);\n        resourceCollector.processAllPages(request).then(resources => ongoingCall.callback(null, resources), err => ongoingCall.callback(err));\n    }\n    fail(ongoingCall, err) {\n        ongoingCall.callback(err);\n    }\n    result(ongoingCall) {\n        return ongoingCall.promise;\n    }\n}\nexports.PagedApiCaller = PagedApiCaller;\n//# sourceMappingURL=pagedApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceCollector = void 0;\n/**\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\n * page by page, collecting all resources (up to `maxResults`) in the array.\n *\n * Usage:\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\n *   resourceCollector.processAllPages(request).then(resources => ...);\n */\nclass ResourceCollector {\n    apiCall;\n    resources;\n    maxResults;\n    resolveCallback;\n    rejectCallback;\n    constructor(apiCall, maxResults = -1) {\n        this.apiCall = apiCall;\n        this.resources = [];\n        this.maxResults = maxResults;\n    }\n    callback(err, resources, nextPageRequest) {\n        if (err) {\n            // Something went wrong with this request - failing everything\n            this.rejectCallback(err);\n            return;\n        }\n        // Process one page\n        for (const resource of resources) {\n            this.resources.push(resource);\n            if (this.resources.length === this.maxResults) {\n                nextPageRequest = null;\n                break;\n            }\n        }\n        // All done?\n        if (!nextPageRequest) {\n            this.resolveCallback(this.resources);\n            return;\n        }\n        // Schedule the next call\n        const callback = (...args) => this.callback(...args);\n        setImmediate(this.apiCall, nextPageRequest, callback);\n    }\n    processAllPages(firstRequest) {\n        return new Promise((resolve, reject) => {\n            this.resolveCallback = resolve;\n            this.rejectCallback = reject;\n            // Schedule the first call\n            const callback = (...args) => this.callback(...args);\n            setImmediate(this.apiCall, firstRequest, callback);\n        });\n    }\n}\nexports.ResourceCollector = ResourceCollector;\n//# sourceMappingURL=resourceCollector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3Jlc291cmNlQ29sbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFuaXNoLWxhbmd1YWdlLWxlYXJuaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9wYWdpbmF0aW9uQ2FsbHMvcmVzb3VyY2VDb2xsZWN0b3IuanM/MWMyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVzb3VyY2VDb2xsZWN0b3IgPSB2b2lkIDA7XG4vKipcbiAqIFJlc291cmNlQ29sbGVjdG9yIGNsYXNzIGltcGxlbWVudHMgYXN5bmNocm9ub3VzIGxvZ2ljIG9mIGNhbGxpbmcgdGhlIEFQSSBjYWxsIHRoYXQgc3VwcG9ydHMgcGFnaW5hdGlvbixcbiAqIHBhZ2UgYnkgcGFnZSwgY29sbGVjdGluZyBhbGwgcmVzb3VyY2VzICh1cCB0byBgbWF4UmVzdWx0c2ApIGluIHRoZSBhcnJheS5cbiAqXG4gKiBVc2FnZTpcbiAqICAgY29uc3QgcmVzb3VyY2VDb2xsZWN0b3IgPSBuZXcgUmVzb3VyY2VDb2xsZWN0b3IoYXBpQ2FsbCwgbWF4UmVzdWx0cyk7IC8vIC0xIGZvciB1bmxpbWl0ZWRcbiAqICAgcmVzb3VyY2VDb2xsZWN0b3IucHJvY2Vzc0FsbFBhZ2VzKHJlcXVlc3QpLnRoZW4ocmVzb3VyY2VzID0+IC4uLik7XG4gKi9cbmNsYXNzIFJlc291cmNlQ29sbGVjdG9yIHtcbiAgICBhcGlDYWxsO1xuICAgIHJlc291cmNlcztcbiAgICBtYXhSZXN1bHRzO1xuICAgIHJlc29sdmVDYWxsYmFjaztcbiAgICByZWplY3RDYWxsYmFjaztcbiAgICBjb25zdHJ1Y3RvcihhcGlDYWxsLCBtYXhSZXN1bHRzID0gLTEpIHtcbiAgICAgICAgdGhpcy5hcGlDYWxsID0gYXBpQ2FsbDtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSBbXTtcbiAgICAgICAgdGhpcy5tYXhSZXN1bHRzID0gbWF4UmVzdWx0cztcbiAgICB9XG4gICAgY2FsbGJhY2soZXJyLCByZXNvdXJjZXMsIG5leHRQYWdlUmVxdWVzdCkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoaXMgcmVxdWVzdCAtIGZhaWxpbmcgZXZlcnl0aGluZ1xuICAgICAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByb2Nlc3Mgb25lIHBhZ2VcbiAgICAgICAgZm9yIChjb25zdCByZXNvdXJjZSBvZiByZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2gocmVzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzb3VyY2VzLmxlbmd0aCA9PT0gdGhpcy5tYXhSZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgbmV4dFBhZ2VSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBbGwgZG9uZT9cbiAgICAgICAgaWYgKCFuZXh0UGFnZVJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUNhbGxiYWNrKHRoaXMucmVzb3VyY2VzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTY2hlZHVsZSB0aGUgbmV4dCBjYWxsXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKC4uLmFyZ3MpID0+IHRoaXMuY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgIHNldEltbWVkaWF0ZSh0aGlzLmFwaUNhbGwsIG5leHRQYWdlUmVxdWVzdCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBwcm9jZXNzQWxsUGFnZXMoZmlyc3RSZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVDYWxsYmFjayA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdENhbGxiYWNrID0gcmVqZWN0O1xuICAgICAgICAgICAgLy8gU2NoZWR1bGUgdGhlIGZpcnN0IGNhbGxcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKC4uLmFyZ3MpID0+IHRoaXMuY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5hcGlDYWxsLCBmaXJzdFJlcXVlc3QsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXNvdXJjZUNvbGxlY3RvciA9IFJlc291cmNlQ29sbGVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb3VyY2VDb2xsZWN0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/pathTemplate.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/pathTemplate.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PathTemplate = void 0;\nclass PathTemplate {\n    data;\n    bindings = {};\n    segments;\n    size;\n    /**\n     * @param {String} data the of the template\n     *\n     * @constructor\n     */\n    constructor(data) {\n        this.data = data;\n        this.segments = this.parsePathTemplate(data);\n        this.size = this.segments.length;\n    }\n    /**\n     * Matches a fully-qualified path template string.\n     *\n     * @param {String} path a fully-qualified path template string\n     * @return {Object} contains const names matched to binding values\n     * @throws {TypeError} if path can't be matched to this template\n     */\n    match(path) {\n        let pathSegments = path.split('/');\n        const bindings = {};\n        if (pathSegments.length !== this.segments.length) {\n            // if the path contains a wildcard, then the length may differ by 1.\n            if (!this.data.includes('**')) {\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);\n            }\n            else if (pathSegments.length !== this.segments.length + 1) {\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);\n            }\n        }\n        for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {\n            if (this.segments[index] !== pathSegments[0]) {\n                if (!this.segments[index].includes('*')) {\n                    throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);\n                }\n                else {\n                    let segment = this.segments[index];\n                    const matches = segment.match(/\\{[$0-9a-zA-Z_]+=.*?\\}/g);\n                    if (!matches) {\n                        throw new Error(`Error processing path template segment ${segment}`);\n                    }\n                    const variables = matches.map(str => str.replace(/^\\{/, '').replace(/=.*/, ''));\n                    if (segment.includes('**')) {\n                        bindings[variables[0]] = pathSegments[0] + '/' + pathSegments[1];\n                        pathSegments = pathSegments.slice(2);\n                    }\n                    else {\n                        // atomic resource\n                        if (variables.length === 1) {\n                            bindings[variables[0]] = pathSegments[0];\n                        }\n                        else {\n                            // non-slash resource\n                            // segment: {blurb_id=*}.{legacy_user=*} to match pathSegments: ['bar.user2']\n                            // split the match pathSegments[0] -> value: ['bar', 'user2']\n                            // compare the length of two arrays, and compare array items\n                            const value = pathSegments[0].split(/[-_.~]/);\n                            if (value.length !== variables.length) {\n                                throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);\n                            }\n                            for (const v of variables) {\n                                bindings[v] = value[0];\n                                segment = segment.replace(`{${v}=*}`, `${value[0]}`);\n                                value.shift();\n                            }\n                            // segment: {blurb_id=*}.{legacy_user=*} matching pathSegments: ['bar~user2'] should fail\n                            if (segment !== pathSegments[0]) {\n                                throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);\n                            }\n                        }\n                        pathSegments.shift();\n                    }\n                }\n            }\n            else {\n                pathSegments.shift();\n            }\n        }\n        return bindings;\n    }\n    /**\n     * Renders a path template using the provided bindings.\n     *\n     * @param {Object} bindings a mapping of const names to binding strings\n     * @return {String} a rendered representation of the path template\n     * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n     *   parsed\n     */\n    render(bindings) {\n        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {\n            throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);\n        }\n        let path = this.inspect();\n        for (const key of Object.keys(bindings)) {\n            const b = bindings[key].toString();\n            if (!this.bindings[key]) {\n                throw new TypeError(`render fails for not matching ${bindings[key]}`);\n            }\n            const variable = this.bindings[key];\n            if (variable === '*') {\n                if (!b.match(/[^/{}]+/)) {\n                    throw new TypeError(`render fails for not matching ${b}`);\n                }\n                path = path.replace(`{${key}=*}`, `${b}`);\n            }\n            else if (variable === '**') {\n                if (!b.match(/[^{}]+/)) {\n                    throw new TypeError(`render fails for not matching ${b}`);\n                }\n                path = path.replace(`{${key}=**}`, `${b}`);\n            }\n        }\n        return path;\n    }\n    /**\n     * Renders the path template.\n     *\n     * @return {string} contains const names matched to binding values\n     */\n    inspect() {\n        return this.segments.join('/');\n    }\n    /**\n     * Parse the path template.\n     *\n     * @return {string[]} return segments of the input path.\n     * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]\n     */\n    parsePathTemplate(data) {\n        const pathSegments = splitPathTemplate(data);\n        let index = 0;\n        let wildCardCount = 0;\n        const segments = [];\n        let matches;\n        pathSegments.forEach(segment => {\n            // * or ** -> segments.push('{$0=*}');\n            //         -> bindings['$0'] = '*'\n            if (segment === '*' || segment === '**') {\n                this.bindings[`$${index}`] = segment;\n                segments.push(`{$${index}=${segment}}`);\n                index = index + 1;\n                if (segment === '**') {\n                    ++wildCardCount;\n                }\n            }\n            else if ((matches = segment.match(/\\{[0-9a-zA-Z-.~_]+(?:=.*?)?\\}/g))) {\n                for (const subsegment of matches) {\n                    const pairMatch = subsegment.match(/^\\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\\}$/);\n                    if (!pairMatch) {\n                        throw new Error(`Cannot process path template segment ${subsegment}`);\n                    }\n                    const key = pairMatch[1];\n                    let value = pairMatch[2];\n                    if (!value) {\n                        value = '*';\n                        segment = segment.replace(key, key + '=*');\n                        this.bindings[key] = value;\n                    }\n                    else if (value === '*') {\n                        this.bindings[key] = value;\n                    }\n                    else if (value === '**') {\n                        ++wildCardCount;\n                        this.bindings[key] = value;\n                    }\n                }\n                segments.push(segment);\n            }\n            else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {\n                segments.push(segment);\n            }\n        });\n        if (wildCardCount > 1) {\n            throw new TypeError('Can not have more than one wildcard.');\n        }\n        return segments;\n    }\n}\nexports.PathTemplate = PathTemplate;\n/**\n * Split the path template by `/`.\n * It can not be simply splitted by `/` because there might be `/` in the segments.\n * For example: 'a/b/{a=hello/world}' we do not want to break the brackets pair\n * so above path will be splitted as ['a', 'b', '{a=hello/world}']\n */\nfunction splitPathTemplate(data) {\n    let left = 0;\n    let right = 0;\n    let bracketCount = 0;\n    const segments = [];\n    while (right >= left && right < data.length) {\n        if (data.charAt(right) === '{') {\n            bracketCount = bracketCount + 1;\n        }\n        else if (data.charAt(right) === '}') {\n            bracketCount = bracketCount - 1;\n        }\n        else if (data.charAt(right) === '/') {\n            if (right === data.length - 1) {\n                throw new TypeError('Invalid path, it can not be ended by /');\n            }\n            if (bracketCount === 0) {\n                // complete bracket, to avoid the case a/b/**/*/{a=hello/world}\n                segments.push(data.substring(left, right));\n                left = right + 1;\n            }\n        }\n        if (right === data.length - 1) {\n            if (bracketCount !== 0) {\n                throw new TypeError('Brackets are invalid.');\n            }\n            segments.push(data.substring(left));\n        }\n        right = right + 1;\n    }\n    return segments;\n}\n//# sourceMappingURL=pathTemplate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/routingHeader.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/routingHeader.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromParams = fromParams;\nconst querystring = __importStar(__webpack_require__(/*! querystring */ \"querystring\"));\n/**\n * Helpers for constructing routing headers.\n *\n * These headers are used by Google infrastructure to determine how to route\n * requests, especially for services that are regional.\n *\n * Generally, these headers are specified as gRPC metadata.\n */\n/**\n * Constructs the routing header from the given params\n *\n * @param {Object} params - the request header parameters.\n * @return {string} the routing header value.\n */\nfunction fromParams(params) {\n    return querystring.stringify(params);\n}\n//# sourceMappingURL=routingHeader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcm91dGluZ0hlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsaUNBQWlDLG1CQUFPLENBQUMsZ0NBQWE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3JvdXRpbmdIZWFkZXIuanM/YjJmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tUGFyYW1zID0gZnJvbVBhcmFtcztcbmNvbnN0IHF1ZXJ5c3RyaW5nID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKSk7XG4vKipcbiAqIEhlbHBlcnMgZm9yIGNvbnN0cnVjdGluZyByb3V0aW5nIGhlYWRlcnMuXG4gKlxuICogVGhlc2UgaGVhZGVycyBhcmUgdXNlZCBieSBHb29nbGUgaW5mcmFzdHJ1Y3R1cmUgdG8gZGV0ZXJtaW5lIGhvdyB0byByb3V0ZVxuICogcmVxdWVzdHMsIGVzcGVjaWFsbHkgZm9yIHNlcnZpY2VzIHRoYXQgYXJlIHJlZ2lvbmFsLlxuICpcbiAqIEdlbmVyYWxseSwgdGhlc2UgaGVhZGVycyBhcmUgc3BlY2lmaWVkIGFzIGdSUEMgbWV0YWRhdGEuXG4gKi9cbi8qKlxuICogQ29uc3RydWN0cyB0aGUgcm91dGluZyBoZWFkZXIgZnJvbSB0aGUgZ2l2ZW4gcGFyYW1zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIHRoZSByZXF1ZXN0IGhlYWRlciBwYXJhbWV0ZXJzLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcm91dGluZyBoZWFkZXIgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGZyb21QYXJhbXMocGFyYW1zKSB7XG4gICAgcmV0dXJuIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGluZ0hlYWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/routingHeader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/status.js":
/*!*****************************************************!*\
  !*** ./node_modules/google-gax/build/src/status.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpCodeToRpcCodeMap = exports.Status = void 0;\nexports.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;\n// The following is a copy of the Status enum defined in @grpc/grpc-js,\n// src/constants.ts. We need to use some of these statuses here and there,\n// but we don't want to include the whole @grpc/grpc-js into the browser\n// bundle just to have this small enum.\nvar Status;\n(function (Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status || (exports.Status = Status = {}));\nexports.HttpCodeToRpcCodeMap = new Map([\n    [400, Status.INVALID_ARGUMENT],\n    [401, Status.UNAUTHENTICATED],\n    [403, Status.PERMISSION_DENIED],\n    [404, Status.NOT_FOUND],\n    [409, Status.ABORTED],\n    [416, Status.OUT_OF_RANGE],\n    [429, Status.RESOURCE_EXHAUSTED],\n    [499, Status.CANCELLED],\n    [501, Status.UNIMPLEMENTED],\n    [503, Status.UNAVAILABLE],\n    [504, Status.DEADLINE_EXCEEDED],\n]);\n// Maps HTTP status codes to gRPC status codes above.\nfunction rpcCodeFromHttpStatusCode(httpStatusCode) {\n    if (exports.HttpCodeToRpcCodeMap.has(httpStatusCode)) {\n        return exports.HttpCodeToRpcCodeMap.get(httpStatusCode);\n    }\n    // All 2xx\n    if (httpStatusCode >= 200 && httpStatusCode < 300) {\n        return Status.OK;\n    }\n    // All other 4xx\n    if (httpStatusCode >= 400 && httpStatusCode < 500) {\n        return Status.FAILED_PRECONDITION;\n    }\n    // All other 5xx\n    if (httpStatusCode >= 500 && httpStatusCode < 600) {\n        return Status.INTERNAL;\n    }\n    // Everything else\n    return Status.UNKNOWN;\n}\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLGNBQWM7QUFDN0MsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGFBQWEsY0FBYyxjQUFjO0FBQzFDLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFuaXNoLWxhbmd1YWdlLWxlYXJuaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9zdGF0dXMuanM/ODMwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSHR0cENvZGVUb1JwY0NvZGVNYXAgPSBleHBvcnRzLlN0YXR1cyA9IHZvaWQgMDtcbmV4cG9ydHMucnBjQ29kZUZyb21IdHRwU3RhdHVzQ29kZSA9IHJwY0NvZGVGcm9tSHR0cFN0YXR1c0NvZGU7XG4vLyBUaGUgZm9sbG93aW5nIGlzIGEgY29weSBvZiB0aGUgU3RhdHVzIGVudW0gZGVmaW5lZCBpbiBAZ3JwYy9ncnBjLWpzLFxuLy8gc3JjL2NvbnN0YW50cy50cy4gV2UgbmVlZCB0byB1c2Ugc29tZSBvZiB0aGVzZSBzdGF0dXNlcyBoZXJlIGFuZCB0aGVyZSxcbi8vIGJ1dCB3ZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIEBncnBjL2dycGMtanMgaW50byB0aGUgYnJvd3NlclxuLy8gYnVuZGxlIGp1c3QgdG8gaGF2ZSB0aGlzIHNtYWxsIGVudW0uXG52YXIgU3RhdHVzO1xuKGZ1bmN0aW9uIChTdGF0dXMpIHtcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUJPUlRFRFwiXSA9IDEwXSA9IFwiQUJPUlRFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIklOVEVSTkFMXCJdID0gMTNdID0gXCJJTlRFUk5BTFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVVRIRU5USUNBVEVEXCJdID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcbn0pKFN0YXR1cyB8fCAoZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXMgPSB7fSkpO1xuZXhwb3J0cy5IdHRwQ29kZVRvUnBjQ29kZU1hcCA9IG5ldyBNYXAoW1xuICAgIFs0MDAsIFN0YXR1cy5JTlZBTElEX0FSR1VNRU5UXSxcbiAgICBbNDAxLCBTdGF0dXMuVU5BVVRIRU5USUNBVEVEXSxcbiAgICBbNDAzLCBTdGF0dXMuUEVSTUlTU0lPTl9ERU5JRURdLFxuICAgIFs0MDQsIFN0YXR1cy5OT1RfRk9VTkRdLFxuICAgIFs0MDksIFN0YXR1cy5BQk9SVEVEXSxcbiAgICBbNDE2LCBTdGF0dXMuT1VUX09GX1JBTkdFXSxcbiAgICBbNDI5LCBTdGF0dXMuUkVTT1VSQ0VfRVhIQVVTVEVEXSxcbiAgICBbNDk5LCBTdGF0dXMuQ0FOQ0VMTEVEXSxcbiAgICBbNTAxLCBTdGF0dXMuVU5JTVBMRU1FTlRFRF0sXG4gICAgWzUwMywgU3RhdHVzLlVOQVZBSUxBQkxFXSxcbiAgICBbNTA0LCBTdGF0dXMuREVBRExJTkVfRVhDRUVERURdLFxuXSk7XG4vLyBNYXBzIEhUVFAgc3RhdHVzIGNvZGVzIHRvIGdSUEMgc3RhdHVzIGNvZGVzIGFib3ZlLlxuZnVuY3Rpb24gcnBjQ29kZUZyb21IdHRwU3RhdHVzQ29kZShodHRwU3RhdHVzQ29kZSkge1xuICAgIGlmIChleHBvcnRzLkh0dHBDb2RlVG9ScGNDb2RlTWFwLmhhcyhodHRwU3RhdHVzQ29kZSkpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuSHR0cENvZGVUb1JwY0NvZGVNYXAuZ2V0KGh0dHBTdGF0dXNDb2RlKTtcbiAgICB9XG4gICAgLy8gQWxsIDJ4eFxuICAgIGlmIChodHRwU3RhdHVzQ29kZSA+PSAyMDAgJiYgaHR0cFN0YXR1c0NvZGUgPCAzMDApIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5PSztcbiAgICB9XG4gICAgLy8gQWxsIG90aGVyIDR4eFxuICAgIGlmIChodHRwU3RhdHVzQ29kZSA+PSA0MDAgJiYgaHR0cFN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5GQUlMRURfUFJFQ09ORElUSU9OO1xuICAgIH1cbiAgICAvLyBBbGwgb3RoZXIgNXh4XG4gICAgaWYgKGh0dHBTdGF0dXNDb2RlID49IDUwMCAmJiBodHRwU3RhdHVzQ29kZSA8IDYwMCkge1xuICAgICAgICByZXR1cm4gU3RhdHVzLklOVEVSTkFMO1xuICAgIH1cbiAgICAvLyBFdmVyeXRoaW5nIGVsc2VcbiAgICByZXR1cm4gU3RhdHVzLlVOS05PV047XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamArrayParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamArrayParser = void 0;\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fallbackRest_1 = __webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\");\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nclass StreamArrayParser extends stream_1.Transform {\n    _done;\n    _prevBlock;\n    _isInString;\n    _isSkipped;\n    _level;\n    rpc;\n    cancelController;\n    cancelSignal;\n    cancelRequested;\n    /**\n     * StreamArrayParser processes array of valid JSON objects in random chunks\n     * through readable stream, and produces a stream of plain Javascript objects\n     * where it converted from the corresponding protobuf message instance.\n     *\n     * The default JSON parser decodes the input stream under the\n     * following rules:\n     *  1. The stream represents a valid JSON array (must start with a \"[\" and\n     * close with the corresponding \"]\"). Each element of this array is assumed to\n     * be either an array or an object, and will be decoded as a JS object and\n     *    delivered.\n     *  2. All JSON elements in the buffer will be decoded and delivered in a\n     * stream.\n     *\n     * @private\n     * @constructor\n     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n     * @param {Object} options - the options pass to Transform Stream. See more\n     * details\n     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n     */\n    constructor(rpc, options) {\n        super(Object.assign({}, options, { readableObjectMode: true }));\n        this._done = false;\n        this._prevBlock = Buffer.from('');\n        this._isInString = false;\n        this._isSkipped = false;\n        this._level = 0;\n        this.rpc = rpc;\n        this.cancelController = (0, featureDetection_1.hasAbortController)()\n            ? new AbortController()\n            : new abort_controller_1.AbortController();\n        this.cancelSignal = this.cancelController.signal;\n        this.cancelRequested = false;\n    }\n    _transform(chunk, _, callback) {\n        let objectStart = 0;\n        let curIndex = 0;\n        if (this._level === 0 && curIndex === 0) {\n            if (String.fromCharCode(chunk[0]) !== '[') {\n                this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n            }\n            curIndex++;\n            this._level++;\n        }\n        while (curIndex < chunk.length) {\n            const curValue = String.fromCharCode(chunk[curIndex]);\n            if (!this._isSkipped) {\n                switch (curValue) {\n                    case '{':\n                        // Check if it's in string, we ignore the curly brace in string.\n                        // Otherwise the object level++.\n                        if (!this._isInString) {\n                            this._level++;\n                        }\n                        if (!this._isInString && this._level === 2) {\n                            objectStart = curIndex;\n                        }\n                        break;\n                    case '\"':\n                        // Flip the string status\n                        this._isInString = !this._isInString;\n                        break;\n                    case '}':\n                        // check if it's in string\n                        // if true, do nothing\n                        // if false and level = 0, push data\n                        if (!this._isInString) {\n                            this._level--;\n                        }\n                        if (!this._isInString && this._level === 1) {\n                            // find a object\n                            const objBuff = Buffer.concat([\n                                this._prevBlock,\n                                chunk.slice(objectStart, curIndex + 1),\n                            ]);\n                            try {\n                                // HTTP response.ok is true.\n                                const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);\n                                this.push(msgObj);\n                            }\n                            catch (err) {\n                                this.emit('error', err);\n                            }\n                            objectStart = curIndex + 1;\n                            this._prevBlock = Buffer.from('');\n                        }\n                        break;\n                    case ']':\n                        if (!this._isInString && this._level === 1) {\n                            this._done = true;\n                            this.push(null);\n                        }\n                        break;\n                    case '\\\\':\n                        // Escaping escape character.\n                        this._isSkipped = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else {\n                this._isSkipped = false;\n            }\n            curIndex++;\n        }\n        if (this._level > 1) {\n            this._prevBlock = Buffer.concat([\n                this._prevBlock,\n                chunk.slice(objectStart, curIndex),\n            ]);\n        }\n        callback();\n    }\n    _flush(callback) {\n        callback();\n    }\n    cancel() {\n        this._done = true;\n        this.cancelRequested = true;\n        this.cancelController.abort();\n        this.end();\n    }\n}\nexports.StreamArrayParser = StreamArrayParser;\n//# sourceMappingURL=streamArrayParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\n/**\n * A descriptor for streaming calls.\n */\nclass StreamDescriptor {\n    type;\n    streaming; // needed for browser support\n    rest;\n    gaxStreamingRetries;\n    constructor(streamType, rest, gaxStreamingRetries) {\n        this.type = streamType;\n        this.streaming = true;\n        this.rest = rest;\n        this.gaxStreamingRetries = gaxStreamingRetries;\n    }\n    getApiCaller() {\n        // Right now retrying does not work with gRPC-streaming, because retryable\n        // assumes an API call returns an event emitter while gRPC-streaming methods\n        // return Stream.\n        return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n}\nexports.StreamDescriptor = StreamDescriptor;\n//# sourceMappingURL=streamDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtRGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhbmlzaC1sYW5ndWFnZS1sZWFybmluZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtRGVzY3JpcHRvci5qcz8wM2U3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdG9yID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtaW5nQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi9zdHJlYW1pbmdBcGlDYWxsZXJcIik7XG4vKipcbiAqIEEgZGVzY3JpcHRvciBmb3Igc3RyZWFtaW5nIGNhbGxzLlxuICovXG5jbGFzcyBTdHJlYW1EZXNjcmlwdG9yIHtcbiAgICB0eXBlO1xuICAgIHN0cmVhbWluZzsgLy8gbmVlZGVkIGZvciBicm93c2VyIHN1cHBvcnRcbiAgICByZXN0O1xuICAgIGdheFN0cmVhbWluZ1JldHJpZXM7XG4gICAgY29uc3RydWN0b3Ioc3RyZWFtVHlwZSwgcmVzdCwgZ2F4U3RyZWFtaW5nUmV0cmllcykge1xuICAgICAgICB0aGlzLnR5cGUgPSBzdHJlYW1UeXBlO1xuICAgICAgICB0aGlzLnN0cmVhbWluZyA9IHRydWU7XG4gICAgICAgIHRoaXMucmVzdCA9IHJlc3Q7XG4gICAgICAgIHRoaXMuZ2F4U3RyZWFtaW5nUmV0cmllcyA9IGdheFN0cmVhbWluZ1JldHJpZXM7XG4gICAgfVxuICAgIGdldEFwaUNhbGxlcigpIHtcbiAgICAgICAgLy8gUmlnaHQgbm93IHJldHJ5aW5nIGRvZXMgbm90IHdvcmsgd2l0aCBnUlBDLXN0cmVhbWluZywgYmVjYXVzZSByZXRyeWFibGVcbiAgICAgICAgLy8gYXNzdW1lcyBhbiBBUEkgY2FsbCByZXR1cm5zIGFuIGV2ZW50IGVtaXR0ZXIgd2hpbGUgZ1JQQy1zdHJlYW1pbmcgbWV0aG9kc1xuICAgICAgICAvLyByZXR1cm4gU3RyZWFtLlxuICAgICAgICByZXR1cm4gbmV3IHN0cmVhbWluZ0FwaUNhbGxlcl8xLlN0cmVhbWluZ0FwaUNhbGxlcih0aGlzKTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmVhbURlc2NyaXB0b3IgPSBTdHJlYW1EZXNjcmlwdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtRGVzY3JpcHRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streaming.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamProxy = exports.StreamType = void 0;\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n    /** Client sends a single request, server streams responses. */\n    StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n    /** Client streams requests, server returns a single response. */\n    StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n    /** Both client and server stream objects. */\n    StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType || (exports.StreamType = StreamType = {}));\n// In retry-request, you could pass parameters to request using the requestOpts parameter\n// when we called retry-request from gax, we always passed null\n// passing null here removes an unnecessary parameter from this implementation\nconst requestOps = null;\nclass StreamProxy extends duplexify {\n    type;\n    _callback;\n    _isCancelCalled;\n    stream;\n    _responseHasSent;\n    rest;\n    gaxServerStreamingRetries;\n    apiCall;\n    argument;\n    /**\n     * StreamProxy is a proxy to gRPC-streaming method.\n     *\n     * @private\n     * @constructor\n     * @param {StreamType} type - the type of gRPC stream.\n     * @param {ApiCallback} callback - the callback for further API call.\n     */\n    constructor(type, callback, rest, gaxServerStreamingRetries) {\n        super(undefined, undefined, {\n            objectMode: true,\n            readable: type !== StreamType.CLIENT_STREAMING,\n            writable: type !== StreamType.SERVER_STREAMING,\n        });\n        this.type = type;\n        this._callback = callback;\n        this._isCancelCalled = false;\n        this._responseHasSent = false;\n        this.rest = rest;\n        this.gaxServerStreamingRetries = gaxServerStreamingRetries;\n    }\n    shouldRetryRequest(error, retry) {\n        const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        let shouldRetry = this.defaultShouldRetry(e, retry);\n        if (retry.shouldRetryFn) {\n            shouldRetry = retry.shouldRetryFn(e);\n        }\n        return shouldRetry;\n    }\n    cancel() {\n        if (this.stream) {\n            this.stream.cancel();\n        }\n        else {\n            this._isCancelCalled = true;\n        }\n    }\n    /**\n     * Helper function to handle total timeout + max retry check for server streaming retries\n     * @param {number} deadline - the current retry deadline\n     * @param {number} maxRetries - maximum total number of retries\n     * @param {number} totalTimeoutMillis - total timeout in milliseconds used in timeout calculation\n     * @param {GoogleError} originalError - underlying error received by the stream\n     * @param {originalTimeout} originalTimeout - the original Timeout set in backoff settings\n     * @param {retries} retries - the number of retries the call has made so far\n     */\n    throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, totalTimeoutMillis, originalError, originalTimeout, retries) {\n        const now = new Date();\n        const nowTime = now.getTime();\n        if (originalTimeout &&\n            (totalTimeoutMillis === 0 ||\n                totalTimeoutMillis < 0 ||\n                (deadline && nowTime >= deadline))) {\n            const error = new googleError_1.GoogleError(`Total timeout of API exceeded ${originalTimeout} milliseconds ${originalError ? `retrying error ${originalError} ` : ''} before any response was received.`);\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\n            throw error;\n        }\n        if (maxRetries === 0) {\n            const error = originalError;\n            error.note = 'Max retries is set to zero.';\n            throw error;\n        }\n        if (retries && retries >= maxRetries) {\n            const error = new googleError_1.GoogleError('Exceeded maximum number of retries ' +\n                (originalError ? `retrying error ${originalError} ` : '') +\n                'before any response was received');\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\n            throw error;\n        }\n    }\n    /**\n     * Forwards events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n    eventForwardHelper(stream) {\n        const eventsToForward = ['metadata', 'response', 'status'];\n        eventsToForward.forEach(event => {\n            stream.on(event, this.emit.bind(this, event));\n        });\n    }\n    /**\n     * Helper function that emits a response on the stream after either a 'metadata'\n     * or a 'status' event - this helps streams to behave more like http consumers expect\n     * @param {Stream} stream - The API request stream.\n     */\n    statusMetadataHelper(stream) {\n        // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n        // Emit the 'response' event if stream has no 'metadata' event.\n        // This avoids the stream swallowing the other events, such as 'end'.\n        stream.on('status', () => {\n            if (!this._responseHasSent) {\n                stream.emit('response', {\n                    code: 200,\n                    details: '',\n                    message: 'OK',\n                });\n            }\n        });\n        // We also want to supply the status data as 'response' event to support\n        // the behavior of google-cloud-node expects.\n        // see:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n        stream.on('metadata', metadata => {\n            // Create a response object with succeeds.\n            // TODO: unify this logic with the decoration of gRPC response when it's\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n            stream.emit('response', {\n                code: 200,\n                details: '',\n                message: 'OK',\n                metadata,\n            });\n            this._responseHasSent = true;\n        });\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     *  gRPC is guaranteed emit the 'status' event but not 'metadata'\n     * 'status' is the last event to emit; if 'metadata' emits, it will\n     * be the first event to emit. It should only emit once; if it emits\n     * more than once, unexpected side effects will occur.\n     *\n     * @param {Stream} stream - The API request stream.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */\n    forwardEvents(stream) {\n        this.eventForwardHelper(stream);\n        this.statusMetadataHelper(stream);\n        stream.on('error', error => {\n            googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        });\n    }\n    /**\n     * Default mechanism for determining whether a streaming call should retry\n     * If a user passes in a \"shouldRetryFn\", this will not be used\n     * @param {GoogleError} errpr - The error we need to determine is retryable or not\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */\n    defaultShouldRetry(error, retry) {\n        if ((retry.retryCodes.length > 0 &&\n            retry.retryCodes.indexOf(error.code) < 0) ||\n            retry.retryCodes.length === 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */\n    setStream(apiCall, argument, retryRequestOptions = {}, retry) {\n        this.apiCall = apiCall;\n        this.argument = argument;\n        if (this.type === StreamType.SERVER_STREAMING) {\n            if (this.rest) {\n                const stream = apiCall(argument, this._callback);\n                this.stream = stream;\n                this.setReadable(stream);\n            }\n            else if (this.gaxServerStreamingRetries) {\n                const request = () => {\n                    if (this._isCancelCalled) {\n                        if (this.stream) {\n                            this.stream.cancel();\n                        }\n                        return;\n                    }\n                    const stream = apiCall(argument, this._callback);\n                    return stream;\n                };\n                const retryStream = this.newStreamingRetryRequest({ request, retry });\n                this.stream = retryStream;\n                this.eventForwardHelper(retryStream);\n                this.setReadable(retryStream);\n            }\n            else {\n                const retryStream = retryRequest(null, {\n                    objectMode: true,\n                    request: () => {\n                        if (this._isCancelCalled) {\n                            if (this.stream) {\n                                this.stream.cancel();\n                            }\n                            return;\n                        }\n                        const stream = apiCall(argument, this._callback);\n                        this.stream = stream;\n                        this.forwardEvents(stream);\n                        return stream;\n                    },\n                    retries: retryRequestOptions.retries,\n                    currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n                    noResponseRetries: retryRequestOptions.noResponseRetries,\n                    shouldRetryFn: retryRequestOptions.shouldRetryFn,\n                });\n                this.setReadable(retryStream);\n            }\n            return;\n        }\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.forwardEvents(stream);\n        if (this.type === StreamType.CLIENT_STREAMING) {\n            this.setWritable(stream);\n        }\n        if (this.type === StreamType.BIDI_STREAMING) {\n            this.setReadable(stream);\n            this.setWritable(stream);\n        }\n        if (this._isCancelCalled && this.stream) {\n            this.stream.cancel();\n        }\n    }\n    /**\n     * Creates a new retry request stream -\n     *inner arrow function \"newMakeRequest\" handles retrying and resumption\n     * @param {streamingRetryRequestOptions} opts\n     *   {request} - the request to be made if the stream errors\n     *   {retry} - the retry options associated with the call\n     * @returns {CancellableStream} - the stream that handles retry logic\n     */\n    newStreamingRetryRequest(opts) {\n        // at this point, it would be unexpected if retry were undefined\n        // but if it is, provide a logical default so we don't run into trouble\n        const retry = opts.retry ?? {\n            retryCodes: [],\n            backoffSettings: (0, gax_1.createDefaultBackoffSettings)(),\n        };\n        let retries = 0;\n        const retryStream = new stream_1.PassThrough({\n            objectMode: true,\n        });\n        const totalTimeout = retry.backoffSettings.totalTimeoutMillis ?? undefined;\n        const maxRetries = retry.backoffSettings.maxRetries ?? undefined;\n        let timeout = retry.backoffSettings.initialRpcTimeoutMillis ?? undefined;\n        let now = new Date();\n        let deadline = 0;\n        if (totalTimeout) {\n            deadline = now.getTime() + totalTimeout;\n        }\n        const transientErrorHelper = (error, requestStream) => {\n            const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n            e.note =\n                'Exception occurred in retry method that was ' +\n                    'not classified as transient';\n            // clean up the request stream and retryStreams, silently destroy it on the request stream\n            // but do raise it on destructin of the retryStream so the consumer can see it\n            requestStream.destroy();\n            retryStream.destroy(e);\n            return retryStream;\n        };\n        const newMakeRequest = (newopts) => {\n            let dataEnd = false;\n            let statusReceived = false;\n            let enteredError = false;\n            // make the request\n            const requestStream = newopts.request(requestOps);\n            retryStream.cancel = requestStream.cancel; // make sure the retryStream is also cancellable by the user\n            const eventsToForward = ['metadata', 'response', 'status'];\n            eventsToForward.forEach(event => {\n                requestStream.on(event, retryStream.emit.bind(retryStream, event));\n            });\n            this.statusMetadataHelper(requestStream);\n            // TODO - b/353262542 address buffer stuff\n            requestStream.on('data', (data) => {\n                retries = 0;\n                this.emit.bind(this, 'data')(data);\n            });\n            /* in retry-request, which previously handled retries,\n             * \"end\" could be emitted on a request stream before other gRPC events.\n             * To ensure it doesn't reach the consumer stream prematurely, retry-request piped\n             * two streams together (delayStream and retryStream)\n             * to ensure that \"end\" only emitted after a \"response\" event\n             *\n             * We are consciously NOT using pipeline or .pipe as part of similar logic here\n             * because we want more control over what happens during event handoff and we want to\n             * avoid the undesired behavior that can happen with error events\n             * if consumers in client libraries are also using pipes\n             *\n             * Since \"status\" is guaranteed to be the last event emitted by gRPC.\n             * If we have seen an \"end\" event, the dataEnd boolean will be true and we can safely\n             * end the stream.\n             *\n             * The \"statusReceived\" boolean covers the opposite case - that we receive the \"status\" event before\n             * a successful stream end event - this signals the .on('end') event handler that it's okay to end the stream\n             *\n             *\n             */\n            requestStream.on('status', () => {\n                statusReceived = true;\n                if (dataEnd) {\n                    retryStream.end();\n                }\n                return retryStream;\n            });\n            requestStream.on('end', () => {\n                if (!enteredError) {\n                    dataEnd = true;\n                    // in this case, we've already received \"status\"\n                    // which is the last event from gRPC, so it's cool to end the stream\n                    if (statusReceived) {\n                        retryStream.end();\n                    }\n                }\n                return retryStream;\n                // there is no else case because if enteredError\n                // is true, we will handle stream destruction as part of\n                // either retrying (where we don't want to end the stream)\n                // or as part of error handling, which will take care of stream destruction\n            });\n            requestStream.on('error', (error) => {\n                enteredError = true;\n                // type check for undefined instead of for truthiness in case maxRetries or timeout is equal to zero\n                if (typeof maxRetries !== undefined ||\n                    typeof totalTimeout !== undefined) {\n                    if (this.shouldRetryRequest(error, retry)) {\n                        if (maxRetries && totalTimeout) {\n                            const newError = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +\n                                'in backoffSettings.');\n                            newError.code = status_1.Status.INVALID_ARGUMENT;\n                            // clean up the request stream and retryStreams, silently destroy it on the request stream\n                            // but do raise it on destructin of the retryStream so the consumer can see it\n                            requestStream.destroy();\n                            retryStream.destroy(newError);\n                            return retryStream;\n                        }\n                        else {\n                            // check for exceeding timeout or max retries\n                            try {\n                                this.throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, timeout, error, totalTimeout, retries);\n                            }\n                            catch (error) {\n                                const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n                                // clean up the request stream and retryStreams, silently destroy it on the request stream\n                                // but do raise it on destruction of the retryStream so the consumer can see it\n                                requestStream.destroy();\n                                retryStream.destroy(e);\n                                return retryStream;\n                            }\n                            const delayMult = retry.backoffSettings.retryDelayMultiplier;\n                            const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\n                            const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\n                            const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\n                            let delay = retry.backoffSettings.initialRetryDelayMillis;\n                            // calculate new deadlines\n                            const toSleep = Math.random() * delay;\n                            const calculateTimeoutAndResumptionFunction = () => {\n                                setTimeout(() => {\n                                    // only do timeout calculations if not using maxRetries\n                                    if (timeout) {\n                                        now = new Date();\n                                        delay = Math.min(delay * delayMult, maxDelay);\n                                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\n                                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\n                                        const newDeadline = deadline ? deadline - now.getTime() : 0;\n                                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\n                                    }\n                                    retries++;\n                                    let retryArgument = this.argument;\n                                    // if resumption logic is passed, use it to determined the\n                                    // new argument for the new request made to the server\n                                    // otherwise, the original argument will be passed\n                                    if (retry.getResumptionRequestFn !== undefined) {\n                                        retryArgument = retry.getResumptionRequestFn(retryArgument);\n                                    }\n                                    const newRequest = () => {\n                                        if (this._isCancelCalled) {\n                                            if (this.stream) {\n                                                this.stream.cancel();\n                                            }\n                                            return;\n                                        }\n                                        const newStream = this.apiCall(retryArgument, this._callback);\n                                        return newStream;\n                                    };\n                                    opts.request = newRequest;\n                                    // make a request with the updated parameters\n                                    // based on the resumption strategy\n                                    return newMakeRequest(opts);\n                                }, toSleep);\n                            };\n                            return calculateTimeoutAndResumptionFunction();\n                        }\n                    }\n                    else {\n                        // non retryable error\n                        return transientErrorHelper(error, requestStream);\n                    }\n                }\n                else {\n                    // neither timeout nor maxRetries are defined, surface the error to the caller\n                    return transientErrorHelper(error, requestStream);\n                }\n            });\n            // return the stream if we didn't return it as\n            // part of an error state\n            return retryStream;\n        };\n        // this is the first make request call with the options the user passed in\n        return newMakeRequest(opts);\n    }\n}\nexports.StreamProxy = StreamProxy;\n//# sourceMappingURL=streaming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamingApiCaller = void 0;\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nclass StreamingApiCaller {\n    descriptor;\n    /**\n     * An API caller for methods of gRPC streaming.\n     * @private\n     * @constructor\n     * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n     */\n    constructor(descriptor) {\n        this.descriptor = descriptor;\n    }\n    init(callback) {\n        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest, this.descriptor.gaxStreamingRetries);\n    }\n    wrap(func) {\n        switch (this.descriptor.type) {\n            case streaming_1.StreamType.SERVER_STREAMING:\n                return (argument, metadata, options) => {\n                    return func(argument, metadata, options);\n                };\n            case streaming_1.StreamType.CLIENT_STREAMING:\n                return (argument, metadata, options, callback) => {\n                    return func(metadata, options, callback);\n                };\n            case streaming_1.StreamType.BIDI_STREAMING:\n                return (argument, metadata, options) => {\n                    return func(metadata, options);\n                };\n            default:\n                (0, warnings_1.warn)('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\n        }\n        return func;\n    }\n    call(apiCall, argument, settings, stream) {\n        stream.setStream(apiCall, argument, settings.retryRequestOptions, settings.retry);\n    }\n    fail(stream, err) {\n        stream.emit('error', err);\n    }\n    result(stream) {\n        return stream;\n    }\n}\nexports.StreamingApiCaller = StreamingApiCaller;\n//# sourceMappingURL=streamingApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixtQkFBbUIsbUJBQU8sQ0FBQywwRUFBYTtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxxQkFBcUI7QUFDeEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFuaXNoLWxhbmd1YWdlLWxlYXJuaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9zdHJlYW1pbmdDYWxscy9zdHJlYW1pbmdBcGlDYWxsZXIuanM/ODVjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtaW5nQXBpQ2FsbGVyID0gdm9pZCAwO1xuY29uc3Qgd2FybmluZ3NfMSA9IHJlcXVpcmUoXCIuLi93YXJuaW5nc1wiKTtcbmNvbnN0IHN0cmVhbWluZ18xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nXCIpO1xuY2xhc3MgU3RyZWFtaW5nQXBpQ2FsbGVyIHtcbiAgICBkZXNjcmlwdG9yO1xuICAgIC8qKlxuICAgICAqIEFuIEFQSSBjYWxsZXIgZm9yIG1ldGhvZHMgb2YgZ1JQQyBzdHJlYW1pbmcuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmVhbURlc2NyaXB0b3J9IGRlc2NyaXB0b3IgLSB0aGUgZGVzY3JpcHRvciBvZiB0aGUgbWV0aG9kIHN0cnVjdHVyZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkZXNjcmlwdG9yKSB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG4gICAgfVxuICAgIGluaXQoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzdHJlYW1pbmdfMS5TdHJlYW1Qcm94eSh0aGlzLmRlc2NyaXB0b3IudHlwZSwgY2FsbGJhY2ssIHRoaXMuZGVzY3JpcHRvci5yZXN0LCB0aGlzLmRlc2NyaXB0b3IuZ2F4U3RyZWFtaW5nUmV0cmllcyk7XG4gICAgfVxuICAgIHdyYXAoZnVuYykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGVzY3JpcHRvci50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHN0cmVhbWluZ18xLlN0cmVhbVR5cGUuU0VSVkVSX1NUUkVBTUlORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyhhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIHN0cmVhbWluZ18xLlN0cmVhbVR5cGUuQ0xJRU5UX1NUUkVBTUlORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMobWV0YWRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBzdHJlYW1pbmdfMS5TdHJlYW1UeXBlLkJJRElfU1RSRUFNSU5HOlxuICAgICAgICAgICAgICAgIHJldHVybiAoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKG1ldGFkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAoMCwgd2FybmluZ3NfMS53YXJuKSgnc3RyZWFtaW5nX3dyYXBfdW5rbm93bl9zdHJlYW1fdHlwZScsIGBVbmtub3duIHN0cmVhbSB0eXBlOiAke3RoaXMuZGVzY3JpcHRvci50eXBlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBjYWxsKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncywgc3RyZWFtKSB7XG4gICAgICAgIHN0cmVhbS5zZXRTdHJlYW0oYXBpQ2FsbCwgYXJndW1lbnQsIHNldHRpbmdzLnJldHJ5UmVxdWVzdE9wdGlvbnMsIHNldHRpbmdzLnJldHJ5KTtcbiAgICB9XG4gICAgZmFpbChzdHJlYW0sIGVycikge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICByZXN1bHQoc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1pbmdBcGlDYWxsZXIgPSBTdHJlYW1pbmdBcGlDYWxsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmdBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/transcoding.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/transcoding.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getField = getField;\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\nexports.deleteField = deleteField;\nexports.buildQueryStringComponents = buildQueryStringComponents;\nexports.encodeWithSlashes = encodeWithSlashes;\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\nexports.applyPattern = applyPattern;\nexports.match = match;\nexports.flattenObject = flattenObject;\nexports.isProto3OptionalField = isProto3OptionalField;\nexports.transcode = transcode;\nexports.overrideHttpRules = overrideHttpRules;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst httpOptionName = '(google.api.http)';\nconst proto3OptionalName = 'proto3_optional';\n// List of methods as defined in google/api/http.proto (see HttpRule)\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\nfunction getField(request, field, allowObjects = false) {\n    const parts = field.split('.');\n    let value = request;\n    for (const part of parts) {\n        if (typeof value !== 'object') {\n            return undefined;\n        }\n        value = value[part];\n    }\n    if (!allowObjects &&\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        value !== null) {\n        return undefined;\n    }\n    return value;\n}\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = '') {\n    if (typeof request !== 'object' || request === null) {\n        return request;\n    }\n    const copy = Object.assign({}, request);\n    for (const key in copy) {\n        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\n            delete copy[key];\n            continue;\n        }\n        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\n        if (Array.isArray(copy[key])) {\n            // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\n            copy[key] = copy[key].map(value => deepCopyWithoutMatchedFields(value, new Set()));\n        }\n        else if (typeof copy[key] === 'object' && copy[key] !== null) {\n            copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\n        }\n    }\n    return copy;\n}\nfunction deleteField(request, field) {\n    const parts = field.split('.');\n    while (parts.length > 1) {\n        if (typeof request !== 'object') {\n            return;\n        }\n        const part = parts.shift();\n        request = request[part];\n    }\n    const part = parts.shift();\n    if (typeof request !== 'object') {\n        return;\n    }\n    delete request[part];\n}\nfunction buildQueryStringComponents(request, prefix = '') {\n    const resultList = [];\n    for (const key in request) {\n        if (Array.isArray(request[key])) {\n            for (const value of request[key]) {\n                resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\n            }\n        }\n        else if (typeof request[key] === 'object' && request[key] !== null) {\n            resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\n        }\n        else {\n            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())}`);\n        }\n    }\n    return resultList;\n}\nfunction encodeWithSlashes(str) {\n    return str\n        .split('')\n        .map(c => (c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)))\n        .join('');\n}\nfunction encodeWithoutSlashes(str) {\n    return str\n        .split('')\n        .map(c => (c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)))\n        .join('');\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction applyPattern(pattern, fieldValue) {\n    if (!pattern || pattern === '*') {\n        return encodeWithSlashes(fieldValue);\n    }\n    if (!pattern.includes('*') && pattern !== fieldValue) {\n        return undefined;\n    }\n    // since we're converting the pattern to a regex, make necessary precautions:\n    const regex = new RegExp('^' +\n        escapeRegExp(pattern)\n            .replace(/\\\\\\*\\\\\\*/g, '(.+)')\n            .replace(/\\\\\\*/g, '([^/]+)') +\n        '$');\n    if (!fieldValue.match(regex)) {\n        return undefined;\n    }\n    return encodeWithoutSlashes(fieldValue);\n}\nfunction fieldToCamelCase(field) {\n    const parts = field.split('.');\n    return parts.map(part => (0, util_1.toCamelCase)(part)).join('.');\n}\nfunction match(request, pattern) {\n    let url = pattern;\n    const matchedFields = [];\n    for (;;) {\n        const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n        if (!match) {\n            break;\n        }\n        const [, before, field, pattern, after] = match;\n        const camelCasedField = fieldToCamelCase(field);\n        matchedFields.push(fieldToCamelCase(camelCasedField));\n        const fieldValue = getField(request, camelCasedField);\n        if (fieldValue === undefined) {\n            return undefined;\n        }\n        const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\n        if (appliedPattern === undefined) {\n            return undefined;\n        }\n        url = before + appliedPattern + after;\n    }\n    return { matchedFields, url };\n}\nfunction flattenObject(request) {\n    const result = {};\n    for (const key in request) {\n        if (request[key] === undefined) {\n            continue;\n        }\n        if (Array.isArray(request[key])) {\n            // According to the http.proto comments, a repeated field may only\n            // contain primitive types, so no extra recursion here.\n            result[key] = request[key];\n            continue;\n        }\n        if (typeof request[key] === 'object' && request[key] !== null) {\n            const nested = flattenObject(request[key]);\n            for (const nestedKey in nested) {\n                result[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n            continue;\n        }\n        result[key] = request[key];\n    }\n    return result;\n}\nfunction isProto3OptionalField(field) {\n    return field && field.options && field.options[proto3OptionalName];\n}\nfunction transcode(request, parsedOptions) {\n    const httpRules = [];\n    for (const option of parsedOptions) {\n        if (!(httpOptionName in option)) {\n            continue;\n        }\n        const httpRule = option[httpOptionName];\n        httpRules.push(httpRule);\n        if (httpRule?.additional_bindings) {\n            const additionalBindings = Array.isArray(httpRule.additional_bindings)\n                ? httpRule.additional_bindings\n                : [httpRule.additional_bindings];\n            httpRules.push(...additionalBindings);\n        }\n    }\n    for (const httpRule of httpRules) {\n        for (const httpMethod of supportedHttpMethods) {\n            if (!(httpMethod in httpRule)) {\n                continue;\n            }\n            const pathTemplate = httpRule[httpMethod];\n            const matchResult = match(request, pathTemplate);\n            if (matchResult === undefined) {\n                continue;\n            }\n            const { url, matchedFields } = matchResult;\n            let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\n            if (httpRule.body === '*') {\n                return { httpMethod, url, queryString: '', data };\n            }\n            // one field possibly goes to request data, others go to query string\n            const queryStringObject = data;\n            if (httpRule.body) {\n                data = getField(queryStringObject, fieldToCamelCase(httpRule.body), \n                /*allowObjects:*/ true);\n                deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\n            }\n            else {\n                data = '';\n            }\n            const queryStringComponents = buildQueryStringComponents(queryStringObject);\n            const queryString = queryStringComponents.join('&');\n            if (!data ||\n                (typeof data === 'object' && Object.keys(data).length === 0)) {\n                data = '';\n            }\n            return { httpMethod, url, queryString, data };\n        }\n    }\n    return undefined;\n}\n// Override the protobuf json's the http rules.\nfunction overrideHttpRules(httpRules, protoJson) {\n    for (const rule of httpRules) {\n        if (!rule.selector) {\n            continue;\n        }\n        const rpc = protoJson.lookup(rule.selector);\n        // Not support override on non-exist RPC or a RPC without an annotation.\n        // We could reconsider if we have the use case later.\n        if (!rpc || !rpc.parsedOptions) {\n            continue;\n        }\n        for (const item of rpc.parsedOptions) {\n            if (!(httpOptionName in item)) {\n                continue;\n            }\n            const httpOptions = item[httpOptionName];\n            for (const httpMethod in httpOptions) {\n                if (httpMethod in rule) {\n                    if (httpMethod === 'additional_bindings') {\n                        continue;\n                    }\n                    httpOptions[httpMethod] =\n                        rule[httpMethod];\n                }\n                if (rule.additional_bindings) {\n                    httpOptions['additional_bindings'] = !httpOptions['additional_bindings']\n                        ? []\n                        : Array.isArray(httpOptions['additional_bindings'])\n                            ? httpOptions['additional_bindings']\n                            : [httpOptions['additional_bindings']];\n                    // Make the additional_binding to be an array if it is not.\n                    httpOptions['additional_bindings'].push(...rule.additional_bindings);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=transcoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/transcoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/util.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeAnyProtosInArray = exports.decodeProtobufAny = exports.getProtoNameFromFullName = void 0;\nexports.camelToSnakeCase = camelToSnakeCase;\nexports.toCamelCase = toCamelCase;\nexports.toLowerCamelCase = toLowerCamelCase;\nexports.makeUUID = makeUUID;\nconst PROTO_TYPE_PREFIX = 'type.googleapis.com/';\nconst NUM_OF_PARTS_IN_PROTO_TYPE_NAME = 2;\nconst randomUUID = () => globalThis.crypto?.randomUUID() || (__webpack_require__(/*! crypto */ \"crypto\").randomUUID)();\nfunction words(str, normalize = false) {\n    if (normalize) {\n        // strings like somethingABCSomething are special case for protobuf.js,\n        // they should be split as \"something\", \"abc\", \"something\".\n        // Deal with sequences of capital letters first.\n        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str) => {\n            return (str[0] +\n                str.slice(1, str.length - 1).toLowerCase() +\n                str[str.length - 1]);\n        });\n    }\n    // split on spaces, non-alphanumeric, or capital letters\n    // note: we keep the capitalization of the first word (special case: IPProtocol)\n    return str\n        .split(/(?=[A-Z])|[^A-Za-z0-9.]+/)\n        .filter(w => w.length > 0)\n        .map((w, index) => (index === 0 ? w : w.toLowerCase()));\n}\n/**\n * Converts the first character of the given string to lower case.\n */\nfunction lowercase(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n    // Keep the first position capitalization, otherwise decapitalize with underscore.\n    const wordsList = words(str);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(lowercase));\n    return result.join('_');\n}\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\nfunction toCamelCase(str) {\n    const wordsList = words(str, /*normalize:*/ true);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(w => {\n        if (w.match(/^\\d+$/)) {\n            return '_' + w;\n        }\n        return capitalize(w);\n    }));\n    return result.join('');\n}\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction toLowerCamelCase(str) {\n    const camelCase = toCamelCase(str);\n    if (camelCase.length === 0) {\n        return camelCase;\n    }\n    return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction makeUUID() {\n    return randomUUID();\n}\n// Get proto type name removing the prefix. For example full type name: type.googleapis.com/google.rpc.Help, the function returns google.rpc.Help.\nconst getProtoNameFromFullName = (fullTypeName) => {\n    const parts = fullTypeName.split(PROTO_TYPE_PREFIX);\n    if (parts.length !== NUM_OF_PARTS_IN_PROTO_TYPE_NAME) {\n        throw Error(\"Can't get proto name\");\n    }\n    return parts[1];\n};\nexports.getProtoNameFromFullName = getProtoNameFromFullName;\n// Given a proto Any and a set of protos, decode using the set of protos.\nconst decodeProtobufAny = (anyValue, protobuf) => {\n    if (anyValue.type_url === '') {\n        throw new Error('Any type_url is not set');\n    }\n    const typeName = (0, exports.getProtoNameFromFullName)(anyValue.type_url);\n    const type = protobuf.lookupType(typeName);\n    return type.decode(anyValue.value);\n};\nexports.decodeProtobufAny = decodeProtobufAny;\n// Given list of protos, if any of them are Any proto try to decode them with protos in given protobuf.\nconst decodeAnyProtosInArray = (protoList, protobuf) => {\n    const protoListDecoded = [];\n    for (const proto of protoList) {\n        if (proto.constructor.name === 'Any') {\n            try {\n                // Proto is Any we try to decode with protos in protobuf.\n                const decodedAnyProto = (0, exports.decodeProtobufAny)(proto, protobuf);\n                protoListDecoded.push(decodedAnyProto);\n            }\n            catch (e) {\n                // Skip we can't process it.\n            }\n            continue;\n        }\n        protoListDecoded.push(proto);\n    }\n    return protoListDecoded;\n};\nexports.decodeAnyProtosInArray = decodeAnyProtosInArray;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/warnings.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/warnings.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.warn = warn;\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst emittedWarnings = new Set();\n// warnType is the type of warning (e.g. 'DeprecationWarning', 'ExperimentalWarning', etc.)\nfunction warn(code, message, warnType) {\n    // Only show a given warning once\n    if (emittedWarnings.has(code)) {\n        return;\n    }\n    emittedWarnings.add(code);\n    if (!(0, featureDetection_1.isNodeJS)()) {\n        console.warn(message);\n    }\n    else if (typeof warnType !== 'undefined') {\n        process.emitWarning(message, {\n            type: warnType,\n        });\n    }\n    else {\n        process.emitWarning(message);\n    }\n}\n//# sourceMappingURL=warnings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvd2FybmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLDJCQUEyQixtQkFBTyxDQUFDLHlGQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYW5pc2gtbGFuZ3VhZ2UtbGVhcm5pbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3dhcm5pbmdzLmpzPzMzOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhcm4gPSB3YXJuO1xuY29uc3QgZmVhdHVyZURldGVjdGlvbl8xID0gcmVxdWlyZShcIi4vZmVhdHVyZURldGVjdGlvblwiKTtcbmNvbnN0IGVtaXR0ZWRXYXJuaW5ncyA9IG5ldyBTZXQoKTtcbi8vIHdhcm5UeXBlIGlzIHRoZSB0eXBlIG9mIHdhcm5pbmcgKGUuZy4gJ0RlcHJlY2F0aW9uV2FybmluZycsICdFeHBlcmltZW50YWxXYXJuaW5nJywgZXRjLilcbmZ1bmN0aW9uIHdhcm4oY29kZSwgbWVzc2FnZSwgd2FyblR5cGUpIHtcbiAgICAvLyBPbmx5IHNob3cgYSBnaXZlbiB3YXJuaW5nIG9uY2VcbiAgICBpZiAoZW1pdHRlZFdhcm5pbmdzLmhhcyhjb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVtaXR0ZWRXYXJuaW5ncy5hZGQoY29kZSk7XG4gICAgaWYgKCEoMCwgZmVhdHVyZURldGVjdGlvbl8xLmlzTm9kZUpTKSgpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHdhcm5UeXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIHR5cGU6IHdhcm5UeXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcobWVzc2FnZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FybmluZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/warnings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.json":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.json ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"iam":{"nested":{"v1":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.Cloud.Iam.V1","go_package":"google.golang.org/genproto/googleapis/iam/v1;iam","java_multiple_files":true,"java_outer_classname":"PolicyProto","java_package":"com.google.iam.v1","php_namespace":"Google\\\\Cloud\\\\Iam\\\\V1"},"nested":{"IAMPolicy":{"options":{"(google.api.default_host)":"iam-meta-api.googleapis.com"},"methods":{"SetIamPolicy":{"requestType":"SetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:setIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:setIamPolicy","body":"*"}}]},"GetIamPolicy":{"requestType":"GetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:getIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:getIamPolicy","body":"*"}}]},"TestIamPermissions":{"requestType":"TestIamPermissionsRequest","responseType":"TestIamPermissionsResponse","options":{"(google.api.http).post":"/v1/{resource=**}:testIamPermissions","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:testIamPermissions","body":"*"}}]}}},"SetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"policy":{"type":"Policy","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"GetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"options":{"type":"GetPolicyOptions","id":2}}},"TestIamPermissionsRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"permissions":{"rule":"repeated","type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"TestIamPermissionsResponse":{"fields":{"permissions":{"rule":"repeated","type":"string","id":1}}},"GetPolicyOptions":{"fields":{"requestedPolicyVersion":{"type":"int32","id":1}}},"Policy":{"fields":{"version":{"type":"int32","id":1},"bindings":{"rule":"repeated","type":"Binding","id":4},"etag":{"type":"bytes","id":3}}},"Binding":{"fields":{"role":{"type":"string","id":1},"members":{"rule":"repeated","type":"string","id":2},"condition":{"type":"google.type.Expr","id":3}}},"PolicyDelta":{"fields":{"bindingDeltas":{"rule":"repeated","type":"BindingDelta","id":1},"auditConfigDeltas":{"rule":"repeated","type":"AuditConfigDelta","id":2}}},"BindingDelta":{"fields":{"action":{"type":"Action","id":1},"role":{"type":"string","id":2},"member":{"type":"string","id":3},"condition":{"type":"google.type.Expr","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"AuditConfigDelta":{"fields":{"action":{"type":"Action","id":1},"service":{"type":"string","id":2},"exemptedMember":{"type":"string","id":3},"logType":{"type":"string","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"logging":{"options":{"csharp_namespace":"Google.Cloud.Iam.V1.Logging","go_package":"google.golang.org/genproto/googleapis/iam/v1/logging;logging","java_multiple_files":true,"java_outer_classname":"AuditDataProto","java_package":"com.google.iam.v1.logging"},"nested":{"AuditData":{"fields":{"policyDelta":{"type":"google.iam.v1.PolicyDelta","id":2}}}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ResourceProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions"},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}},"type":{"options":{"go_package":"google.golang.org/genproto/googleapis/type/expr;expr","java_multiple_files":true,"java_outer_classname":"ExprProto","java_package":"com.google.type","objc_class_prefix":"GTP"},"nested":{"Expr":{"fields":{"expression":{"type":"string","id":1},"title":{"type":"string","id":2},"description":{"type":"string","id":3},"location":{"type":"string","id":4}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.json":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.json ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"cloud":{"nested":{"location":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/cloud/location;location","java_multiple_files":true,"java_outer_classname":"LocationsProto","java_package":"com.google.cloud.location"},"nested":{"Locations":{"options":{"(google.api.default_host)":"cloud.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform"},"methods":{"ListLocations":{"requestType":"ListLocationsRequest","responseType":"ListLocationsResponse","options":{"(google.api.http).get":"/v1/{name=locations}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*}/locations"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations}","additional_bindings":{"get":"/v1/{name=projects/*}/locations"}}}]},"GetLocation":{"requestType":"GetLocationRequest","responseType":"Location","options":{"(google.api.http).get":"/v1/{name=locations/*}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*/locations/*}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations/*}","additional_bindings":{"get":"/v1/{name=projects/*/locations/*}"}}}]}}},"ListLocationsRequest":{"fields":{"name":{"type":"string","id":1},"filter":{"type":"string","id":2},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4}}},"ListLocationsResponse":{"fields":{"locations":{"rule":"repeated","type":"Location","id":1},"nextPageToken":{"type":"string","id":2}}},"GetLocationRequest":{"fields":{"name":{"type":"string","id":1}}},"Location":{"fields":{"name":{"type":"string","id":1},"locationId":{"type":"string","id":4},"displayName":{"type":"string","id":5},"labels":{"keyType":"string","type":"string","id":2},"metadata":{"type":"google.protobuf.Any","id":3}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.json":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.json ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"longrunning":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.LongRunning","go_package":"google.golang.org/genproto/googleapis/longrunning;longrunning","java_multiple_files":true,"java_outer_classname":"OperationsProto","java_package":"com.google.longrunning","php_namespace":"Google\\\\LongRunning"},"nested":{"operationInfo":{"type":"google.longrunning.OperationInfo","id":1049,"extend":"google.protobuf.MethodOptions"},"Operations":{"options":{"(google.api.default_host)":"longrunning.googleapis.com"},"methods":{"ListOperations":{"requestType":"ListOperationsRequest","responseType":"ListOperationsResponse","options":{"(google.api.http).get":"/v1/{name=operations}","(google.api.method_signature)":"name,filter"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=operations}"}},{"(google.api.method_signature)":"name,filter"}]},"GetOperation":{"requestType":"GetOperationRequest","responseType":"Operation","options":{"(google.api.http).get":"/v1/operations/{name}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/operations/{name}"}},{"(google.api.method_signature)":"name"}]},"DeleteOperation":{"requestType":"DeleteOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=operations/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=operations/**}"}},{"(google.api.method_signature)":"name"}]},"CancelOperation":{"requestType":"CancelOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1/{name=operations/**}:cancel","(google.api.http).body":"*","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=operations/**}:cancel","body":"*"}},{"(google.api.method_signature)":"name"}]},"WaitOperation":{"requestType":"WaitOperationRequest","responseType":"Operation"}}},"Operation":{"oneofs":{"result":{"oneof":["error","response"]}},"fields":{"name":{"type":"string","id":1},"metadata":{"type":"google.protobuf.Any","id":2},"done":{"type":"bool","id":3},"error":{"type":"google.rpc.Status","id":4},"response":{"type":"google.protobuf.Any","id":5}}},"GetOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"ListOperationsRequest":{"fields":{"name":{"type":"string","id":4},"filter":{"type":"string","id":1},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3}}},"ListOperationsResponse":{"fields":{"operations":{"rule":"repeated","type":"Operation","id":1},"nextPageToken":{"type":"string","id":2}}},"CancelOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"DeleteOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"WaitOperationRequest":{"fields":{"name":{"type":"string","id":1},"timeout":{"type":"google.protobuf.Duration","id":2}}},"OperationInfo":{"fields":{"responseType":{"type":"string","id":1},"metadataType":{"type":"string","id":2}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Empty":{"fields":{}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/status.json":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/status.json ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/errdetails;errdetails","java_multiple_files":true,"java_outer_classname":"ErrorDetailsProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}},"RetryInfo":{"fields":{"retryDelay":{"type":"google.protobuf.Duration","id":1}}},"DebugInfo":{"fields":{"stackEntries":{"rule":"repeated","type":"string","id":1},"detail":{"type":"string","id":2}}},"QuotaFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"subject":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"ErrorInfo":{"fields":{"reason":{"type":"string","id":1},"domain":{"type":"string","id":2},"metadata":{"keyType":"string","type":"string","id":3}}},"PreconditionFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"type":{"type":"string","id":1},"subject":{"type":"string","id":2},"description":{"type":"string","id":3}}}}},"BadRequest":{"fields":{"fieldViolations":{"rule":"repeated","type":"FieldViolation","id":1}},"nested":{"FieldViolation":{"fields":{"field":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"RequestInfo":{"fields":{"requestId":{"type":"string","id":1},"servingData":{"type":"string","id":2}}},"ResourceInfo":{"fields":{"resourceType":{"type":"string","id":1},"resourceName":{"type":"string","id":2},"owner":{"type":"string","id":3},"description":{"type":"string","id":4}}},"Help":{"fields":{"links":{"rule":"repeated","type":"Link","id":1}},"nested":{"Link":{"fields":{"description":{"type":"string","id":1},"url":{"type":"string","id":2}}}}},"LocalizedMessage":{"fields":{"locale":{"type":"string","id":1},"message":{"type":"string","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/iam_policy_service_client_config.json ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.iam.v1.IAMPolicy":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":20000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":20000,"total_timeout_millis":600000}},"methods":{"GetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"SetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"TestIamPermissions":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locations_client_config.json":
/*!************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locations_client_config.json ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.cloud.location.Locations":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"ListLocations":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetLocation":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operations_client_config.json":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operations_client_config.json ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.longrunning.Operations":{"retry_codes":{"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"],"non_idempotent":[]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":90000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":90000,"total_timeout_millis":600000}},"methods":{"GetOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"ListOperations":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"CancelOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"DeleteOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/protosList.json":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/protosList.json ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('["google/api/annotations.proto","google/api/apikeys/v2/apikeys.proto","google/api/apikeys/v2/resources.proto","google/api/auth.proto","google/api/backend.proto","google/api/billing.proto","google/api/client.proto","google/api/cloudquotas/v1/cloudquotas.proto","google/api/cloudquotas/v1/resources.proto","google/api/config_change.proto","google/api/consumer.proto","google/api/context.proto","google/api/control.proto","google/api/distribution.proto","google/api/documentation.proto","google/api/endpoint.proto","google/api/error_reason.proto","google/api/expr/conformance/v1alpha1/conformance_service.proto","google/api/expr/v1alpha1/checked.proto","google/api/expr/v1alpha1/eval.proto","google/api/expr/v1alpha1/explain.proto","google/api/expr/v1alpha1/syntax.proto","google/api/expr/v1alpha1/value.proto","google/api/expr/v1beta1/decl.proto","google/api/expr/v1beta1/eval.proto","google/api/expr/v1beta1/expr.proto","google/api/expr/v1beta1/source.proto","google/api/expr/v1beta1/value.proto","google/api/field_behavior.proto","google/api/field_info.proto","google/api/http.proto","google/api/httpbody.proto","google/api/label.proto","google/api/launch_stage.proto","google/api/log.proto","google/api/logging.proto","google/api/metric.proto","google/api/monitored_resource.proto","google/api/monitoring.proto","google/api/policy.proto","google/api/quota.proto","google/api/resource.proto","google/api/routing.proto","google/api/service.proto","google/api/servicecontrol/v1/check_error.proto","google/api/servicecontrol/v1/distribution.proto","google/api/servicecontrol/v1/http_request.proto","google/api/servicecontrol/v1/log_entry.proto","google/api/servicecontrol/v1/metric_value.proto","google/api/servicecontrol/v1/operation.proto","google/api/servicecontrol/v1/quota_controller.proto","google/api/servicecontrol/v1/service_controller.proto","google/api/servicecontrol/v2/service_controller.proto","google/api/servicemanagement/v1/resources.proto","google/api/servicemanagement/v1/servicemanager.proto","google/api/serviceusage/v1/resources.proto","google/api/serviceusage/v1/serviceusage.proto","google/api/serviceusage/v1beta1/resources.proto","google/api/serviceusage/v1beta1/serviceusage.proto","google/api/source_info.proto","google/api/system_parameter.proto","google/api/usage.proto","google/api/visibility.proto","google/cloud/location/locations.proto","google/iam/v1/iam_policy.proto","google/iam/v1/logging/audit_data.proto","google/iam/v1/options.proto","google/iam/v1/policy.proto","google/logging/type/http_request.proto","google/logging/type/log_severity.proto","google/longrunning/operations.proto","google/monitoring/v3/alert.proto","google/monitoring/v3/alert_service.proto","google/monitoring/v3/common.proto","google/monitoring/v3/dropped_labels.proto","google/monitoring/v3/group.proto","google/monitoring/v3/group_service.proto","google/monitoring/v3/metric.proto","google/monitoring/v3/metric_service.proto","google/monitoring/v3/mutation_record.proto","google/monitoring/v3/notification.proto","google/monitoring/v3/notification_service.proto","google/monitoring/v3/query_service.proto","google/monitoring/v3/service.proto","google/monitoring/v3/service_service.proto","google/monitoring/v3/snooze.proto","google/monitoring/v3/snooze_service.proto","google/monitoring/v3/span_context.proto","google/monitoring/v3/uptime.proto","google/monitoring/v3/uptime_service.proto","google/protobuf/any.proto","google/protobuf/api.proto","google/protobuf/bridge/message_set.proto","google/protobuf/compiler/plugin.proto","google/protobuf/compiler/ruby/ruby_generated_code.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2_import.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit_legacy.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_implicit.proto","google/protobuf/cpp_features.proto","google/protobuf/descriptor.proto","google/protobuf/duration.proto","google/protobuf/empty.proto","google/protobuf/field_mask.proto","google/protobuf/source_context.proto","google/protobuf/struct.proto","google/protobuf/timestamp.proto","google/protobuf/type.proto","google/protobuf/util/json_format.proto","google/protobuf/util/json_format_proto3.proto","google/protobuf/wrappers.proto","google/rpc/code.proto","google/rpc/context/attribute_context.proto","google/rpc/context/audit_context.proto","google/rpc/error_details.proto","google/rpc/http.proto","google/rpc/status.proto","google/type/calendar_period.proto","google/type/color.proto","google/type/date.proto","google/type/datetime.proto","google/type/dayofweek.proto","google/type/decimal.proto","google/type/expr.proto","google/type/fraction.proto","google/type/interval.proto","google/type/latlng.proto","google/type/localized_text.proto","google/type/money.proto","google/type/month.proto","google/type/phone_number.proto","google/type/postal_address.proto","google/type/quaternion.proto","google/type/timeofday.proto"]');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/package.json":
/*!**********************************************!*\
  !*** ./node_modules/google-gax/package.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"google-gax","version":"5.0.0","description":"Google API Extensions","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","build/protos/","!build/src/**/*.map"],"dependencies":{"@grpc/grpc-js":"^1.12.6","@grpc/proto-loader":"^0.7.13","@types/long":"^5.0.0","abort-controller":"^3.0.0","duplexify":"^4.1.3","google-auth-library":"^10.1.0","google-logging-utils":"^1.1.1","node-fetch":"^3.3.2","object-hash":"^3.0.0","proto3-json-serializer":"^3.0.0","protobufjs":"^7.5.3","retry-request":"^8.0.0"},"devDependencies":{"@babel/plugin-proposal-private-methods":"^7.18.6","@types/mocha":"^10.0.10","@types/ncp":"^2.0.8","@types/node":"^22.0.0","@types/object-hash":"^3.0.6","@types/proxyquire":"^1.3.31","@types/pumpify":"^1.4.4","@types/sinon":"^17.0.3","@types/uglify-js":"^3.17.5","c8":"^10.1.3","codecov":"^3.8.3","execa":"^5.0.0","glob":"10.4.5","google-proto-files":"^4.2.0","gts":"^6.0.2","jackspeak":"^3.0.2","jsdoc":"^4.0.4","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","linkinator":"^6.1.2","long":"^5.2.4","lru-cache":"^10.0.0","mkdirp":"^3.0.1","mocha":"^11.1.0","ncp":"^2.0.0","null-loader":"^4.0.1","pdfmake":"^0.2.18","proxyquire":"^2.1.3","pumpify":"^2.0.1","sinon":"^20.0.0","stream-events":"^1.0.5","ts-loader":"^8.0.0","typescript":"^5.7.3","uglify-js":"^3.19.3","walkdir":"^0.4.1","webpack":"^5.97.1","webpack-cli":"^6.0.1"},"scripts":{"docs":"jsdoc -c .jsdoc.js","pretest":"npm run prepare","test":"c8 mocha build/test/unit","lint":"gts check src samples test","clean":"gts clean","compile":"tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/","compile-operation-protos":"pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts","compile-compute-operations-protos":"pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts","compile-iam-protos":"pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts","compile-location-protos":"pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts","compile-status-protos":"pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json","compile-http-protos":"pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts","fix":"gts fix","prepare":"npm run compile && cd ../tools && npm i && npm run compile && cd ../gax && pwd && node ../tools/build/src/prepublish.js . && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json","system-test":"c8 mocha build/test/system-test --timeout 600000 && npm run test-application","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","docs-test":"linkinator docs","predocs-test":"npm run docs","browser-test":"cd test/browser-test && npm run prefetch && npm install && npm test","test-application":"cd test/test-application && npm run prefetch && npm install && npm start","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean","update-protos":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/listProtos.js .","minify-proto-json":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/minify.js"},"keywords":["grpc"],"exports":{".":"./build/src/index.js","./fallback":"./build/src/fallback.js","./gax":"./build/src/gax.js","./build/src/protobuf":"./build/src/protobuf.js","./build/src/index.js":"./build/src/index.js"},"repository":{"type":"git","url":"https://github.com/googleapis/gax-nodejs.git","directory":"gax"},"author":"Google API Authors","license":"Apache-2.0","bugs":{"url":"https://github.com/googleapis/gax-nodejs/issues"},"homepage":"https://github.com/googleapis/gax-nodejs#readme","engines":{"node":">=18"},"browser":"build/src/fallback.js"}');

/***/ })

};
;